// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agvmessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.aka.sc.ProtocolFormat.ase.agvMessage {

  /// <summary>Holder for reflection information generated from agvmessage.proto</summary>
  public static partial class AgvmessageReflection {

    #region Descriptor
    /// <summary>File descriptor for agvmessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgvmessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBhZ3ZtZXNzYWdlLnByb3RvEgh0dXRvcmlhbCIrCglUaW1lc3RhbXASDwoH",
            "c2Vjb25kcxgBIAEoAxINCgVuYW5vcxgCIAEoBSJQCgtDb3VwbGVySW5mbxIR",
            "CglBZGRyZXNzSUQYASABKAkSLgoNQ291cGxlclN0YXR1cxgCIAEoDjIXLnR1",
            "dG9yaWFsLkNvdXBsZXJTdGF0dXMi6AIKIElEXzFfSE9TVF9CQVNJQ19JTkZP",
            "X1ZFUlNJT05fUkVQEhkKEURhdGFEYXRlVGltZV9ZZWFyGAEgASgJEhoKEkRh",
            "dGFEYXRlVGltZV9Nb250aBgCIAEoCRIYChBEYXRhRGF0ZVRpbWVfRGF5GAMg",
            "ASgJEhkKEURhdGFEYXRlVGltZV9Ib3VyGAQgASgJEhsKE0RhdGFEYXRlVGlt",
            "ZV9NaW51dGUYBSABKAkSGwoTRGF0YURhdGVUaW1lX1NlY29uZBgGIAEoCRIY",
            "ChBDdXJyZW50VGltZV9ZZWFyGAcgASgJEhkKEUN1cnJlbnRUaW1lX01vbnRo",
            "GAggASgJEhcKD0N1cnJlbnRUaW1lX0RheRgJIAEoCRIYChBDdXJyZW50VGlt",
            "ZV9Ib3VyGAogASgJEhoKEkN1cnJlbnRUaW1lX01pbnV0ZRgLIAEoCRIaChJD",
            "dXJyZW50VGltZV9TZWNvbmQYDCABKAkiPAonSURfMTAxX0hPU1RfQkFTSUNf",
            "SU5GT19WRVJTSU9OX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSLdAQod",
            "SURfMTAyX0JBU0lDX0lORk9fVkVSU0lPTl9SRVASHQoVQmFzaWNJbmZvVmVy",
            "c2lvbl9ZZWFyGAEgASgJEh4KFkJhc2ljSW5mb1ZlcnNpb25fTW9udGgYAiAB",
            "KAkSHAoUQmFzaWNJbmZvVmVyc2lvbl9EYXkYAyABKAkSHQoVQmFzaWNJbmZv",
            "VmVyc2lvbl9Ib3VyGAQgASgJEh8KF0Jhc2ljSW5mb1ZlcnNpb25fTWludXRl",
            "GAUgASgJEh8KF0Jhc2ljSW5mb1ZlcnNpb25fU2Vjb25kGAYgASgJIjUKIElE",
            "XzJfQkFTSUNfSU5GT19WRVJTSU9OX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgB",
            "IAEoBSJFChZJRF8xMV9DT1VQTEVSX0lORk9fUkVQEisKDENvdXBsZXJJbmZv",
            "cxgBIAMoCzIVLnR1dG9yaWFsLkNvdXBsZXJJbmZvIjEKHElEXzExMV9DT1VQ",
            "TEVSX0lORk9fUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIuMCChhJRF8x",
            "M19UQVZFTExJTkdfREFUQV9SRVASEgoKUmVzb2x1dGlvbhgBIAEoDRIUCgxT",
            "dGFydFN0b3BTcGQYAiABKA0SEAoITWF4U3BlZWQYAyABKA0SEQoJQWNjZWxU",
            "aW1lGAQgASgNEhIKClNDdXJ2ZVJhdGUYBSABKAUSEQoJT3JpZ2luRGlyGAYg",
            "ASgFEhEKCU9yaWdpblNwZBgHIAEoDRIQCghCZWFlbVNwZBgIIAEoDRISCgpN",
            "YW51YWxIU3BkGAkgASgNEhIKCk1hbnVhbExTcGQYCiABKA0SEwoLVGVhY2hp",
            "bmdTcGQYCyABKA0SEQoJUm90YXRlRGlyGAwgASgFEhMKC0VuY29kZXJQb2xl",
            "GA0gASgFEhwKFFBvc2l0aW9uQ29tcGVuc2F0aW9uGA4gASgNEhMKC0tlZXBE",
            "aXN0RmFyGA8gASgNEhQKDEtlZXBEaXN0TmVhchgQIAEoDSIzCh5JRF8xMTNf",
            "VEFWRUxMSU5HX0RBVEFfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIq0D",
            "ChZJRF8xNV9TRUNUSU9OX0RBVEFfUkVQEjoKCFNlY3Rpb25zGAEgAygLMigu",
            "dHV0b3JpYWwuSURfMTVfU0VDVElPTl9EQVRBX1JFUC5TZWN0aW9uGtYCCgdT",
            "ZWN0aW9uEhAKCERyaXZlRGlyGAEgASgFEhIKCkFlcmFTZWNzb3IYAiABKAUS",
            "EAoIR3VpZGVEaXIYAyABKAUSEQoJU2VjdGlvbklEGAQgASgJEhAKCEZyb21B",
            "ZGRyGAUgASgJEg4KBlRvQWRkchgGIAEoCRIUCgxDb250cm9sVGFibGUYByAB",
            "KAUSDQoFU3BlZWQYCSABKA0SEAoIRGlzdGFuY2UYCiABKA0SGQoRQ2hhbmdl",
            "QXJlYVNlbnNvcjEYCyABKAUSFwoPQ2hhbmdlR3VpZGVEaXIxGAwgASgFEhUK",
            "DUNoYW5nZVNlZ051bTEYDSABKAkSGQoRQ2hhbmdlQXJlYVNlbnNvcjIYDiAB",
            "KAUSFwoPQ2hhbmdlR3VpZGVEaXIyGA8gASgFEhUKDUNoYW5nZVNlZ051bTIY",
            "ECABKAkSEQoJQXRTZWdtZW50GBEgASgJIjEKHElEXzExNV9TRUNUSU9OX0RB",
            "VEFfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIr0BChZJRF8xN19BRERS",
            "RVNTX0RBVEFfUkVQEjoKCEFkZHJlc3NzGAEgAygLMigudHV0b3JpYWwuSURf",
            "MTdfQUREUkVTU19EQVRBX1JFUC5BZGRyZXNzGmcKB0FkZHJlc3MSDAoEQWRk",
            "chgBIAEoCRISCgpSZXNvbHV0aW9uGAIgASgFEhAKCExvYWN0aW9uGAMgASgF",
            "EhQKDEJsb2NrUmVsZWFzZRgEIAEoBRISCgpISURSZWxlYXNlGAUgASgFIjEK",
            "HElEXzExN19BRERSRVNTX0RBVEFfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEg",
            "ASgFIqMBChRJRF8xOV9TQ0FMRV9EQVRBX1JFUBISCgpSZXNvbHV0aW9uGAEg",
            "ASgNEhEKCUlucG9zQXJlYRgCIAEoDRIWCg5JbnBvc1N0YWJpbGl0eRgDIAEo",
            "DRISCgpTY2FsZVB1bHNlGAQgASgNEhMKC1NjYWxlT2Zmc2V0GAUgASgNEhIK",
            "ClNjYWxlUmVzZXQYBiABKA0SDwoHUmVhZERpchgHIAEoBSIvChpJRF8xMTlf",
            "U0NBTEVfREFUQV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUixgEKFklE",
            "XzIxX0NPTlRST0xfREFUQV9SRVASEQoJVGltZW91dFQxGAEgASgNEhEKCVRp",
            "bWVvdXRUMhgCIAEoDRIRCglUaW1lb3V0VDMYAyABKA0SEQoJVGltZW91dFQ0",
            "GAQgASgNEhEKCVRpbWVvdXRUNRgFIAEoDRIRCglUaW1lb3V0VDYYBiABKA0S",
            "EQoJVGltZW91dFQ3GAcgASgNEhEKCVRpbWVvdXRUOBgIIAEoDRIUCgxUaW1l",
            "b3V0QmxvY2sYCSABKA0iMQocSURfMTIxX0NPTlRST0xfREFUQV9SRVNQT05T",
            "RRIRCglSZXBseUNvZGUYASABKAUiiQIKFElEXzIzX0dVSURFX0RBVEFfUkVQ",
            "EhQKDFN0YXJ0U3RvcFNwZBgBIAEoDRIQCghNYXhTcGVlZBgCIAEoDRIRCglB",
            "Y2NlbFRpbWUYAyABKA0SEgoKU0N1cnZlUmF0ZRgEIAEoBRIRCglOb3JtYWxT",
            "cGQYBSABKA0SEgoKTWFudWFsSFNwZBgGIAEoDRISCgpNYW51YWxMU3BkGAcg",
            "ASgNEhEKCUxGTG9ja1BvcxgIIAEoDRIRCglMQkxvY2tQb3MYCSABKA0SEQoJ",
            "UkZMb2NrUG9zGAogASgNEhEKCVJCTG9ja1BvcxgLIAEoDRIbChNDaGFuZ2VT",
            "dGFiaWxpdHlUaW1lGAwgASgNIi8KGklEXzEyM19HVUlERV9EQVRBX1JFU1BP",
            "TlNFEhEKCVJlcGx5Q29kZRgBIAEoBSIdChtJRF82MV9JTkRJVklEVUFMX1VQ",
            "TE9BRF9SRVEifwohSURfMTYxX0lORElWSURVQUxfVVBMT0FEX1JFU1BPTlNF",
            "EhUKDU9mZnNldEd1aWRlRkwYASABKA0SFQoNT2Zmc2V0R3VpZGVSTBgCIAEo",
            "DRIVCg1PZmZzZXRHdWlkZUZSGAMgASgNEhUKDU9mZnNldEd1aWRlUlIYBCAB",
            "KA0iIAoeSURfMTYyX0lORElWSURVQUxfRE9XTkxPQURfUkVRIoABCiJJRF82",
            "Ml9JTkRJVklEVUFMX0RPV05MT0FEX1JFU1BPTlNFEhUKDU9mZnNldEd1aWRl",
            "RkwYASABKA0SFQoNT2Zmc2V0R3VpZGVSTBgCIAEoDRIVCg1PZmZzZXRHdWlk",
            "ZUZSGAMgASgNEhUKDU9mZnNldEd1aWRlUlIYBCABKA0ieQobSURfNjNfSU5E",
            "SVZJRFVBTF9DSEFOR0VfUkVREhUKDU9mZnNldEd1aWRlRkwYASABKA0SFQoN",
            "T2Zmc2V0R3VpZGVSTBgCIAEoDRIVCg1PZmZzZXRHdWlkZUZSGAMgASgNEhUK",
            "DU9mZnNldEd1aWRlUlIYBCABKA0iNgohSURfMTYzX0lORElWSURVQUxfQ0hB",
            "TkdFX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSKEAgoTSURfMzFfVFJB",
            "TlNfUkVRVUVTVBIOCgZDbWRfSUQYASABKAkSMgoNQ29tbWFuZEFjdGlvbhgC",
            "IAEoDjIbLnR1dG9yaWFsLkNvbW1hbmRBY3Rpb25UeXBlEg8KB0xvYWRBZHIY",
            "AyABKAkSFgoORGVzdGluYXRpb25BZHIYBCABKAkSDgoGQ1NUX0lEGAUgASgJ",
            "EhIKCkxvYWRQb3J0SUQYBiABKAkSFAoMVW5sb2FkUG9ydElEGAcgASgJEhkK",
            "EUlzTG9hZFBvcnRIYXNHYXRlGAggASgIEhsKE0lzVW5sb2FkUG9ydEhhc0dh",
            "dGUYCSABKAgSDgoGTE9UX0lEGAogASgJIoABChVJRF8xMzFfVFJBTlNfUkVT",
            "UE9OU0USDgoGQ21kX0lEGAEgASgJEjIKDUNvbW1hbmRBY3Rpb24YAiABKA4y",
            "Gy50dXRvcmlhbC5Db21tYW5kQWN0aW9uVHlwZRIRCglSZXBseUNvZGUYAyAB",
            "KAUSEAoITmdSZWFzb24YBCABKAkiqgIKHElEXzEzMl9UUkFOU19DT01QTEVU",
            "RV9SRVBPUlQSDgoGQ21kX0lEGAEgASgJEg4KBkNTVF9JRBgCIAEoCRIrCglD",
            "bXBTdGF0dXMYAyABKA4yGC50dXRvcmlhbC5Db21wbGV0ZVN0YXR1cxIUCgxD",
            "dXJyZW50QWRySUQYBCABKAkSFAoMQ3VycmVudFNlY0lEGAUgASgJEhQKDFNl",
            "Y19EaXN0YW5jZRgGIAEoDRIZChFDbWRfUG93ZXJfQ29uc3VtZRgHIAEoDRIU",
            "CgxDbWRfRGlzdGFuY2UYCCABKAUSDQoFWEF4aXMYCSABKAESDQoFWUF4aXMY",
            "CiABKAESFgoORGlyZWN0aW9uQW5nbGUYCyABKAESFAoMVmVoaWNsZUFuZ2xl",
            "GAwgASgBIkQKHUlEXzMyX1RSQU5TX0NPTVBMRVRFX1JFU1BPTlNFEhEKCVJl",
            "cGx5Q29kZRgBIAEoBRIQCghXYWl0VGltZRgCIAEoBSKQAgoWSURfMTM0X1RS",
            "QU5TX0VWRU5UX1JFUBImCglFdmVudFR5cGUYASABKA4yEy50dXRvcmlhbC5F",
            "dmVudFR5cGUSFAoMQ3VycmVudEFkcklEGAIgASgJEhQKDEN1cnJlbnRTZWNJ",
            "RBgDIAEoCRIUCgxTZWNfRGlzdGFuY2UYBCABKA0SMQoQRHJpdmluZ0RpcmVj",
            "dGlvbhgFIAEoDjIXLnR1dG9yaWFsLkRyaXZlRGlyY3Rpb24SDQoFWEF4aXMY",
            "BiABKAESDQoFWUF4aXMYByABKAESFgoORGlyZWN0aW9uQW5nbGUYCCABKAES",
            "FAoMVmVoaWNsZUFuZ2xlGAkgASgBEg0KBVNwZWVkGAogASgBIkUKG0lEXzM1",
            "X0NTVF9JRF9SRU5BTUVfUkVRVUVTVBISCgpPTERfQ1NUX0lEGAEgASgJEhIK",
            "Ck5FV19DU1RfSUQYAiABKAkiMgodSURfMTM1X0NTVF9JRF9SRU5BTUVfUkVT",
            "UE9OU0USEQoJUmVwbHlDb2RlGAEgASgFIlkKC1Jlc2VydmVJbmZvEhoKElJl",
            "c2VydmVfU2VjdGlvbl9JRBgBIAEoCRIuCg1Ecml2ZURpcmN0aW9uGAIgASgO",
            "MhcudHV0b3JpYWwuRHJpdmVEaXJjdGlvbiJZCghQb3J0SW5mbxIKCgJJRBgB",
            "IAEoCRITCgtJc0lucHV0TW9kZRgCIAEoCBIUCgxJc091dHB1dE1vZGUYAyAB",
            "KAgSFgoOSXNBR1ZQb3J0UmVhZHkYBCABKAgi9gIKFklEXzEzNl9UUkFOU19F",
            "VkVOVF9SRVASJgoJRXZlbnRUeXBlGAEgASgOMhMudHV0b3JpYWwuRXZlbnRU",
            "eXBlEisKDFJlc2VydmVJbmZvcxgCIAMoCzIVLnR1dG9yaWFsLlJlc2VydmVJ",
            "bmZvEhgKEFJlcXVlc3RfQmxvY2tfSUQYAyABKAkSDgoGQ1NUX0lEGAQgASgJ",
            "EhsKE1JlbGVhc2VfQmxvY2tfQWRySUQYBSABKAkSFAoMQ3VycmVudEFkcklE",
            "GAYgASgJEhQKDEN1cnJlbnRTZWNJRBgHIAEoCRIUCgxTZWNfRGlzdGFuY2UY",
            "CCABKA0SLgoNQkNSUmVhZFJlc3VsdBgJIAEoDjIXLnR1dG9yaWFsLkJDUlJl",
            "YWRSZXN1bHQSDgoGQ21kX0lEGAogASgJEicKCExvY2F0aW9uGAsgASgOMhUu",
            "dHV0b3JpYWwuQUdWTG9jYXRpb24SFQoNQ3VycmVudFBvcnRJRBgMIAEoCSLk",
            "AgoaSURfMzZfVFJBTlNfRVZFTlRfUkVTUE9OU0USJgoJRXZlbnRUeXBlGAEg",
            "ASgOMhMudHV0b3JpYWwuRXZlbnRUeXBlEjMKEklzX1Jlc2VydmVfU3VjY2Vz",
            "cxgCIAEoDjIXLnR1dG9yaWFsLlJlc2VydmVSZXN1bHQSKQoNSXNfQmxvY2tf",
            "UGFzcxgDIAEoDjISLnR1dG9yaWFsLlBhc3NUeXBlEhcKD1JlbmFtZUNhcnJp",
            "ZXJJRBgEIAEoCRIuCgtSZXBseUFjdGlvbhgFIAEoDjIZLnR1dG9yaWFsLlJl",
            "cGx5QWN0aW9uVHlwZRIRCglSZXBseUNvZGUYBiABKAUSKwoMUmVzZXJ2ZUlu",
            "Zm9zGAcgAygLMhUudHV0b3JpYWwuUmVzZXJ2ZUluZm8SDgoGQ21kX0lEGAgg",
            "ASgJEiUKCVBvcnRJbmZvcxgJIAMoCzISLnR1dG9yaWFsLlBvcnRJbmZvIl4K",
            "GklEXzM3X1RSQU5TX0NBTkNFTF9SRVFVRVNUEg4KBkNtZF9JRBgBIAEoCRIw",
            "CgxDYW5jZWxBY3Rpb24YAiABKA4yGi50dXRvcmlhbC5DYW5jZWxBY3Rpb25U",
            "eXBlInMKHElEXzEzN19UUkFOU19DQU5DRUxfUkVTUE9OU0USDgoGQ21kX0lE",
            "GAEgASgJEjAKDENhbmNlbEFjdGlvbhgCIAEoDjIaLnR1dG9yaWFsLkNhbmNl",
            "bEFjdGlvblR5cGUSEQoJUmVwbHlDb2RlGAMgASgFIiUKCUZyb21Ub0FkchIM",
            "CgRGcm9tGAEgASgJEgoKAlRvGAIgASgJInEKCUd1aWRlSW5mbxIjCgZGcm9t",
            "VG8YASABKAsyEy50dXRvcmlhbC5Gcm9tVG9BZHISFQoNR3VpZGVTZWN0aW9u",
            "cxgCIAMoCRIWCg5HdWlkZUFkZHJlc3NlcxgDIAMoCRIQCghEaXN0YW5jZRgE",
            "IAEoDSJHChlJRF8xMzhfR1VJREVfSU5GT19SRVFVRVNUEioKDUZyb21Ub0Fk",
            "ckxpc3QYASADKAsyEy50dXRvcmlhbC5Gcm9tVG9BZHIiRwoZSURfMzhfR1VJ",
            "REVfSU5GT19SRVNQT05TRRIqCg1HdWlkZUluZm9MaXN0GAEgAygLMhMudHV0",
            "b3JpYWwuR3VpZGVJbmZvImYKE0lEXzM5X1BBVVNFX1JFUVVFU1QSJwoJRXZl",
            "bnRUeXBlGAEgASgOMhQudHV0b3JpYWwuUGF1c2VFdmVudBImCglQYXVzZVR5",
            "cGUYAiABKA4yEy50dXRvcmlhbC5QYXVzZVR5cGUiUwoVSURfMTM5X1BBVVNF",
            "X1JFU1BPTlNFEicKCUV2ZW50VHlwZRgBIAEoDjIULnR1dG9yaWFsLlBhdXNl",
            "RXZlbnQSEQoJUmVwbHlDb2RlGAIgASgFIksKFUlEXzQxX01PREVfQ0hBTkdF",
            "X1JFURIyCg9PcGVyYXRpbmdWSE1vZGUYASABKA4yGS50dXRvcmlhbC5PcGVy",
            "YXRpbmdWSE1vZGUiMAobSURfMTQxX01PREVfQ0hBTkdFX1JFU1BPTlNFEhEK",
            "CVJlcGx5Q29kZRgBIAEoBSIqChRJRF80M19TVEFUVVNfUkVRVUVTVBISCgpT",
            "eXN0ZW1UaW1lGAEgASgJIoAMChZJRF8xNDNfU1RBVFVTX1JFU1BPTlNFEhQK",
            "DEN1cnJlbnRBZHJJRBgBIAEoCRIUCgxDdXJyZW50U2VjSUQYAiABKAkSKgoK",
            "TW9kZVN0YXR1cxgDIAEoDjIWLnR1dG9yaWFsLlZITW9kZVN0YXR1cxIuCgxB",
            "Y3Rpb25TdGF0dXMYBCABKA4yGC50dXRvcmlhbC5WSEFjdGlvblN0YXR1cxIs",
            "CgtQb3dlclN0YXR1cxgFIAEoDjIXLnR1dG9yaWFsLlZoUG93ZXJTdGF0dXMS",
            "LgoOT2JzdGFjbGVTdGF0dXMYBiABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5n",
            "bGUSLQoNUmVzZXJ2ZVN0YXR1cxgHIAEoDjIWLnR1dG9yaWFsLlZoU3RvcFNp",
            "bmdsZRIuCg5CbG9ja2luZ1N0YXR1cxgIIAEoDjIWLnR1dG9yaWFsLlZoU3Rv",
            "cFNpbmdsZRIrCgtQYXVzZVN0YXR1cxgJIAEoDjIWLnR1dG9yaWFsLlZoU3Rv",
            "cFNpbmdsZRIrCgtFcnJvclN0YXR1cxgKIAEoDjIWLnR1dG9yaWFsLlZoU3Rv",
            "cFNpbmdsZRIUCgxTZWNfRGlzdGFuY2UYCyABKA0SFQoNT2JzdF9EaXN0YW5j",
            "ZRgMIAEoBRIXCg9PYnN0X1ZlaGljbGVfSUQYDSABKAkSKwoMUmVzZXJ2ZUlu",
            "Zm9zGA4gAygLMhUudHV0b3JpYWwuUmVzZXJ2ZUluZm8SGQoRU3RvcHBlZF9C",
            "bG9ja19JRF8YDyABKAkSNgoWRWFydGhxdWFrZV9QYXVzZV90YXR1cxgQIAEo",
            "DjIWLnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIzChNTYWZldHlfUGF1c2VfU3Rh",
            "dHVzGBEgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEg4KBkNtZElkMRgS",
            "IAEoCRIqCgpDbXNTdGF0ZV8xGBMgASgOMhYudHV0b3JpYWwuQ29tbWFuZFN0",
            "YXRlEg4KBkNtZElkMhgUIAEoCRIqCgpDbXNTdGF0ZV8yGBUgASgOMhYudHV0",
            "b3JpYWwuQ29tbWFuZFN0YXRlEisKCEhhc0NzdF9MGBYgASgOMhkudHV0b3Jp",
            "YWwuVmhMb2FkQ1NUU3RhdHVzEg4KBkNzdElkTBgXIAEoCRIrCghIYXNDc3Rf",
            "UhgYIAEoDjIZLnR1dG9yaWFsLlZoTG9hZENTVFN0YXR1cxIOCgZDc3RJZFIY",
            "GSABKAkSMQoQRHJpdmluZ0RpcmVjdGlvbhgaIAEoDjIXLnR1dG9yaWFsLkRy",
            "aXZlRGlyY3Rpb24SFgoOU3RlZXJpbmdfV2hlZWwYGyABKAUSFwoPQmF0dGVy",
            "eUNhcGFjaXR5GBwgASgNEi4KDENoYXJnZVN0YXR1cxgdIAEoDjIYLnR1dG9y",
            "aWFsLlZoQ2hhcmdlU3RhdHVzEhoKEkJhdHRlcnlUZW1wZXJhdHVyZRgeIAEo",
            "BRINCgVYQXhpcxgfIAEoARINCgVZQXhpcxggIAEoARIWCg5EaXJlY3Rpb25B",
            "bmdsZRghIAEoARIUCgxWZWhpY2xlQW5nbGUYIiABKAESDQoFU3BlZWQYIyAB",
            "KAESHAoUV2lsbFBhc3NHdWlkZVNlY3Rpb24YJCADKAkSEgoKU3lzdGVtVGlt",
            "ZRglIAEoCRIsCg1TaGVsZlN0YXR1c19MGCYgASgOMhUudHV0b3JpYWwuU2hl",
            "bGZTdGF0dXMSLAoNU2hlbGZTdGF0dXNfUhgnIAEoDjIVLnR1dG9yaWFsLlNo",
            "ZWxmU3RhdHVzEhoKEkN1cnJlbnRFeGN1dGVDbWRJZBgoIAEoCRItCg1PcFBh",
            "dXNlU3RhdHVzGCkgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEg4KBkNt",
            "ZElkMxgqIAEoCRIqCgpDbXNTdGF0ZV8zGCsgASgOMhYudHV0b3JpYWwuQ29t",
            "bWFuZFN0YXRlEg4KBkNtZElkNBgsIAEoCRIqCgpDbXNTdGF0ZV80GC0gASgO",
            "MhYudHV0b3JpYWwuQ29tbWFuZFN0YXRlIoIMChhJRF8xNDRfU1RBVFVTX0NI",
            "QU5HRV9SRVASFAoMQ3VycmVudEFkcklEGAEgASgJEhQKDEN1cnJlbnRTZWNJ",
            "RBgCIAEoCRIqCgpNb2RlU3RhdHVzGAMgASgOMhYudHV0b3JpYWwuVkhNb2Rl",
            "U3RhdHVzEi4KDEFjdGlvblN0YXR1cxgEIAEoDjIYLnR1dG9yaWFsLlZIQWN0",
            "aW9uU3RhdHVzEiwKC1Bvd2VyU3RhdHVzGAUgASgOMhcudHV0b3JpYWwuVmhQ",
            "b3dlclN0YXR1cxIuCg5PYnN0YWNsZVN0YXR1cxgGIAEoDjIWLnR1dG9yaWFs",
            "LlZoU3RvcFNpbmdsZRItCg1SZXNlcnZlU3RhdHVzGAcgASgOMhYudHV0b3Jp",
            "YWwuVmhTdG9wU2luZ2xlEi4KDkJsb2NraW5nU3RhdHVzGAggASgOMhYudHV0",
            "b3JpYWwuVmhTdG9wU2luZ2xlEisKC1BhdXNlU3RhdHVzGAkgASgOMhYudHV0",
            "b3JpYWwuVmhTdG9wU2luZ2xlEisKC0Vycm9yU3RhdHVzGAogASgOMhYudHV0",
            "b3JpYWwuVmhTdG9wU2luZ2xlEhQKDFNlY19EaXN0YW5jZRgLIAEoDRIVCg1P",
            "YnN0X0Rpc3RhbmNlGAwgASgFEhcKD09ic3RfVmVoaWNsZV9JRBgNIAEoCRIr",
            "CgxSZXNlcnZlSW5mb3MYDiADKAsyFS50dXRvcmlhbC5SZXNlcnZlSW5mbxIZ",
            "ChFTdG9wcGVkX0Jsb2NrX0lEXxgPIAEoCRI2ChZFYXJ0aHF1YWtlX1BhdXNl",
            "X3RhdHVzGBAgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEjMKE1NhZmV0",
            "eV9QYXVzZV9TdGF0dXMYESABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUS",
            "DgoGQ21kSWQxGBIgASgJEioKCkNtc1N0YXRlXzEYEyABKA4yFi50dXRvcmlh",
            "bC5Db21tYW5kU3RhdGUSDgoGQ21kSWQyGBQgASgJEioKCkNtc1N0YXRlXzIY",
            "FSABKA4yFi50dXRvcmlhbC5Db21tYW5kU3RhdGUSKwoISGFzQ3N0X0wYFiAB",
            "KA4yGS50dXRvcmlhbC5WaExvYWRDU1RTdGF0dXMSDgoGQ3N0SWRMGBcgASgJ",
            "EisKCEhhc0NzdF9SGBggASgOMhkudHV0b3JpYWwuVmhMb2FkQ1NUU3RhdHVz",
            "Eg4KBkNzdElkUhgZIAEoCRIxChBEcml2aW5nRGlyZWN0aW9uGBogASgOMhcu",
            "dHV0b3JpYWwuRHJpdmVEaXJjdGlvbhIWCg5TdGVlcmluZ19XaGVlbBgbIAEo",
            "BRIXCg9CYXR0ZXJ5Q2FwYWNpdHkYHCABKA0SLgoMQ2hhcmdlU3RhdHVzGB0g",
            "ASgOMhgudHV0b3JpYWwuVmhDaGFyZ2VTdGF0dXMSGgoSQmF0dGVyeVRlbXBl",
            "cmF0dXJlGB4gASgFEg0KBVhBeGlzGB8gASgBEg0KBVlBeGlzGCAgASgBEhYK",
            "DkRpcmVjdGlvbkFuZ2xlGCEgASgBEhQKDFZlaGljbGVBbmdsZRgiIAEoARIN",
            "CgVTcGVlZBgjIAEoARIcChRXaWxsUGFzc0d1aWRlU2VjdGlvbhgkIAMoCRIS",
            "CgpTeXN0ZW1UaW1lGCUgASgJEiwKDVNoZWxmU3RhdHVzX0wYJiABKA4yFS50",
            "dXRvcmlhbC5TaGVsZlN0YXR1cxIsCg1TaGVsZlN0YXR1c19SGCcgASgOMhUu",
            "dHV0b3JpYWwuU2hlbGZTdGF0dXMSGgoSQ3VycmVudEV4Y3V0ZUNtZElkGCgg",
            "ASgJEi0KDU9wUGF1c2VTdGF0dXMYKSABKA4yFi50dXRvcmlhbC5WaFN0b3BT",
            "aW5nbGUSDgoGQ21kSWQzGCogASgJEioKCkNtc1N0YXRlXzMYKyABKA4yFi50",
            "dXRvcmlhbC5Db21tYW5kU3RhdGUSDgoGQ21kSWQ0GCwgASgJEioKCkNtc1N0",
            "YXRlXzQYLSABKA4yFi50dXRvcmlhbC5Db21tYW5kU3RhdGUiMQocSURfNDRf",
            "U1RBVFVTX0NIQU5HRV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiTwoT",
            "SURfNDVfUE9XRVJfT1BFX1JFURI4ChJPcGVyYXRpbmdQb3dlck1vZGUYASAB",
            "KA4yHC50dXRvcmlhbC5PcGVyYXRpbmdQb3dlck1vZGUiLgoZSURfMTQ1X1BP",
            "V0VSX09QRV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiXgoTSURfNTFf",
            "QVZPSURfUkVRVUVTVBIWCg5EZXN0aW5hdGlvbkFkchgBIAEoCRIWCg5HdWlk",
            "ZV9TZWN0aW9ucxgCIAMoCRIXCg9HdWlkZV9BZGRyZXNzZXMYAyADKAkiPAoV",
            "SURfMTUxX0FWT0lEX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBRIQCghO",
            "Z1JlYXNvbhgCIAEoCSIxChxJRF8xNTJfQVZPSURfQ09NUExFVEVfUkVQT1JU",
            "EhEKCUNtcFN0YXR1cxgBIAEoBSIyCh1JRF81Ml9BVk9JRF9DT01QTEVURV9S",
            "RVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiPgocSURfNzFfUkFOR0VfVEVB",
            "Q0hJTkdfUkVRVUVTVBIPCgdGcm9tQWRyGAEgASgJEg0KBVRvQWRyGAIgASgJ",
            "IjMKHklEXzE3MV9SQU5HRV9URUFDSElOR19SRVNQT05TRRIRCglSZXBseUNv",
            "ZGUYASABKAUidAolSURfMTcyX1JBTkdFX1RFQUNISU5HX0NPTVBMRVRFX1JF",
            "UE9SVBIPCgdGcm9tQWRyGAEgASgJEg0KBVRvQWRyGAIgASgJEhQKDFNlY19E",
            "aXN0YW5jZRgDIAEoDRIVCg1Db21wbGV0ZV9Db2RlGAQgASgFIjsKJklEXzcy",
            "X1JBTkdFX1RFQUNISU5HX0NPTVBMRVRFX1JFU1BPTlNFEhEKCVJlcGx5Q29k",
            "ZRgBIAEoBSI9ChtJRF8xNzRfQUREUkVTU19URUFDSF9SRVBPUlQSDAoEQWRk",
            "chgBIAEoCRIQCghQb3NpdGlvbhgCIAEoBSIxChxJRF83NF9BRERSRVNTX1RF",
            "QUNIX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSIbChlJRF85MV9BTEFS",
            "TV9SRVNFVF9SRVFVRVNUIjAKG0lEXzE5MV9BTEFSTV9SRVNFVF9SRVNQT05T",
            "RRIRCglSZXBseUNvZGUYASABKAUiaAoTSURfMTk0X0FMQVJNX1JFUE9SVBIP",
            "CgdFcnJDb2RlGAEgASgJEigKCUVyclN0YXR1cxgCIAEoDjIVLnR1dG9yaWFs",
            "LkVycm9yU3RhdHVzEhYKDkVyckRlc2NyaXB0aW9uGAMgASgJIikKFElEXzk0",
            "X0FMQVJNX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSK7IAoOV3JhcHBl",
            "ck1lc3NhZ2USCwoCSUQY6AcgASgFEg8KBlNlcU51bRjpByABKAUSGAoPTG9j",
            "YWxTeXN0ZW1UaW1lGOoHIAEoCRJJChNIb3N0X0Jhc2ljX0luZm9fUmVwGAEg",
            "ASgLMioudHV0b3JpYWwuSURfMV9IT1NUX0JBU0lDX0lORk9fVkVSU0lPTl9S",
            "RVBIABJRChRIb3N0X0Jhc2ljX0luZm9fUmVzcBhlIAEoCzIxLnR1dG9yaWFs",
            "LklEXzEwMV9IT1NUX0JBU0lDX0lORk9fVkVSU0lPTl9SRVNQT05TRUgAEkkK",
            "FkJhc2ljX0luZm9fVmVyc2lvbl9SZXAYZiABKAsyJy50dXRvcmlhbC5JRF8x",
            "MDJfQkFTSUNfSU5GT19WRVJTSU9OX1JFUEgAEk0KF0Jhc2ljX0luZm9fVmVy",
            "c2lvbl9SZXNwGAIgASgLMioudHV0b3JpYWwuSURfMl9CQVNJQ19JTkZPX1ZF",
            "UlNJT05fUkVTUE9OU0VIABI8ChBDb3VwbGVyX0luZm9fUmVwGAsgASgLMiAu",
            "dHV0b3JpYWwuSURfMTFfQ09VUExFUl9JTkZPX1JFUEgAEkMKEUNvdXBsZXJf",
            "SW5mb19SZXNwGG8gASgLMiYudHV0b3JpYWwuSURfMTExX0NPVVBMRVJfSU5G",
            "T19SRVNQT05TRUgAEkAKElRhdmVsbGluZ19EYXRhX1JlcBgNIAEoCzIiLnR1",
            "dG9yaWFsLklEXzEzX1RBVkVMTElOR19EQVRBX1JFUEgAEkcKE1RhdmVsbGlu",
            "Z19EYXRhX1Jlc3AYcSABKAsyKC50dXRvcmlhbC5JRF8xMTNfVEFWRUxMSU5H",
            "X0RBVEFfUkVTUE9OU0VIABI8ChBTZWN0aW9uX0RhdGFfUmVwGA8gASgLMiAu",
            "dHV0b3JpYWwuSURfMTVfU0VDVElPTl9EQVRBX1JFUEgAEkMKEVNlY3Rpb25f",
            "RGF0YV9SZXNwGHMgASgLMiYudHV0b3JpYWwuSURfMTE1X1NFQ1RJT05fREFU",
            "QV9SRVNQT05TRUgAEjwKEEFkZHJlc3NfRGF0YV9SZXAYESABKAsyIC50dXRv",
            "cmlhbC5JRF8xN19BRERSRVNTX0RBVEFfUkVQSAASQwoRQWRkcmVzc19EYXRh",
            "X1Jlc3AYdSABKAsyJi50dXRvcmlhbC5JRF8xMTdfQUREUkVTU19EQVRBX1JF",
            "U1BPTlNFSAASOAoOU2NhbGVfRGF0YV9SZXAYEyABKAsyHi50dXRvcmlhbC5J",
            "RF8xOV9TQ0FMRV9EQVRBX1JFUEgAEj8KD1NjYWxlX0RhdGFfUmVzcBh3IAEo",
            "CzIkLnR1dG9yaWFsLklEXzExOV9TQ0FMRV9EQVRBX1JFU1BPTlNFSAASPAoQ",
            "Q29udHJvbF9EYXRhX1JlcBgVIAEoCzIgLnR1dG9yaWFsLklEXzIxX0NPTlRS",
            "T0xfREFUQV9SRVBIABJDChFDb250cm9sX0RhdGFfUmVzcBh5IAEoCzImLnR1",
            "dG9yaWFsLklEXzEyMV9DT05UUk9MX0RBVEFfUkVTUE9OU0VIABI4Cg5HdWlk",
            "ZV9EYXRhX1JlcBgXIAEoCzIeLnR1dG9yaWFsLklEXzIzX0dVSURFX0RBVEFf",
            "UkVQSAASPwoPR3VpZGVfRGF0YV9SZXNwGHsgASgLMiQudHV0b3JpYWwuSURf",
            "MTIzX0dVSURFX0RBVEFfUkVTUE9OU0VIABJGChVJbmRpdmlkdWFsX1VwbG9h",
            "ZF9SZXEYPSABKAsyJS50dXRvcmlhbC5JRF82MV9JTkRJVklEVUFMX1VQTE9B",
            "RF9SRVFIABJOChZJbmRpdmlkdWFsX1VwbG9hZF9SZXNwGKEBIAEoCzIrLnR1",
            "dG9yaWFsLklEXzE2MV9JTkRJVklEVUFMX1VQTE9BRF9SRVNQT05TRUgAEkwK",
            "F0luZGl2aWR1YWxfRG93bmxvYWRfUmVxGKIBIAEoCzIoLnR1dG9yaWFsLklE",
            "XzE2Ml9JTkRJVklEVUFMX0RPV05MT0FEX1JFUUgAElAKGEluZGl2aWR1YWxf",
            "RG93bmxvYWRfUmVzcBg+IAEoCzIsLnR1dG9yaWFsLklEXzYyX0lORElWSURV",
            "QUxfRE9XTkxPQURfUkVTUE9OU0VIABJGChVJbmRpdmlkdWFsX0NoYW5nZV9S",
            "ZXEYPyABKAsyJS50dXRvcmlhbC5JRF82M19JTkRJVklEVUFMX0NIQU5HRV9S",
            "RVFIABJOChZJbmRpdmlkdWFsX0NoYW5nZV9SZXNwGKMBIAEoCzIrLnR1dG9y",
            "aWFsLklEXzE2M19JTkRJVklEVUFMX0NIQU5HRV9SRVNQT05TRUgAEjoKD01v",
            "ZGVfQ2hhbmdlX1JlcRgpIAEoCzIfLnR1dG9yaWFsLklEXzQxX01PREVfQ0hB",
            "TkdFX1JFUUgAEkIKEE1vZGVfQ2hhbmdlX1Jlc3AYjQEgASgLMiUudHV0b3Jp",
            "YWwuSURfMTQxX01PREVfQ0hBTkdFX1JFU1BPTlNFSAASMgoJVHJhbnNfUmVx",
            "GB8gASgLMh0udHV0b3JpYWwuSURfMzFfVFJBTlNfUkVRVUVTVEgAEjYKClRy",
            "YW5zX1Jlc3AYgwEgASgLMh8udHV0b3JpYWwuSURfMTMxX1RSQU5TX1JFU1BP",
            "TlNFSAASPwoMVHJhbl9DbXBfUmVwGIQBIAEoCzImLnR1dG9yaWFsLklEXzEz",
            "Ml9UUkFOU19DT01QTEVURV9SRVBPUlRIABJACg1UcmFuX0NtcF9SZXNwGCAg",
            "ASgLMicudHV0b3JpYWwuSURfMzJfVFJBTlNfQ09NUExFVEVfUkVTUE9OU0VI",
            "ABJCChFDU1RfSURfUmVuYW1lX1JlcRgjIAEoCzIlLnR1dG9yaWFsLklEXzM1",
            "X0NTVF9JRF9SRU5BTUVfUkVRVUVTVEgAEkYKEkNTVF9JRF9SZW5hbWVfUmVz",
            "cBiHASABKAsyJy50dXRvcmlhbC5JRF8xMzVfQ1NUX0lEX1JFTkFNRV9SRVNQ",
            "T05TRUgAEkAKEFRyYW5zX0NhbmNlbF9SZXEYJSABKAsyJC50dXRvcmlhbC5J",
            "RF8zN19UUkFOU19DQU5DRUxfUkVRVUVTVEgAEkQKEVRyYW5zX0NhbmNlbF9S",
            "ZXNwGIkBIAEoCzImLnR1dG9yaWFsLklEXzEzN19UUkFOU19DQU5DRUxfUkVT",
            "UE9OU0VIABI+Cg5HdWlkZV9JbmZvX1JlcRiKASABKAsyIy50dXRvcmlhbC5J",
            "RF8xMzhfR1VJREVfSU5GT19SRVFVRVNUSAASPgoPR3VpZGVfSW5mb19SZXNw",
            "GCYgASgLMiMudHV0b3JpYWwuSURfMzhfR1VJREVfSU5GT19SRVNQT05TRUgA",
            "EjIKCVBhdXNlX1JlcRgnIAEoCzIdLnR1dG9yaWFsLklEXzM5X1BBVVNFX1JF",
            "UVVFU1RIABI2CgpQYXVzZV9SZXNwGIsBIAEoCzIfLnR1dG9yaWFsLklEXzEz",
            "OV9QQVVTRV9SRVNQT05TRUgAEjwKD1RyYW5zX0V2ZW50X1JlcBiGASABKAsy",
            "IC50dXRvcmlhbC5JRF8xMzRfVFJBTlNfRVZFTlRfUkVQSAASQAoTSW1wX1Ry",
            "YW5zX0V2ZW50X1JlcBiIASABKAsyIC50dXRvcmlhbC5JRF8xMzZfVFJBTlNf",
            "RVZFTlRfUkVQSAASRAoUSW1wX1RyYW5zX0V2ZW50X1Jlc3AYJCABKAsyJC50",
            "dXRvcmlhbC5JRF8zNl9UUkFOU19FVkVOVF9SRVNQT05TRUgAEjQKClN0YXR1",
            "c19SZXEYKyABKAsyHi50dXRvcmlhbC5JRF80M19TVEFUVVNfUkVRVUVTVEgA",
            "EjwKD1N0YXR1c19SZXFfUmVzcBiPASABKAsyIC50dXRvcmlhbC5JRF8xNDNf",
            "U1RBVFVTX1JFU1BPTlNFSAASQAoRU3RhdHVlX0NoYW5nZV9SZXAYkAEgASgL",
            "MiIudHV0b3JpYWwuSURfMTQ0X1NUQVRVU19DSEFOR0VfUkVQSAASRAoSU3Rh",
            "dHVzX0NoYW5nZV9SZXNwGCwgASgLMiYudHV0b3JpYWwuSURfNDRfU1RBVFVT",
            "X0NIQU5HRV9SRVNQT05TRUgAEjYKDVBvd2VyX09wZV9SZXEYLSABKAsyHS50",
            "dXRvcmlhbC5JRF80NV9QT1dFUl9PUEVfUkVRSAASPgoOUG93ZXJfT3BlX1Jl",
            "c3AYkQEgASgLMiMudHV0b3JpYWwuSURfMTQ1X1BPV0VSX09QRV9SRVNQT05T",
            "RUgAEjIKCUF2b2lkX1JlcRgzIAEoCzIdLnR1dG9yaWFsLklEXzUxX0FWT0lE",
            "X1JFUVVFU1RIABI2CgpBdm9pZF9SZXNwGJcBIAEoCzIfLnR1dG9yaWFsLklE",
            "XzE1MV9BVk9JRF9SRVNQT05TRUgAEkUKEkF2b2lkX0NvbXBsZXRlX1JlcBiY",
            "ASABKAsyJi50dXRvcmlhbC5JRF8xNTJfQVZPSURfQ09NUExFVEVfUkVQT1JU",
            "SAASRgoTQXZvaWRfQ29tcGxldGVfUmVzcBg0IAEoCzInLnR1dG9yaWFsLklE",
            "XzUyX0FWT0lEX0NPTVBMRVRFX1JFU1BPTlNFSAASRAoSUmFuZ2VfVGVhY2hp",
            "bmdfUmVxGEcgASgLMiYudHV0b3JpYWwuSURfNzFfUkFOR0VfVEVBQ0hJTkdf",
            "UkVRVUVTVEgAEkgKE1JhbmdlX1RlYWNoaW5nX1Jlc3AYqwEgASgLMigudHV0",
            "b3JpYWwuSURfMTcxX1JBTkdFX1RFQUNISU5HX1JFU1BPTlNFSAASUgoWUmFu",
            "Z2VfVGVhY2hpbmdfQ21wX1JlcBisASABKAsyLy50dXRvcmlhbC5JRF8xNzJf",
            "UkFOR0VfVEVBQ0hJTkdfQ09NUExFVEVfUkVQT1JUSAASUwoXUmFuZ2VfVGVh",
            "Y2hpbmdfQ21wX1Jlc3AYSCABKAsyMC50dXRvcmlhbC5JRF83Ml9SQU5HRV9U",
            "RUFDSElOR19DT01QTEVURV9SRVNQT05TRUgAEkMKEUFkZHJlc3NfVGVhY2hf",
            "UmVwGK4BIAEoCzIlLnR1dG9yaWFsLklEXzE3NF9BRERSRVNTX1RFQUNIX1JF",
            "UE9SVEgAEkQKEkFkZHJlc3NfVGVhY2hfUmVzcBhKIAEoCzImLnR1dG9yaWFs",
            "LklEXzc0X0FERFJFU1NfVEVBQ0hfUkVTUE9OU0VIABI+Cg9BbGFybV9SZXNl",
            "dF9SZXEYWyABKAsyIy50dXRvcmlhbC5JRF85MV9BTEFSTV9SRVNFVF9SRVFV",
            "RVNUSAASQgoQQWxhcm1fUmVzZXRfUmVzcBi/ASABKAsyJS50dXRvcmlhbC5J",
            "RF8xOTFfQUxBUk1fUkVTRVRfUkVTUE9OU0VIABIzCglBbGFybV9SZXAYwgEg",
            "ASgLMh0udHV0b3JpYWwuSURfMTk0X0FMQVJNX1JFUE9SVEgAEjQKCkFsYXJt",
            "X1Jlc3AYXiABKAsyHi50dXRvcmlhbC5JRF85NF9BTEFSTV9SRVNQT05TRUgA",
            "QgUKA21zZypuChFDb21tYW5kQWN0aW9uVHlwZRIICgRNT1ZFEAASCAoETE9B",
            "RBABEgoKBlVOTE9BRBACEg4KCkxPQURVTkxPQUQQAxIICgRIT01FEAQSDAoI",
            "T1ZFUlJJREUQBRIRCg1NT1ZFVE9DSEFSR0VSEAoq9QEKCUV2ZW50VHlwZRIQ",
            "CgxMb2FkQXJyaXZhbHMQABIQCgxMb2FkQ29tcGxldGUQARISCg5VbmxvYWRB",
            "cnJpdmFscxACEhIKDlVubG9hZENvbXBsZXRlEAMSFQoRQWRyT3JNb3ZlQXJy",
            "aXZhbHMQBBILCgdBZHJQYXNzEAUSDgoKUmVzZXJ2ZVJlcRAHEgwKCEJsb2Nr",
            "UmVxEAgSDQoJVkhMb2FkaW5nEAsSDwoLVkhVbmxvYWRpbmcQDBILCgdCQ1JS",
            "ZWFkEA0SDQoJQ1NUUmVtb3ZlEA4SEAoMQmxvY2tSZWxlYXNlEBUSDAoIUElP",
            "RXJyb3IQWyqgAwoOQ29tcGxldGVTdGF0dXMSFwoTQ29tcGxldGVTdGF0dXNf",
            "TW92ZRAAEhcKE0NvbXBsZXRlU3RhdHVzX0xvYWQQARIZChVDb21wbGV0ZVN0",
            "YXR1c19VbmxvYWQQAhIdChlDb21wbGV0ZVN0YXR1c19Mb2FkdW5sb2FkEAMS",
            "IAocQ29tcGxldGVTdGF0dXNfTW92ZVRvQ2hhcmdlchAKEhkKFUNvbXBsZXRl",
            "U3RhdHVzX0NhbmNlbBAUEhgKFENvbXBsZXRlU3RhdHVzX0Fib3J0EBUSHwob",
            "Q29tcGxldGVTdGF0dXNfVmVoaWNsZUFib3J0EBYSHQoZQ29tcGxldGVTdGF0",
            "dXNfSURNaXNNYXRjaBAXEh8KG0NvbXBsZXRlU3RhdHVzX0lEUmVhZEZhaWxl",
            "ZBAYEiEKHUNvbXBsZXRlU3RhdHVzX0ludGVybG9ja0Vycm9yEEASIwofQ29t",
            "cGxldGVTdGF0dXNfTG9uZ1RpbWVJbmFjdGlvbhBiEiIKHkNvbXBsZXRlU3Rh",
            "dHVzX0ZvcmNlRmluaXNoQnlPcBBjKocBChBDYW5jZWxBY3Rpb25UeXBlEgwK",
            "CENNRF9Ob25lEAASDgoKQ01EX0NhbmNlbBAUEg0KCUNNRF9BYm9ydBAVEhoK",
            "FkNNRF9DYW5jZWxfSURfTWlzbWF0Y2gQFxIdChlDTURfQ2FuY2VsX0lEX1Jl",
            "YWRfRmFpbGVkEBgSCwoHQ01EX0VNUxBjKiUKClBhdXNlRXZlbnQSDAoIQ29u",
            "dGludWUQABIJCgVQYXVzZRABKo0BCglQYXVzZVR5cGUSEgoOUGF1c2VUeXBl",
            "X05vbmUQABIUChBQYXVzZVR5cGVfTm9ybWFsEAESEwoPUGF1c2VUeXBlX0Js",
            "b2NrEAISGAoUUGF1c2VUeXBlX0VhcnRoUXVha2UQBBIUChBQYXVzZVR5cGVf",
            "U2FmZXR5EAUSEQoNUGF1c2VUeXBlX0FsbBAJKiUKDVZoR3VpZGVTdGF0dXMS",
            "CgoGVW5sb2NrEAASCAoETG9jaxABKh8KCFBhc3NUeXBlEggKBFBhc3MQABIJ",
            "CgVCbG9jaxABKisKDVJlc2VydmVSZXN1bHQSCwoHU3VjY2VzcxAAEg0KCVVu",
            "c3VjY2VzcxABKkwKD0VfQXJlYVNlbnNvckRpchIWChJBcmVhU2Vuc29yRGly",
            "X05vbmUQABIMCghTdHJhaWdodBABEggKBExlZnQQAhIJCgVSaWdodBADKkQK",
            "DUNvdXBsZXJTdGF0dXMSGQoVQ291cGxlclN0YXR1c19EaXNhYmxlEAASGAoU",
            "Q291cGxlclN0YXR1c19FbmFibGUQASo7Cg9PcGVyYXRpbmdWSE1vZGUSEgoO",
            "T3BlcmF0aW5nX0F1dG8QABIUChBPcGVyYXRpbmdfTWFudWFsEAEqTgoNRHJp",
            "dmVEaXJjdGlvbhIRCg1Ecml2ZURpcl9Ob25lEAASFAoQRHJpdmVEaXJfRm9y",
            "d2FyZBABEhQKEERyaXZlRGlyX1JldmVyc2UQAipDCg1CQ1JSZWFkUmVzdWx0",
            "Eg4KCkJDUl9Ob3JtYWwQABIQCgxCQ1JfUmVhZEZhaWwQARIQCgxCQ1JfTWlz",
            "TWF0Y2gQAiqVAgoPUmVwbHlBY3Rpb25UeXBlEhwKGFJlcGx5QWN0aW9uVHlw",
            "ZV9Db250aW51ZRAAEhgKFFJlcGx5QWN0aW9uVHlwZV9XYWl0EAESGQoVUmVw",
            "bHlBY3Rpb25UeXBlX1JldHJ5EAISGgoWUmVwbHlBY3Rpb25UeXBlX0NhbmNl",
            "bBAUEhkKFVJlcGx5QWN0aW9uVHlwZV9BYm9ydBAVEiYKIlJlcGx5QWN0aW9u",
            "VHlwZV9DYW5jZWxfSURfTWlzbmF0Y2gQFxIpCiVSZXBseUFjdGlvblR5cGVf",
            "Q2FuY2VsX0lEX1JlYWRfRmFpbGVkEBgSJQohUmVwbHlBY3Rpb25UeXBlX0Nh",
            "bmNlbF9QSURfRmFpbGVkEBkqUAoLQUdWTG9jYXRpb24SFQoRQUdWTG9jYXRp",
            "b25fUmlnaHQQABIUChBBR1ZMb2NhdGlvbl9MZWZ0EAESFAoQQUdWTG9jYXRp",
            "b25fTm9uZRACKlgKDFZITW9kZVN0YXR1cxIICgROb25lEAASCgoGTWFudWFs",
            "EAMSDwoLQXV0b19SZW1vdGUQBBIOCgpBdXRvX0xvY2FsEAUSEQoNQXV0b19D",
            "aGFyZ2luZxAGKmAKDlZIQWN0aW9uU3RhdHVzEg0KCU5vQ29tbWFuZBAAEg4K",
            "CkNvbW1hbmRpbmcQARIMCghUZWFjaGluZxAFEhMKD0dyaXBwZXJUZWFjaGlu",
            "ZxAGEgwKCEN5Y2xlUnVuEAcqLAoNVmhQb3dlclN0YXR1cxINCglQb3dlcl9P",
            "ZmYQABIMCghQb3dlcl9PbhABKioKD1ZoTG9hZENTVFN0YXR1cxIMCghOb3RF",
            "eGlzdBAAEgkKBUV4aXN0EAEqOQoMVmhTdG9wU2luZ2xlEhQKEFZoU3RvcFNp",
            "bmdsZV9PZmYQABITCg9WaFN0b3BTaW5nbGVfT24QASpgCg5WaENoYXJnZVN0",
            "YXR1cxIVChFDaGFyZ2VTdGF0dXNfTm9uZRAAEhwKGENoYXJnZVN0YXR1c19I",
            "YW5kc2hha2luZxABEhkKFUNoYXJnZVN0YXR1c19DaGFyZ2luZxACKmMKDENv",
            "bW1hbmRTdGF0ZRIVChFDb21tYW5kU3RhdGVfTm9uZRAAEhwKGENvbW1hbmRT",
            "dGF0ZV9Mb2FkRW5yb3V0ZRABEh4KGkNvbW1hbmRTdGF0ZV9VbmxvYWRFbnJv",
            "dXRlEAIqPgoLU2hlbGZTdGF0dXMSFwoTU2hlbGZTdGF0dXNfRGlzYWJsZRAA",
            "EhYKElNoZWxmU3RhdHVzX0VuYWJsZRABKkUKEk9wZXJhdGluZ1Bvd2VyTW9k",
            "ZRIXChNPcGVyYXRpbmdfUG93ZXJfT2ZmEAASFgoST3BlcmF0aW5nX1Bvd2Vy",
            "X09uEAEqKQoLRXJyb3JTdGF0dXMSDQoJRXJyX1Jlc2V0EAASCwoHRXJyX1Nl",
            "dBABKi8KFUN1cnJlbnRNZXNzYWdlVmVyc2lvbhIKCgZ2MV8wXzAQABIKCgZ2",
            "MV8wXzIQAUKSAQoUY29tLmV4YW1wbGUudHV0b3JpYWxCEUFkZHJlc3NCb29r",
            "UHJvdG9zUAFaK2dpdGh1Yi5jb20vZ29sYW5nL3Byb3RvYnVmL3B0eXBlcy90",
            "aW1lc3RhbXD4AQGiAgNHUEKqAi5jb20ubWlybGUuYWthLnNjLlByb3RvY29s",
            "Rm9ybWF0LmFzZS5hZ3ZNZXNzYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CompleteStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseType), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhGuideStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PassType), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveResult), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.E_AreaSensorDir), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingVHMode), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.BCRReadResult), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReplyActionType), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AGVLocation), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingPowerMode), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ErrorStatus), typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CurrentMessageVersion), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.Timestamp), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo.Parser, new[]{ "AddressID", "CouplerStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_1_HOST_BASIC_INFO_VERSION_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_1_HOST_BASIC_INFO_VERSION_REP.Parser, new[]{ "DataDateTimeYear", "DataDateTimeMonth", "DataDateTimeDay", "DataDateTimeHour", "DataDateTimeMinute", "DataDateTimeSecond", "CurrentTimeYear", "CurrentTimeMonth", "CurrentTimeDay", "CurrentTimeHour", "CurrentTimeMinute", "CurrentTimeSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_102_BASIC_INFO_VERSION_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_102_BASIC_INFO_VERSION_REP.Parser, new[]{ "BasicInfoVersionYear", "BasicInfoVersionMonth", "BasicInfoVersionDay", "BasicInfoVersionHour", "BasicInfoVersionMinute", "BasicInfoVersionSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_2_BASIC_INFO_VERSION_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_2_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_11_COUPLER_INFO_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_11_COUPLER_INFO_REP.Parser, new[]{ "CouplerInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_111_COUPLER_INFO_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_111_COUPLER_INFO_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_13_TAVELLING_DATA_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_13_TAVELLING_DATA_REP.Parser, new[]{ "Resolution", "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "OriginDir", "OriginSpd", "BeaemSpd", "ManualHSpd", "ManualLSpd", "TeachingSpd", "RotateDir", "EncoderPole", "PositionCompensation", "KeepDistFar", "KeepDistNear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_113_TAVELLING_DATA_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_113_TAVELLING_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Parser, new[]{ "Sections" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section.Parser, new[]{ "DriveDir", "AeraSecsor", "GuideDir", "SectionID", "FromAddr", "ToAddr", "ControlTable", "Speed", "Distance", "ChangeAreaSensor1", "ChangeGuideDir1", "ChangeSegNum1", "ChangeAreaSensor2", "ChangeGuideDir2", "ChangeSegNum2", "AtSegment" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_115_SECTION_DATA_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_115_SECTION_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Parser, new[]{ "Addresss" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address.Parser, new[]{ "Addr", "Resolution", "Loaction", "BlockRelease", "HIDRelease" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_117_ADDRESS_DATA_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_117_ADDRESS_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_19_SCALE_DATA_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_19_SCALE_DATA_REP.Parser, new[]{ "Resolution", "InposArea", "InposStability", "ScalePulse", "ScaleOffset", "ScaleReset", "ReadDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_119_SCALE_DATA_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_119_SCALE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_21_CONTROL_DATA_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_21_CONTROL_DATA_REP.Parser, new[]{ "TimeoutT1", "TimeoutT2", "TimeoutT3", "TimeoutT4", "TimeoutT5", "TimeoutT6", "TimeoutT7", "TimeoutT8", "TimeoutBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_121_CONTROL_DATA_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_121_CONTROL_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_23_GUIDE_DATA_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_23_GUIDE_DATA_REP.Parser, new[]{ "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "NormalSpd", "ManualHSpd", "ManualLSpd", "LFLockPos", "LBLockPos", "RFLockPos", "RBLockPos", "ChangeStabilityTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_123_GUIDE_DATA_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_123_GUIDE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_61_INDIVIDUAL_UPLOAD_REQ), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_61_INDIVIDUAL_UPLOAD_REQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_162_INDIVIDUAL_DOWNLOAD_REQ), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_162_INDIVIDUAL_DOWNLOAD_REQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_63_INDIVIDUAL_CHANGE_REQ), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_63_INDIVIDUAL_CHANGE_REQ.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_31_TRANS_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_31_TRANS_REQUEST.Parser, new[]{ "CmdID", "CommandAction", "LoadAdr", "DestinationAdr", "CSTID", "LoadPortID", "UnloadPortID", "IsLoadPortHasGate", "IsUnloadPortHasGate", "LOTID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_131_TRANS_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_131_TRANS_RESPONSE.Parser, new[]{ "CmdID", "CommandAction", "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_132_TRANS_COMPLETE_REPORT), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_132_TRANS_COMPLETE_REPORT.Parser, new[]{ "CmdID", "CSTID", "CmpStatus", "CurrentAdrID", "CurrentSecID", "SecDistance", "CmdPowerConsume", "CmdDistance", "XAxis", "YAxis", "DirectionAngle", "VehicleAngle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_32_TRANS_COMPLETE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_32_TRANS_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode", "WaitTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_134_TRANS_EVENT_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_134_TRANS_EVENT_REP.Parser, new[]{ "EventType", "CurrentAdrID", "CurrentSecID", "SecDistance", "DrivingDirection", "XAxis", "YAxis", "DirectionAngle", "VehicleAngle", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_35_CST_ID_RENAME_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_35_CST_ID_RENAME_REQUEST.Parser, new[]{ "OLDCSTID", "NEWCSTID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_135_CST_ID_RENAME_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_135_CST_ID_RENAME_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo.Parser, new[]{ "ReserveSectionID", "DriveDirction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo.Parser, new[]{ "ID", "IsInputMode", "IsOutputMode", "IsAGVPortReady" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_136_TRANS_EVENT_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_136_TRANS_EVENT_REP.Parser, new[]{ "EventType", "ReserveInfos", "RequestBlockID", "CSTID", "ReleaseBlockAdrID", "CurrentAdrID", "CurrentSecID", "SecDistance", "BCRReadResult", "CmdID", "Location", "CurrentPortID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_36_TRANS_EVENT_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_36_TRANS_EVENT_RESPONSE.Parser, new[]{ "EventType", "IsReserveSuccess", "IsBlockPass", "RenameCarrierID", "ReplyAction", "ReplyCode", "ReserveInfos", "CmdID", "PortInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_37_TRANS_CANCEL_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_37_TRANS_CANCEL_REQUEST.Parser, new[]{ "CmdID", "CancelAction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_137_TRANS_CANCEL_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_137_TRANS_CANCEL_RESPONSE.Parser, new[]{ "CmdID", "CancelAction", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr.Parser, new[]{ "From", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo.Parser, new[]{ "FromTo", "GuideSections", "GuideAddresses", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_138_GUIDE_INFO_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_138_GUIDE_INFO_REQUEST.Parser, new[]{ "FromToAdrList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_38_GUIDE_INFO_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_38_GUIDE_INFO_RESPONSE.Parser, new[]{ "GuideInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_39_PAUSE_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_39_PAUSE_REQUEST.Parser, new[]{ "EventType", "PauseType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_139_PAUSE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_139_PAUSE_RESPONSE.Parser, new[]{ "EventType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_41_MODE_CHANGE_REQ), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_41_MODE_CHANGE_REQ.Parser, new[]{ "OperatingVHMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_141_MODE_CHANGE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_141_MODE_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_43_STATUS_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_43_STATUS_REQUEST.Parser, new[]{ "SystemTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_143_STATUS_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_143_STATUS_RESPONSE.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "ReserveStatus", "BlockingStatus", "PauseStatus", "ErrorStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "ReserveInfos", "StoppedBlockID", "EarthquakePauseTatus", "SafetyPauseStatus", "CmdId1", "CmsState1", "CmdId2", "CmsState2", "HasCstL", "CstIdL", "HasCstR", "CstIdR", "DrivingDirection", "SteeringWheel", "BatteryCapacity", "ChargeStatus", "BatteryTemperature", "XAxis", "YAxis", "DirectionAngle", "VehicleAngle", "Speed", "WillPassGuideSection", "SystemTime", "ShelfStatusL", "ShelfStatusR", "CurrentExcuteCmdId", "OpPauseStatus", "CmdId3", "CmsState3", "CmdId4", "CmsState4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_144_STATUS_CHANGE_REP), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_144_STATUS_CHANGE_REP.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "ReserveStatus", "BlockingStatus", "PauseStatus", "ErrorStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "ReserveInfos", "StoppedBlockID", "EarthquakePauseTatus", "SafetyPauseStatus", "CmdId1", "CmsState1", "CmdId2", "CmsState2", "HasCstL", "CstIdL", "HasCstR", "CstIdR", "DrivingDirection", "SteeringWheel", "BatteryCapacity", "ChargeStatus", "BatteryTemperature", "XAxis", "YAxis", "DirectionAngle", "VehicleAngle", "Speed", "WillPassGuideSection", "SystemTime", "ShelfStatusL", "ShelfStatusR", "CurrentExcuteCmdId", "OpPauseStatus", "CmdId3", "CmsState3", "CmdId4", "CmsState4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_44_STATUS_CHANGE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_44_STATUS_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_45_POWER_OPE_REQ), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_45_POWER_OPE_REQ.Parser, new[]{ "OperatingPowerMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_145_POWER_OPE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_145_POWER_OPE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_51_AVOID_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_51_AVOID_REQUEST.Parser, new[]{ "DestinationAdr", "GuideSections", "GuideAddresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_151_AVOID_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_151_AVOID_RESPONSE.Parser, new[]{ "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_152_AVOID_COMPLETE_REPORT), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_152_AVOID_COMPLETE_REPORT.Parser, new[]{ "CmpStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_52_AVOID_COMPLETE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_52_AVOID_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_71_RANGE_TEACHING_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_71_RANGE_TEACHING_REQUEST.Parser, new[]{ "FromAdr", "ToAdr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_171_RANGE_TEACHING_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_171_RANGE_TEACHING_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT.Parser, new[]{ "FromAdr", "ToAdr", "SecDistance", "CompleteCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_174_ADDRESS_TEACH_REPORT), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_174_ADDRESS_TEACH_REPORT.Parser, new[]{ "Addr", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_74_ADDRESS_TEACH_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_74_ADDRESS_TEACH_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_91_ALARM_RESET_REQUEST), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_91_ALARM_RESET_REQUEST.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_191_ALARM_RESET_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_191_ALARM_RESET_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_194_ALARM_REPORT), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_194_ALARM_REPORT.Parser, new[]{ "ErrCode", "ErrStatus", "ErrDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_94_ALARM_RESPONSE), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_94_ALARM_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.WrapperMessage), global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.WrapperMessage.Parser, new[]{ "ID", "SeqNum", "LocalSystemTime", "HostBasicInfoRep", "HostBasicInfoResp", "BasicInfoVersionRep", "BasicInfoVersionResp", "CouplerInfoRep", "CouplerInfoResp", "TavellingDataRep", "TavellingDataResp", "SectionDataRep", "SectionDataResp", "AddressDataRep", "AddressDataResp", "ScaleDataRep", "ScaleDataResp", "ControlDataRep", "ControlDataResp", "GuideDataRep", "GuideDataResp", "IndividualUploadReq", "IndividualUploadResp", "IndividualDownloadReq", "IndividualDownloadResp", "IndividualChangeReq", "IndividualChangeResp", "ModeChangeReq", "ModeChangeResp", "TransReq", "TransResp", "TranCmpRep", "TranCmpResp", "CSTIDRenameReq", "CSTIDRenameResp", "TransCancelReq", "TransCancelResp", "GuideInfoReq", "GuideInfoResp", "PauseReq", "PauseResp", "TransEventRep", "ImpTransEventRep", "ImpTransEventResp", "StatusReq", "StatusReqResp", "StatueChangeRep", "StatusChangeResp", "PowerOpeReq", "PowerOpeResp", "AvoidReq", "AvoidResp", "AvoidCompleteRep", "AvoidCompleteResp", "RangeTeachingReq", "RangeTeachingResp", "RangeTeachingCmpRep", "RangeTeachingCmpResp", "AddressTeachRep", "AddressTeachResp", "AlarmResetReq", "AlarmResetResp", "AlarmRep", "AlarmResp" }, new[]{ "Msg" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CommandActionType {
    [pbr::OriginalName("MOVE")] Move = 0,
    [pbr::OriginalName("LOAD")] Load = 1,
    [pbr::OriginalName("UNLOAD")] Unload = 2,
    [pbr::OriginalName("LOADUNLOAD")] Loadunload = 3,
    [pbr::OriginalName("HOME")] Home = 4,
    [pbr::OriginalName("OVERRIDE")] Override = 5,
    [pbr::OriginalName("MOVETOCHARGER")] Movetocharger = 10,
  }

  public enum EventType {
    [pbr::OriginalName("LoadArrivals")] LoadArrivals = 0,
    [pbr::OriginalName("LoadComplete")] LoadComplete = 1,
    [pbr::OriginalName("UnloadArrivals")] UnloadArrivals = 2,
    [pbr::OriginalName("UnloadComplete")] UnloadComplete = 3,
    [pbr::OriginalName("AdrOrMoveArrivals")] AdrOrMoveArrivals = 4,
    [pbr::OriginalName("AdrPass")] AdrPass = 5,
    [pbr::OriginalName("ReserveReq")] ReserveReq = 7,
    [pbr::OriginalName("BlockReq")] BlockReq = 8,
    [pbr::OriginalName("VHLoading")] Vhloading = 11,
    [pbr::OriginalName("VHUnloading")] Vhunloading = 12,
    [pbr::OriginalName("BCRRead")] Bcrread = 13,
    [pbr::OriginalName("CSTRemove")] Cstremove = 14,
    [pbr::OriginalName("BlockRelease")] BlockRelease = 21,
    [pbr::OriginalName("PIOError")] Pioerror = 91,
  }

  public enum CompleteStatus {
    [pbr::OriginalName("CompleteStatus_Move")] Move = 0,
    [pbr::OriginalName("CompleteStatus_Load")] Load = 1,
    [pbr::OriginalName("CompleteStatus_Unload")] Unload = 2,
    [pbr::OriginalName("CompleteStatus_Loadunload")] Loadunload = 3,
    [pbr::OriginalName("CompleteStatus_MoveToCharger")] MoveToCharger = 10,
    [pbr::OriginalName("CompleteStatus_Cancel")] Cancel = 20,
    [pbr::OriginalName("CompleteStatus_Abort")] Abort = 21,
    [pbr::OriginalName("CompleteStatus_VehicleAbort")] VehicleAbort = 22,
    [pbr::OriginalName("CompleteStatus_IDMisMatch")] IdmisMatch = 23,
    [pbr::OriginalName("CompleteStatus_IDReadFailed")] IdreadFailed = 24,
    [pbr::OriginalName("CompleteStatus_InterlockError")] InterlockError = 64,
    [pbr::OriginalName("CompleteStatus_LongTimeInaction")] LongTimeInaction = 98,
    [pbr::OriginalName("CompleteStatus_ForceFinishByOp")] ForceFinishByOp = 99,
  }

  public enum CancelActionType {
    [pbr::OriginalName("CMD_None")] CmdNone = 0,
    [pbr::OriginalName("CMD_Cancel")] CmdCancel = 20,
    [pbr::OriginalName("CMD_Abort")] CmdAbort = 21,
    [pbr::OriginalName("CMD_Cancel_ID_Mismatch")] CmdCancelIdMismatch = 23,
    [pbr::OriginalName("CMD_Cancel_ID_Read_Failed")] CmdCancelIdReadFailed = 24,
    [pbr::OriginalName("CMD_EMS")] CmdEms = 99,
  }

  public enum PauseEvent {
    [pbr::OriginalName("Continue")] Continue = 0,
    [pbr::OriginalName("Pause")] Pause = 1,
  }

  public enum PauseType {
    [pbr::OriginalName("PauseType_None")] None = 0,
    [pbr::OriginalName("PauseType_Normal")] Normal = 1,
    [pbr::OriginalName("PauseType_Block")] Block = 2,
    [pbr::OriginalName("PauseType_EarthQuake")] EarthQuake = 4,
    [pbr::OriginalName("PauseType_Safety")] Safety = 5,
    [pbr::OriginalName("PauseType_All")] All = 9,
  }

  public enum VhGuideStatus {
    [pbr::OriginalName("Unlock")] Unlock = 0,
    [pbr::OriginalName("Lock")] Lock = 1,
  }

  public enum PassType {
    [pbr::OriginalName("Pass")] Pass = 0,
    [pbr::OriginalName("Block")] Block = 1,
  }

  public enum ReserveResult {
    [pbr::OriginalName("Success")] Success = 0,
    [pbr::OriginalName("Unsuccess")] Unsuccess = 1,
  }

  public enum E_AreaSensorDir {
    [pbr::OriginalName("AreaSensorDir_None")] AreaSensorDirNone = 0,
    [pbr::OriginalName("Straight")] Straight = 1,
    [pbr::OriginalName("Left")] Left = 2,
    [pbr::OriginalName("Right")] Right = 3,
  }

  public enum CouplerStatus {
    [pbr::OriginalName("CouplerStatus_Disable")] Disable = 0,
    [pbr::OriginalName("CouplerStatus_Enable")] Enable = 1,
  }

  public enum OperatingVHMode {
    [pbr::OriginalName("Operating_Auto")] OperatingAuto = 0,
    [pbr::OriginalName("Operating_Manual")] OperatingManual = 1,
  }

  public enum DriveDirction {
    [pbr::OriginalName("DriveDir_None")] DriveDirNone = 0,
    [pbr::OriginalName("DriveDir_Forward")] DriveDirForward = 1,
    [pbr::OriginalName("DriveDir_Reverse")] DriveDirReverse = 2,
  }

  public enum BCRReadResult {
    [pbr::OriginalName("BCR_Normal")] BcrNormal = 0,
    [pbr::OriginalName("BCR_ReadFail")] BcrReadFail = 1,
    [pbr::OriginalName("BCR_MisMatch")] BcrMisMatch = 2,
  }

  public enum ReplyActionType {
    [pbr::OriginalName("ReplyActionType_Continue")] Continue = 0,
    [pbr::OriginalName("ReplyActionType_Wait")] Wait = 1,
    [pbr::OriginalName("ReplyActionType_Retry")] Retry = 2,
    [pbr::OriginalName("ReplyActionType_Cancel")] Cancel = 20,
    [pbr::OriginalName("ReplyActionType_Abort")] Abort = 21,
    [pbr::OriginalName("ReplyActionType_Cancel_ID_Misnatch")] CancelIdMisnatch = 23,
    [pbr::OriginalName("ReplyActionType_Cancel_ID_Read_Failed")] CancelIdReadFailed = 24,
    [pbr::OriginalName("ReplyActionType_Cancel_PID_Failed")] CancelPidFailed = 25,
  }

  public enum AGVLocation {
    [pbr::OriginalName("AGVLocation_Right")] Right = 0,
    [pbr::OriginalName("AGVLocation_Left")] Left = 1,
    [pbr::OriginalName("AGVLocation_None")] None = 2,
  }

  public enum VHModeStatus {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Manual")] Manual = 3,
    [pbr::OriginalName("Auto_Remote")] AutoRemote = 4,
    [pbr::OriginalName("Auto_Local")] AutoLocal = 5,
    [pbr::OriginalName("Auto_Charging")] AutoCharging = 6,
  }

  public enum VHActionStatus {
    [pbr::OriginalName("NoCommand")] NoCommand = 0,
    [pbr::OriginalName("Commanding")] Commanding = 1,
    [pbr::OriginalName("Teaching")] Teaching = 5,
    [pbr::OriginalName("GripperTeaching")] GripperTeaching = 6,
    [pbr::OriginalName("CycleRun")] CycleRun = 7,
  }

  public enum VhPowerStatus {
    [pbr::OriginalName("Power_Off")] PowerOff = 0,
    [pbr::OriginalName("Power_On")] PowerOn = 1,
  }

  public enum VhLoadCSTStatus {
    [pbr::OriginalName("NotExist")] NotExist = 0,
    [pbr::OriginalName("Exist")] Exist = 1,
  }

  public enum VhStopSingle {
    [pbr::OriginalName("VhStopSingle_Off")] Off = 0,
    [pbr::OriginalName("VhStopSingle_On")] On = 1,
  }

  public enum VhChargeStatus {
    [pbr::OriginalName("ChargeStatus_None")] ChargeStatusNone = 0,
    [pbr::OriginalName("ChargeStatus_Handshaking")] ChargeStatusHandshaking = 1,
    [pbr::OriginalName("ChargeStatus_Charging")] ChargeStatusCharging = 2,
  }

  public enum CommandState {
    [pbr::OriginalName("CommandState_None")] None = 0,
    [pbr::OriginalName("CommandState_LoadEnroute")] LoadEnroute = 1,
    [pbr::OriginalName("CommandState_UnloadEnroute")] UnloadEnroute = 2,
  }

  public enum ShelfStatus {
    [pbr::OriginalName("ShelfStatus_Disable")] Disable = 0,
    [pbr::OriginalName("ShelfStatus_Enable")] Enable = 1,
  }

  public enum OperatingPowerMode {
    [pbr::OriginalName("Operating_Power_Off")] OperatingPowerOff = 0,
    [pbr::OriginalName("Operating_Power_On")] OperatingPowerOn = 1,
  }

  public enum ErrorStatus {
    [pbr::OriginalName("Err_Reset")] ErrReset = 0,
    [pbr::OriginalName("Err_Set")] ErrSet = 1,
  }

  public enum CurrentMessageVersion {
    [pbr::OriginalName("v1_0_0")] V100 = 0,
    [pbr::OriginalName("v1_0_2")] V102 = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    ///  Represents seconds of UTC time since Unix epoch
    ///  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    ///  9999-12-31T23:59:59Z inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    ///  Non-negative fractions of a second at nanosecond resolution. Negative
    ///  second values with fractions must still have non-negative nanos values
    ///  that count forward in time. Must be from 0 to 999,999,999
    ///  inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CouplerInfo : pb::IMessage<CouplerInfo> {
    private static readonly pb::MessageParser<CouplerInfo> _parser = new pb::MessageParser<CouplerInfo>(() => new CouplerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CouplerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CouplerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CouplerInfo(CouplerInfo other) : this() {
      addressID_ = other.addressID_;
      couplerStatus_ = other.couplerStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CouplerInfo Clone() {
      return new CouplerInfo(this);
    }

    /// <summary>Field number for the "AddressID" field.</summary>
    public const int AddressIDFieldNumber = 1;
    private string addressID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressID {
      get { return addressID_; }
      set {
        addressID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CouplerStatus" field.</summary>
    public const int CouplerStatusFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerStatus couplerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerStatus CouplerStatus {
      get { return couplerStatus_; }
      set {
        couplerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CouplerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CouplerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddressID != other.AddressID) return false;
      if (CouplerStatus != other.CouplerStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddressID.Length != 0) hash ^= AddressID.GetHashCode();
      if (CouplerStatus != 0) hash ^= CouplerStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddressID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AddressID);
      }
      if (CouplerStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CouplerStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddressID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressID);
      }
      if (CouplerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CouplerStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CouplerInfo other) {
      if (other == null) {
        return;
      }
      if (other.AddressID.Length != 0) {
        AddressID = other.AddressID;
      }
      if (other.CouplerStatus != 0) {
        CouplerStatus = other.CouplerStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AddressID = input.ReadString();
            break;
          }
          case 16: {
            couplerStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_1_HOST_BASIC_INFO_VERSION_REP : pb::IMessage<ID_1_HOST_BASIC_INFO_VERSION_REP> {
    private static readonly pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP>(() => new ID_1_HOST_BASIC_INFO_VERSION_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP(ID_1_HOST_BASIC_INFO_VERSION_REP other) : this() {
      dataDateTimeYear_ = other.dataDateTimeYear_;
      dataDateTimeMonth_ = other.dataDateTimeMonth_;
      dataDateTimeDay_ = other.dataDateTimeDay_;
      dataDateTimeHour_ = other.dataDateTimeHour_;
      dataDateTimeMinute_ = other.dataDateTimeMinute_;
      dataDateTimeSecond_ = other.dataDateTimeSecond_;
      currentTimeYear_ = other.currentTimeYear_;
      currentTimeMonth_ = other.currentTimeMonth_;
      currentTimeDay_ = other.currentTimeDay_;
      currentTimeHour_ = other.currentTimeHour_;
      currentTimeMinute_ = other.currentTimeMinute_;
      currentTimeSecond_ = other.currentTimeSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_1_HOST_BASIC_INFO_VERSION_REP Clone() {
      return new ID_1_HOST_BASIC_INFO_VERSION_REP(this);
    }

    /// <summary>Field number for the "DataDateTime_Year" field.</summary>
    public const int DataDateTimeYearFieldNumber = 1;
    private string dataDateTimeYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeYear {
      get { return dataDateTimeYear_; }
      set {
        dataDateTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Month" field.</summary>
    public const int DataDateTimeMonthFieldNumber = 2;
    private string dataDateTimeMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeMonth {
      get { return dataDateTimeMonth_; }
      set {
        dataDateTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Day" field.</summary>
    public const int DataDateTimeDayFieldNumber = 3;
    private string dataDateTimeDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeDay {
      get { return dataDateTimeDay_; }
      set {
        dataDateTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Hour" field.</summary>
    public const int DataDateTimeHourFieldNumber = 4;
    private string dataDateTimeHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeHour {
      get { return dataDateTimeHour_; }
      set {
        dataDateTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Minute" field.</summary>
    public const int DataDateTimeMinuteFieldNumber = 5;
    private string dataDateTimeMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeMinute {
      get { return dataDateTimeMinute_; }
      set {
        dataDateTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DataDateTime_Second" field.</summary>
    public const int DataDateTimeSecondFieldNumber = 6;
    private string dataDateTimeSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDateTimeSecond {
      get { return dataDateTimeSecond_; }
      set {
        dataDateTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Year" field.</summary>
    public const int CurrentTimeYearFieldNumber = 7;
    private string currentTimeYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeYear {
      get { return currentTimeYear_; }
      set {
        currentTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Month" field.</summary>
    public const int CurrentTimeMonthFieldNumber = 8;
    private string currentTimeMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeMonth {
      get { return currentTimeMonth_; }
      set {
        currentTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Day" field.</summary>
    public const int CurrentTimeDayFieldNumber = 9;
    private string currentTimeDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeDay {
      get { return currentTimeDay_; }
      set {
        currentTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Hour" field.</summary>
    public const int CurrentTimeHourFieldNumber = 10;
    private string currentTimeHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeHour {
      get { return currentTimeHour_; }
      set {
        currentTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Minute" field.</summary>
    public const int CurrentTimeMinuteFieldNumber = 11;
    private string currentTimeMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeMinute {
      get { return currentTimeMinute_; }
      set {
        currentTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentTime_Second" field.</summary>
    public const int CurrentTimeSecondFieldNumber = 12;
    private string currentTimeSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentTimeSecond {
      get { return currentTimeSecond_; }
      set {
        currentTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_1_HOST_BASIC_INFO_VERSION_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_1_HOST_BASIC_INFO_VERSION_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataDateTimeYear != other.DataDateTimeYear) return false;
      if (DataDateTimeMonth != other.DataDateTimeMonth) return false;
      if (DataDateTimeDay != other.DataDateTimeDay) return false;
      if (DataDateTimeHour != other.DataDateTimeHour) return false;
      if (DataDateTimeMinute != other.DataDateTimeMinute) return false;
      if (DataDateTimeSecond != other.DataDateTimeSecond) return false;
      if (CurrentTimeYear != other.CurrentTimeYear) return false;
      if (CurrentTimeMonth != other.CurrentTimeMonth) return false;
      if (CurrentTimeDay != other.CurrentTimeDay) return false;
      if (CurrentTimeHour != other.CurrentTimeHour) return false;
      if (CurrentTimeMinute != other.CurrentTimeMinute) return false;
      if (CurrentTimeSecond != other.CurrentTimeSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataDateTimeYear.Length != 0) hash ^= DataDateTimeYear.GetHashCode();
      if (DataDateTimeMonth.Length != 0) hash ^= DataDateTimeMonth.GetHashCode();
      if (DataDateTimeDay.Length != 0) hash ^= DataDateTimeDay.GetHashCode();
      if (DataDateTimeHour.Length != 0) hash ^= DataDateTimeHour.GetHashCode();
      if (DataDateTimeMinute.Length != 0) hash ^= DataDateTimeMinute.GetHashCode();
      if (DataDateTimeSecond.Length != 0) hash ^= DataDateTimeSecond.GetHashCode();
      if (CurrentTimeYear.Length != 0) hash ^= CurrentTimeYear.GetHashCode();
      if (CurrentTimeMonth.Length != 0) hash ^= CurrentTimeMonth.GetHashCode();
      if (CurrentTimeDay.Length != 0) hash ^= CurrentTimeDay.GetHashCode();
      if (CurrentTimeHour.Length != 0) hash ^= CurrentTimeHour.GetHashCode();
      if (CurrentTimeMinute.Length != 0) hash ^= CurrentTimeMinute.GetHashCode();
      if (CurrentTimeSecond.Length != 0) hash ^= CurrentTimeSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataDateTimeYear.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataDateTimeYear);
      }
      if (DataDateTimeMonth.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataDateTimeMonth);
      }
      if (DataDateTimeDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataDateTimeDay);
      }
      if (DataDateTimeHour.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DataDateTimeHour);
      }
      if (DataDateTimeMinute.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DataDateTimeMinute);
      }
      if (DataDateTimeSecond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DataDateTimeSecond);
      }
      if (CurrentTimeYear.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentTimeYear);
      }
      if (CurrentTimeMonth.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrentTimeMonth);
      }
      if (CurrentTimeDay.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CurrentTimeDay);
      }
      if (CurrentTimeHour.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CurrentTimeHour);
      }
      if (CurrentTimeMinute.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CurrentTimeMinute);
      }
      if (CurrentTimeSecond.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentTimeSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataDateTimeYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeYear);
      }
      if (DataDateTimeMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMonth);
      }
      if (DataDateTimeDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeDay);
      }
      if (DataDateTimeHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeHour);
      }
      if (DataDateTimeMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMinute);
      }
      if (DataDateTimeSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeSecond);
      }
      if (CurrentTimeYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeYear);
      }
      if (CurrentTimeMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMonth);
      }
      if (CurrentTimeDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeDay);
      }
      if (CurrentTimeHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeHour);
      }
      if (CurrentTimeMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMinute);
      }
      if (CurrentTimeSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_1_HOST_BASIC_INFO_VERSION_REP other) {
      if (other == null) {
        return;
      }
      if (other.DataDateTimeYear.Length != 0) {
        DataDateTimeYear = other.DataDateTimeYear;
      }
      if (other.DataDateTimeMonth.Length != 0) {
        DataDateTimeMonth = other.DataDateTimeMonth;
      }
      if (other.DataDateTimeDay.Length != 0) {
        DataDateTimeDay = other.DataDateTimeDay;
      }
      if (other.DataDateTimeHour.Length != 0) {
        DataDateTimeHour = other.DataDateTimeHour;
      }
      if (other.DataDateTimeMinute.Length != 0) {
        DataDateTimeMinute = other.DataDateTimeMinute;
      }
      if (other.DataDateTimeSecond.Length != 0) {
        DataDateTimeSecond = other.DataDateTimeSecond;
      }
      if (other.CurrentTimeYear.Length != 0) {
        CurrentTimeYear = other.CurrentTimeYear;
      }
      if (other.CurrentTimeMonth.Length != 0) {
        CurrentTimeMonth = other.CurrentTimeMonth;
      }
      if (other.CurrentTimeDay.Length != 0) {
        CurrentTimeDay = other.CurrentTimeDay;
      }
      if (other.CurrentTimeHour.Length != 0) {
        CurrentTimeHour = other.CurrentTimeHour;
      }
      if (other.CurrentTimeMinute.Length != 0) {
        CurrentTimeMinute = other.CurrentTimeMinute;
      }
      if (other.CurrentTimeSecond.Length != 0) {
        CurrentTimeSecond = other.CurrentTimeSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DataDateTimeYear = input.ReadString();
            break;
          }
          case 18: {
            DataDateTimeMonth = input.ReadString();
            break;
          }
          case 26: {
            DataDateTimeDay = input.ReadString();
            break;
          }
          case 34: {
            DataDateTimeHour = input.ReadString();
            break;
          }
          case 42: {
            DataDateTimeMinute = input.ReadString();
            break;
          }
          case 50: {
            DataDateTimeSecond = input.ReadString();
            break;
          }
          case 58: {
            CurrentTimeYear = input.ReadString();
            break;
          }
          case 66: {
            CurrentTimeMonth = input.ReadString();
            break;
          }
          case 74: {
            CurrentTimeDay = input.ReadString();
            break;
          }
          case 82: {
            CurrentTimeHour = input.ReadString();
            break;
          }
          case 90: {
            CurrentTimeMinute = input.ReadString();
            break;
          }
          case 98: {
            CurrentTimeSecond = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_101_HOST_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> {
    private static readonly pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE>(() => new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE Clone() {
      return new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_101_HOST_BASIC_INFO_VERSION_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_102_BASIC_INFO_VERSION_REP : pb::IMessage<ID_102_BASIC_INFO_VERSION_REP> {
    private static readonly pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP>(() => new ID_102_BASIC_INFO_VERSION_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP(ID_102_BASIC_INFO_VERSION_REP other) : this() {
      basicInfoVersionYear_ = other.basicInfoVersionYear_;
      basicInfoVersionMonth_ = other.basicInfoVersionMonth_;
      basicInfoVersionDay_ = other.basicInfoVersionDay_;
      basicInfoVersionHour_ = other.basicInfoVersionHour_;
      basicInfoVersionMinute_ = other.basicInfoVersionMinute_;
      basicInfoVersionSecond_ = other.basicInfoVersionSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_102_BASIC_INFO_VERSION_REP Clone() {
      return new ID_102_BASIC_INFO_VERSION_REP(this);
    }

    /// <summary>Field number for the "BasicInfoVersion_Year" field.</summary>
    public const int BasicInfoVersionYearFieldNumber = 1;
    private string basicInfoVersionYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionYear {
      get { return basicInfoVersionYear_; }
      set {
        basicInfoVersionYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Month" field.</summary>
    public const int BasicInfoVersionMonthFieldNumber = 2;
    private string basicInfoVersionMonth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionMonth {
      get { return basicInfoVersionMonth_; }
      set {
        basicInfoVersionMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Day" field.</summary>
    public const int BasicInfoVersionDayFieldNumber = 3;
    private string basicInfoVersionDay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionDay {
      get { return basicInfoVersionDay_; }
      set {
        basicInfoVersionDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Hour" field.</summary>
    public const int BasicInfoVersionHourFieldNumber = 4;
    private string basicInfoVersionHour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionHour {
      get { return basicInfoVersionHour_; }
      set {
        basicInfoVersionHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Minute" field.</summary>
    public const int BasicInfoVersionMinuteFieldNumber = 5;
    private string basicInfoVersionMinute_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionMinute {
      get { return basicInfoVersionMinute_; }
      set {
        basicInfoVersionMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasicInfoVersion_Second" field.</summary>
    public const int BasicInfoVersionSecondFieldNumber = 6;
    private string basicInfoVersionSecond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasicInfoVersionSecond {
      get { return basicInfoVersionSecond_; }
      set {
        basicInfoVersionSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_102_BASIC_INFO_VERSION_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_102_BASIC_INFO_VERSION_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BasicInfoVersionYear != other.BasicInfoVersionYear) return false;
      if (BasicInfoVersionMonth != other.BasicInfoVersionMonth) return false;
      if (BasicInfoVersionDay != other.BasicInfoVersionDay) return false;
      if (BasicInfoVersionHour != other.BasicInfoVersionHour) return false;
      if (BasicInfoVersionMinute != other.BasicInfoVersionMinute) return false;
      if (BasicInfoVersionSecond != other.BasicInfoVersionSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BasicInfoVersionYear.Length != 0) hash ^= BasicInfoVersionYear.GetHashCode();
      if (BasicInfoVersionMonth.Length != 0) hash ^= BasicInfoVersionMonth.GetHashCode();
      if (BasicInfoVersionDay.Length != 0) hash ^= BasicInfoVersionDay.GetHashCode();
      if (BasicInfoVersionHour.Length != 0) hash ^= BasicInfoVersionHour.GetHashCode();
      if (BasicInfoVersionMinute.Length != 0) hash ^= BasicInfoVersionMinute.GetHashCode();
      if (BasicInfoVersionSecond.Length != 0) hash ^= BasicInfoVersionSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BasicInfoVersionYear.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BasicInfoVersionYear);
      }
      if (BasicInfoVersionMonth.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BasicInfoVersionMonth);
      }
      if (BasicInfoVersionDay.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BasicInfoVersionDay);
      }
      if (BasicInfoVersionHour.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BasicInfoVersionHour);
      }
      if (BasicInfoVersionMinute.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicInfoVersionMinute);
      }
      if (BasicInfoVersionSecond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BasicInfoVersionSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BasicInfoVersionYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionYear);
      }
      if (BasicInfoVersionMonth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMonth);
      }
      if (BasicInfoVersionDay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionDay);
      }
      if (BasicInfoVersionHour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionHour);
      }
      if (BasicInfoVersionMinute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMinute);
      }
      if (BasicInfoVersionSecond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_102_BASIC_INFO_VERSION_REP other) {
      if (other == null) {
        return;
      }
      if (other.BasicInfoVersionYear.Length != 0) {
        BasicInfoVersionYear = other.BasicInfoVersionYear;
      }
      if (other.BasicInfoVersionMonth.Length != 0) {
        BasicInfoVersionMonth = other.BasicInfoVersionMonth;
      }
      if (other.BasicInfoVersionDay.Length != 0) {
        BasicInfoVersionDay = other.BasicInfoVersionDay;
      }
      if (other.BasicInfoVersionHour.Length != 0) {
        BasicInfoVersionHour = other.BasicInfoVersionHour;
      }
      if (other.BasicInfoVersionMinute.Length != 0) {
        BasicInfoVersionMinute = other.BasicInfoVersionMinute;
      }
      if (other.BasicInfoVersionSecond.Length != 0) {
        BasicInfoVersionSecond = other.BasicInfoVersionSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BasicInfoVersionYear = input.ReadString();
            break;
          }
          case 18: {
            BasicInfoVersionMonth = input.ReadString();
            break;
          }
          case 26: {
            BasicInfoVersionDay = input.ReadString();
            break;
          }
          case 34: {
            BasicInfoVersionHour = input.ReadString();
            break;
          }
          case 42: {
            BasicInfoVersionMinute = input.ReadString();
            break;
          }
          case 50: {
            BasicInfoVersionSecond = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_2_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_2_BASIC_INFO_VERSION_RESPONSE> {
    private static readonly pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE>(() => new ID_2_BASIC_INFO_VERSION_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE(ID_2_BASIC_INFO_VERSION_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_2_BASIC_INFO_VERSION_RESPONSE Clone() {
      return new ID_2_BASIC_INFO_VERSION_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_2_BASIC_INFO_VERSION_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_2_BASIC_INFO_VERSION_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_2_BASIC_INFO_VERSION_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_11_COUPLER_INFO_REP : pb::IMessage<ID_11_COUPLER_INFO_REP> {
    private static readonly pb::MessageParser<ID_11_COUPLER_INFO_REP> _parser = new pb::MessageParser<ID_11_COUPLER_INFO_REP>(() => new ID_11_COUPLER_INFO_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_11_COUPLER_INFO_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_COUPLER_INFO_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_COUPLER_INFO_REP(ID_11_COUPLER_INFO_REP other) : this() {
      couplerInfos_ = other.couplerInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_11_COUPLER_INFO_REP Clone() {
      return new ID_11_COUPLER_INFO_REP(this);
    }

    /// <summary>Field number for the "CouplerInfos" field.</summary>
    public const int CouplerInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo> _repeated_couplerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo> couplerInfos_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CouplerInfo> CouplerInfos {
      get { return couplerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_11_COUPLER_INFO_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_11_COUPLER_INFO_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!couplerInfos_.Equals(other.couplerInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= couplerInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      couplerInfos_.WriteTo(output, _repeated_couplerInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += couplerInfos_.CalculateSize(_repeated_couplerInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_11_COUPLER_INFO_REP other) {
      if (other == null) {
        return;
      }
      couplerInfos_.Add(other.couplerInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            couplerInfos_.AddEntriesFrom(input, _repeated_couplerInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_111_COUPLER_INFO_RESPONSE : pb::IMessage<ID_111_COUPLER_INFO_RESPONSE> {
    private static readonly pb::MessageParser<ID_111_COUPLER_INFO_RESPONSE> _parser = new pb::MessageParser<ID_111_COUPLER_INFO_RESPONSE>(() => new ID_111_COUPLER_INFO_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_111_COUPLER_INFO_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_COUPLER_INFO_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_COUPLER_INFO_RESPONSE(ID_111_COUPLER_INFO_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_111_COUPLER_INFO_RESPONSE Clone() {
      return new ID_111_COUPLER_INFO_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_111_COUPLER_INFO_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_111_COUPLER_INFO_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_111_COUPLER_INFO_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_13_TAVELLING_DATA_REP : pb::IMessage<ID_13_TAVELLING_DATA_REP> {
    private static readonly pb::MessageParser<ID_13_TAVELLING_DATA_REP> _parser = new pb::MessageParser<ID_13_TAVELLING_DATA_REP>(() => new ID_13_TAVELLING_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_13_TAVELLING_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP(ID_13_TAVELLING_DATA_REP other) : this() {
      resolution_ = other.resolution_;
      startStopSpd_ = other.startStopSpd_;
      maxSpeed_ = other.maxSpeed_;
      accelTime_ = other.accelTime_;
      sCurveRate_ = other.sCurveRate_;
      originDir_ = other.originDir_;
      originSpd_ = other.originSpd_;
      beaemSpd_ = other.beaemSpd_;
      manualHSpd_ = other.manualHSpd_;
      manualLSpd_ = other.manualLSpd_;
      teachingSpd_ = other.teachingSpd_;
      rotateDir_ = other.rotateDir_;
      encoderPole_ = other.encoderPole_;
      positionCompensation_ = other.positionCompensation_;
      keepDistFar_ = other.keepDistFar_;
      keepDistNear_ = other.keepDistNear_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_13_TAVELLING_DATA_REP Clone() {
      return new ID_13_TAVELLING_DATA_REP(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private uint resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "StartStopSpd" field.</summary>
    public const int StartStopSpdFieldNumber = 2;
    private uint startStopSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartStopSpd {
      get { return startStopSpd_; }
      set {
        startStopSpd_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 3;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelTime" field.</summary>
    public const int AccelTimeFieldNumber = 4;
    private uint accelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccelTime {
      get { return accelTime_; }
      set {
        accelTime_ = value;
      }
    }

    /// <summary>Field number for the "SCurveRate" field.</summary>
    public const int SCurveRateFieldNumber = 5;
    private int sCurveRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCurveRate {
      get { return sCurveRate_; }
      set {
        sCurveRate_ = value;
      }
    }

    /// <summary>Field number for the "OriginDir" field.</summary>
    public const int OriginDirFieldNumber = 6;
    private int originDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginDir {
      get { return originDir_; }
      set {
        originDir_ = value;
      }
    }

    /// <summary>Field number for the "OriginSpd" field.</summary>
    public const int OriginSpdFieldNumber = 7;
    private uint originSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginSpd {
      get { return originSpd_; }
      set {
        originSpd_ = value;
      }
    }

    /// <summary>Field number for the "BeaemSpd" field.</summary>
    public const int BeaemSpdFieldNumber = 8;
    private uint beaemSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeaemSpd {
      get { return beaemSpd_; }
      set {
        beaemSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualHSpd" field.</summary>
    public const int ManualHSpdFieldNumber = 9;
    private uint manualHSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualHSpd {
      get { return manualHSpd_; }
      set {
        manualHSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualLSpd" field.</summary>
    public const int ManualLSpdFieldNumber = 10;
    private uint manualLSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualLSpd {
      get { return manualLSpd_; }
      set {
        manualLSpd_ = value;
      }
    }

    /// <summary>Field number for the "TeachingSpd" field.</summary>
    public const int TeachingSpdFieldNumber = 11;
    private uint teachingSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeachingSpd {
      get { return teachingSpd_; }
      set {
        teachingSpd_ = value;
      }
    }

    /// <summary>Field number for the "RotateDir" field.</summary>
    public const int RotateDirFieldNumber = 12;
    private int rotateDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateDir {
      get { return rotateDir_; }
      set {
        rotateDir_ = value;
      }
    }

    /// <summary>Field number for the "EncoderPole" field.</summary>
    public const int EncoderPoleFieldNumber = 13;
    private int encoderPole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderPole {
      get { return encoderPole_; }
      set {
        encoderPole_ = value;
      }
    }

    /// <summary>Field number for the "PositionCompensation" field.</summary>
    public const int PositionCompensationFieldNumber = 14;
    private uint positionCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PositionCompensation {
      get { return positionCompensation_; }
      set {
        positionCompensation_ = value;
      }
    }

    /// <summary>Field number for the "KeepDistFar" field.</summary>
    public const int KeepDistFarFieldNumber = 15;
    private uint keepDistFar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepDistFar {
      get { return keepDistFar_; }
      set {
        keepDistFar_ = value;
      }
    }

    /// <summary>Field number for the "KeepDistNear" field.</summary>
    public const int KeepDistNearFieldNumber = 16;
    private uint keepDistNear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepDistNear {
      get { return keepDistNear_; }
      set {
        keepDistNear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_13_TAVELLING_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_13_TAVELLING_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (StartStopSpd != other.StartStopSpd) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (AccelTime != other.AccelTime) return false;
      if (SCurveRate != other.SCurveRate) return false;
      if (OriginDir != other.OriginDir) return false;
      if (OriginSpd != other.OriginSpd) return false;
      if (BeaemSpd != other.BeaemSpd) return false;
      if (ManualHSpd != other.ManualHSpd) return false;
      if (ManualLSpd != other.ManualLSpd) return false;
      if (TeachingSpd != other.TeachingSpd) return false;
      if (RotateDir != other.RotateDir) return false;
      if (EncoderPole != other.EncoderPole) return false;
      if (PositionCompensation != other.PositionCompensation) return false;
      if (KeepDistFar != other.KeepDistFar) return false;
      if (KeepDistNear != other.KeepDistNear) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
      if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
      if (OriginDir != 0) hash ^= OriginDir.GetHashCode();
      if (OriginSpd != 0) hash ^= OriginSpd.GetHashCode();
      if (BeaemSpd != 0) hash ^= BeaemSpd.GetHashCode();
      if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
      if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
      if (TeachingSpd != 0) hash ^= TeachingSpd.GetHashCode();
      if (RotateDir != 0) hash ^= RotateDir.GetHashCode();
      if (EncoderPole != 0) hash ^= EncoderPole.GetHashCode();
      if (PositionCompensation != 0) hash ^= PositionCompensation.GetHashCode();
      if (KeepDistFar != 0) hash ^= KeepDistFar.GetHashCode();
      if (KeepDistNear != 0) hash ^= KeepDistNear.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resolution);
      }
      if (StartStopSpd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxSpeed);
      }
      if (AccelTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AccelTime);
      }
      if (SCurveRate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SCurveRate);
      }
      if (OriginDir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OriginDir);
      }
      if (OriginSpd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OriginSpd);
      }
      if (BeaemSpd != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BeaemSpd);
      }
      if (ManualHSpd != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ManualLSpd);
      }
      if (TeachingSpd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TeachingSpd);
      }
      if (RotateDir != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RotateDir);
      }
      if (EncoderPole != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EncoderPole);
      }
      if (PositionCompensation != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(PositionCompensation);
      }
      if (KeepDistFar != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(KeepDistFar);
      }
      if (KeepDistNear != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(KeepDistNear);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
      }
      if (StartStopSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (AccelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
      }
      if (SCurveRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
      }
      if (OriginDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginDir);
      }
      if (OriginSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginSpd);
      }
      if (BeaemSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeaemSpd);
      }
      if (ManualHSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
      }
      if (TeachingSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeachingSpd);
      }
      if (RotateDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateDir);
      }
      if (EncoderPole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderPole);
      }
      if (PositionCompensation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionCompensation);
      }
      if (KeepDistFar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistFar);
      }
      if (KeepDistNear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistNear);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_13_TAVELLING_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.StartStopSpd != 0) {
        StartStopSpd = other.StartStopSpd;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelTime != 0) {
        AccelTime = other.AccelTime;
      }
      if (other.SCurveRate != 0) {
        SCurveRate = other.SCurveRate;
      }
      if (other.OriginDir != 0) {
        OriginDir = other.OriginDir;
      }
      if (other.OriginSpd != 0) {
        OriginSpd = other.OriginSpd;
      }
      if (other.BeaemSpd != 0) {
        BeaemSpd = other.BeaemSpd;
      }
      if (other.ManualHSpd != 0) {
        ManualHSpd = other.ManualHSpd;
      }
      if (other.ManualLSpd != 0) {
        ManualLSpd = other.ManualLSpd;
      }
      if (other.TeachingSpd != 0) {
        TeachingSpd = other.TeachingSpd;
      }
      if (other.RotateDir != 0) {
        RotateDir = other.RotateDir;
      }
      if (other.EncoderPole != 0) {
        EncoderPole = other.EncoderPole;
      }
      if (other.PositionCompensation != 0) {
        PositionCompensation = other.PositionCompensation;
      }
      if (other.KeepDistFar != 0) {
        KeepDistFar = other.KeepDistFar;
      }
      if (other.KeepDistNear != 0) {
        KeepDistNear = other.KeepDistNear;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resolution = input.ReadUInt32();
            break;
          }
          case 16: {
            StartStopSpd = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 32: {
            AccelTime = input.ReadUInt32();
            break;
          }
          case 40: {
            SCurveRate = input.ReadInt32();
            break;
          }
          case 48: {
            OriginDir = input.ReadInt32();
            break;
          }
          case 56: {
            OriginSpd = input.ReadUInt32();
            break;
          }
          case 64: {
            BeaemSpd = input.ReadUInt32();
            break;
          }
          case 72: {
            ManualHSpd = input.ReadUInt32();
            break;
          }
          case 80: {
            ManualLSpd = input.ReadUInt32();
            break;
          }
          case 88: {
            TeachingSpd = input.ReadUInt32();
            break;
          }
          case 96: {
            RotateDir = input.ReadInt32();
            break;
          }
          case 104: {
            EncoderPole = input.ReadInt32();
            break;
          }
          case 112: {
            PositionCompensation = input.ReadUInt32();
            break;
          }
          case 120: {
            KeepDistFar = input.ReadUInt32();
            break;
          }
          case 128: {
            KeepDistNear = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_113_TAVELLING_DATA_RESPONSE : pb::IMessage<ID_113_TAVELLING_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> _parser = new pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE>(() => new ID_113_TAVELLING_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE(ID_113_TAVELLING_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_113_TAVELLING_DATA_RESPONSE Clone() {
      return new ID_113_TAVELLING_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_113_TAVELLING_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_113_TAVELLING_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_113_TAVELLING_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_15_SECTION_DATA_REP : pb::IMessage<ID_15_SECTION_DATA_REP> {
    private static readonly pb::MessageParser<ID_15_SECTION_DATA_REP> _parser = new pb::MessageParser<ID_15_SECTION_DATA_REP>(() => new ID_15_SECTION_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_15_SECTION_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP(ID_15_SECTION_DATA_REP other) : this() {
      sections_ = other.sections_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_15_SECTION_DATA_REP Clone() {
      return new ID_15_SECTION_DATA_REP(this);
    }

    /// <summary>Field number for the "Sections" field.</summary>
    public const int SectionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section> _repeated_sections_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section> sections_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Types.Section> Sections {
      get { return sections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_15_SECTION_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_15_SECTION_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sections_.Equals(other.sections_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sections_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sections_.WriteTo(output, _repeated_sections_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sections_.CalculateSize(_repeated_sections_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_15_SECTION_DATA_REP other) {
      if (other == null) {
        return;
      }
      sections_.Add(other.sections_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sections_.AddEntriesFrom(input, _repeated_sections_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ID_15_SECTION_DATA_REP message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Section : pb::IMessage<Section> {
        private static readonly pb::MessageParser<Section> _parser = new pb::MessageParser<Section>(() => new Section());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Section> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section(Section other) : this() {
          driveDir_ = other.driveDir_;
          aeraSecsor_ = other.aeraSecsor_;
          guideDir_ = other.guideDir_;
          sectionID_ = other.sectionID_;
          fromAddr_ = other.fromAddr_;
          toAddr_ = other.toAddr_;
          controlTable_ = other.controlTable_;
          speed_ = other.speed_;
          distance_ = other.distance_;
          changeAreaSensor1_ = other.changeAreaSensor1_;
          changeGuideDir1_ = other.changeGuideDir1_;
          changeSegNum1_ = other.changeSegNum1_;
          changeAreaSensor2_ = other.changeAreaSensor2_;
          changeGuideDir2_ = other.changeGuideDir2_;
          changeSegNum2_ = other.changeSegNum2_;
          atSegment_ = other.atSegment_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Section Clone() {
          return new Section(this);
        }

        /// <summary>Field number for the "DriveDir" field.</summary>
        public const int DriveDirFieldNumber = 1;
        private int driveDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DriveDir {
          get { return driveDir_; }
          set {
            driveDir_ = value;
          }
        }

        /// <summary>Field number for the "AeraSecsor" field.</summary>
        public const int AeraSecsorFieldNumber = 2;
        private int aeraSecsor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AeraSecsor {
          get { return aeraSecsor_; }
          set {
            aeraSecsor_ = value;
          }
        }

        /// <summary>Field number for the "GuideDir" field.</summary>
        public const int GuideDirFieldNumber = 3;
        private int guideDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuideDir {
          get { return guideDir_; }
          set {
            guideDir_ = value;
          }
        }

        /// <summary>Field number for the "SectionID" field.</summary>
        public const int SectionIDFieldNumber = 4;
        private string sectionID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SectionID {
          get { return sectionID_; }
          set {
            sectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "FromAddr" field.</summary>
        public const int FromAddrFieldNumber = 5;
        private string fromAddr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FromAddr {
          get { return fromAddr_; }
          set {
            fromAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ToAddr" field.</summary>
        public const int ToAddrFieldNumber = 6;
        private string toAddr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToAddr {
          get { return toAddr_; }
          set {
            toAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ControlTable" field.</summary>
        public const int ControlTableFieldNumber = 7;
        private int controlTable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ControlTable {
          get { return controlTable_; }
          set {
            controlTable_ = value;
          }
        }

        /// <summary>Field number for the "Speed" field.</summary>
        public const int SpeedFieldNumber = 9;
        private uint speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        /// <summary>Field number for the "Distance" field.</summary>
        public const int DistanceFieldNumber = 10;
        private uint distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "ChangeAreaSensor1" field.</summary>
        public const int ChangeAreaSensor1FieldNumber = 11;
        private int changeAreaSensor1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeAreaSensor1 {
          get { return changeAreaSensor1_; }
          set {
            changeAreaSensor1_ = value;
          }
        }

        /// <summary>Field number for the "ChangeGuideDir1" field.</summary>
        public const int ChangeGuideDir1FieldNumber = 12;
        private int changeGuideDir1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeGuideDir1 {
          get { return changeGuideDir1_; }
          set {
            changeGuideDir1_ = value;
          }
        }

        /// <summary>Field number for the "ChangeSegNum1" field.</summary>
        public const int ChangeSegNum1FieldNumber = 13;
        private string changeSegNum1_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChangeSegNum1 {
          get { return changeSegNum1_; }
          set {
            changeSegNum1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ChangeAreaSensor2" field.</summary>
        public const int ChangeAreaSensor2FieldNumber = 14;
        private int changeAreaSensor2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeAreaSensor2 {
          get { return changeAreaSensor2_; }
          set {
            changeAreaSensor2_ = value;
          }
        }

        /// <summary>Field number for the "ChangeGuideDir2" field.</summary>
        public const int ChangeGuideDir2FieldNumber = 15;
        private int changeGuideDir2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChangeGuideDir2 {
          get { return changeGuideDir2_; }
          set {
            changeGuideDir2_ = value;
          }
        }

        /// <summary>Field number for the "ChangeSegNum2" field.</summary>
        public const int ChangeSegNum2FieldNumber = 16;
        private string changeSegNum2_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChangeSegNum2 {
          get { return changeSegNum2_; }
          set {
            changeSegNum2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "AtSegment" field.</summary>
        public const int AtSegmentFieldNumber = 17;
        private string atSegment_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AtSegment {
          get { return atSegment_; }
          set {
            atSegment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Section);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Section other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DriveDir != other.DriveDir) return false;
          if (AeraSecsor != other.AeraSecsor) return false;
          if (GuideDir != other.GuideDir) return false;
          if (SectionID != other.SectionID) return false;
          if (FromAddr != other.FromAddr) return false;
          if (ToAddr != other.ToAddr) return false;
          if (ControlTable != other.ControlTable) return false;
          if (Speed != other.Speed) return false;
          if (Distance != other.Distance) return false;
          if (ChangeAreaSensor1 != other.ChangeAreaSensor1) return false;
          if (ChangeGuideDir1 != other.ChangeGuideDir1) return false;
          if (ChangeSegNum1 != other.ChangeSegNum1) return false;
          if (ChangeAreaSensor2 != other.ChangeAreaSensor2) return false;
          if (ChangeGuideDir2 != other.ChangeGuideDir2) return false;
          if (ChangeSegNum2 != other.ChangeSegNum2) return false;
          if (AtSegment != other.AtSegment) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DriveDir != 0) hash ^= DriveDir.GetHashCode();
          if (AeraSecsor != 0) hash ^= AeraSecsor.GetHashCode();
          if (GuideDir != 0) hash ^= GuideDir.GetHashCode();
          if (SectionID.Length != 0) hash ^= SectionID.GetHashCode();
          if (FromAddr.Length != 0) hash ^= FromAddr.GetHashCode();
          if (ToAddr.Length != 0) hash ^= ToAddr.GetHashCode();
          if (ControlTable != 0) hash ^= ControlTable.GetHashCode();
          if (Speed != 0) hash ^= Speed.GetHashCode();
          if (Distance != 0) hash ^= Distance.GetHashCode();
          if (ChangeAreaSensor1 != 0) hash ^= ChangeAreaSensor1.GetHashCode();
          if (ChangeGuideDir1 != 0) hash ^= ChangeGuideDir1.GetHashCode();
          if (ChangeSegNum1.Length != 0) hash ^= ChangeSegNum1.GetHashCode();
          if (ChangeAreaSensor2 != 0) hash ^= ChangeAreaSensor2.GetHashCode();
          if (ChangeGuideDir2 != 0) hash ^= ChangeGuideDir2.GetHashCode();
          if (ChangeSegNum2.Length != 0) hash ^= ChangeSegNum2.GetHashCode();
          if (AtSegment.Length != 0) hash ^= AtSegment.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DriveDir != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DriveDir);
          }
          if (AeraSecsor != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(AeraSecsor);
          }
          if (GuideDir != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(GuideDir);
          }
          if (SectionID.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SectionID);
          }
          if (FromAddr.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(FromAddr);
          }
          if (ToAddr.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(ToAddr);
          }
          if (ControlTable != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ControlTable);
          }
          if (Speed != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Speed);
          }
          if (Distance != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(Distance);
          }
          if (ChangeAreaSensor1 != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(ChangeAreaSensor1);
          }
          if (ChangeGuideDir1 != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(ChangeGuideDir1);
          }
          if (ChangeSegNum1.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ChangeSegNum1);
          }
          if (ChangeAreaSensor2 != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(ChangeAreaSensor2);
          }
          if (ChangeGuideDir2 != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(ChangeGuideDir2);
          }
          if (ChangeSegNum2.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(ChangeSegNum2);
          }
          if (AtSegment.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(AtSegment);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DriveDir != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DriveDir);
          }
          if (AeraSecsor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AeraSecsor);
          }
          if (GuideDir != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDir);
          }
          if (SectionID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionID);
          }
          if (FromAddr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAddr);
          }
          if (ToAddr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAddr);
          }
          if (ControlTable != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlTable);
          }
          if (Speed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
          }
          if (Distance != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
          }
          if (ChangeAreaSensor1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor1);
          }
          if (ChangeGuideDir1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir1);
          }
          if (ChangeSegNum1.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum1);
          }
          if (ChangeAreaSensor2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor2);
          }
          if (ChangeGuideDir2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir2);
          }
          if (ChangeSegNum2.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum2);
          }
          if (AtSegment.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AtSegment);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Section other) {
          if (other == null) {
            return;
          }
          if (other.DriveDir != 0) {
            DriveDir = other.DriveDir;
          }
          if (other.AeraSecsor != 0) {
            AeraSecsor = other.AeraSecsor;
          }
          if (other.GuideDir != 0) {
            GuideDir = other.GuideDir;
          }
          if (other.SectionID.Length != 0) {
            SectionID = other.SectionID;
          }
          if (other.FromAddr.Length != 0) {
            FromAddr = other.FromAddr;
          }
          if (other.ToAddr.Length != 0) {
            ToAddr = other.ToAddr;
          }
          if (other.ControlTable != 0) {
            ControlTable = other.ControlTable;
          }
          if (other.Speed != 0) {
            Speed = other.Speed;
          }
          if (other.Distance != 0) {
            Distance = other.Distance;
          }
          if (other.ChangeAreaSensor1 != 0) {
            ChangeAreaSensor1 = other.ChangeAreaSensor1;
          }
          if (other.ChangeGuideDir1 != 0) {
            ChangeGuideDir1 = other.ChangeGuideDir1;
          }
          if (other.ChangeSegNum1.Length != 0) {
            ChangeSegNum1 = other.ChangeSegNum1;
          }
          if (other.ChangeAreaSensor2 != 0) {
            ChangeAreaSensor2 = other.ChangeAreaSensor2;
          }
          if (other.ChangeGuideDir2 != 0) {
            ChangeGuideDir2 = other.ChangeGuideDir2;
          }
          if (other.ChangeSegNum2.Length != 0) {
            ChangeSegNum2 = other.ChangeSegNum2;
          }
          if (other.AtSegment.Length != 0) {
            AtSegment = other.AtSegment;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DriveDir = input.ReadInt32();
                break;
              }
              case 16: {
                AeraSecsor = input.ReadInt32();
                break;
              }
              case 24: {
                GuideDir = input.ReadInt32();
                break;
              }
              case 34: {
                SectionID = input.ReadString();
                break;
              }
              case 42: {
                FromAddr = input.ReadString();
                break;
              }
              case 50: {
                ToAddr = input.ReadString();
                break;
              }
              case 56: {
                ControlTable = input.ReadInt32();
                break;
              }
              case 72: {
                Speed = input.ReadUInt32();
                break;
              }
              case 80: {
                Distance = input.ReadUInt32();
                break;
              }
              case 88: {
                ChangeAreaSensor1 = input.ReadInt32();
                break;
              }
              case 96: {
                ChangeGuideDir1 = input.ReadInt32();
                break;
              }
              case 106: {
                ChangeSegNum1 = input.ReadString();
                break;
              }
              case 112: {
                ChangeAreaSensor2 = input.ReadInt32();
                break;
              }
              case 120: {
                ChangeGuideDir2 = input.ReadInt32();
                break;
              }
              case 130: {
                ChangeSegNum2 = input.ReadString();
                break;
              }
              case 138: {
                AtSegment = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ID_115_SECTION_DATA_RESPONSE : pb::IMessage<ID_115_SECTION_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> _parser = new pb::MessageParser<ID_115_SECTION_DATA_RESPONSE>(() => new ID_115_SECTION_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE(ID_115_SECTION_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_115_SECTION_DATA_RESPONSE Clone() {
      return new ID_115_SECTION_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_115_SECTION_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_115_SECTION_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_115_SECTION_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_17_ADDRESS_DATA_REP : pb::IMessage<ID_17_ADDRESS_DATA_REP> {
    private static readonly pb::MessageParser<ID_17_ADDRESS_DATA_REP> _parser = new pb::MessageParser<ID_17_ADDRESS_DATA_REP>(() => new ID_17_ADDRESS_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_17_ADDRESS_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP(ID_17_ADDRESS_DATA_REP other) : this() {
      addresss_ = other.addresss_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_17_ADDRESS_DATA_REP Clone() {
      return new ID_17_ADDRESS_DATA_REP(this);
    }

    /// <summary>Field number for the "Addresss" field.</summary>
    public const int AddresssFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address> _repeated_addresss_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address> addresss_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Types.Address> Addresss {
      get { return addresss_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_17_ADDRESS_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_17_ADDRESS_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresss_.Equals(other.addresss_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresss_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresss_.WriteTo(output, _repeated_addresss_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresss_.CalculateSize(_repeated_addresss_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_17_ADDRESS_DATA_REP other) {
      if (other == null) {
        return;
      }
      addresss_.Add(other.addresss_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresss_.AddEntriesFrom(input, _repeated_addresss_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ID_17_ADDRESS_DATA_REP message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Address : pb::IMessage<Address> {
        private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Address> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address(Address other) : this() {
          addr_ = other.addr_;
          resolution_ = other.resolution_;
          loaction_ = other.loaction_;
          blockRelease_ = other.blockRelease_;
          hIDRelease_ = other.hIDRelease_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address Clone() {
          return new Address(this);
        }

        /// <summary>Field number for the "Addr" field.</summary>
        public const int AddrFieldNumber = 1;
        private string addr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Addr {
          get { return addr_; }
          set {
            addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Resolution" field.</summary>
        public const int ResolutionFieldNumber = 2;
        private int resolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Resolution {
          get { return resolution_; }
          set {
            resolution_ = value;
          }
        }

        /// <summary>Field number for the "Loaction" field.</summary>
        public const int LoactionFieldNumber = 3;
        private int loaction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Loaction {
          get { return loaction_; }
          set {
            loaction_ = value;
          }
        }

        /// <summary>Field number for the "BlockRelease" field.</summary>
        public const int BlockReleaseFieldNumber = 4;
        private int blockRelease_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlockRelease {
          get { return blockRelease_; }
          set {
            blockRelease_ = value;
          }
        }

        /// <summary>Field number for the "HIDRelease" field.</summary>
        public const int HIDReleaseFieldNumber = 5;
        private int hIDRelease_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int HIDRelease {
          get { return hIDRelease_; }
          set {
            hIDRelease_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Address);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Address other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Addr != other.Addr) return false;
          if (Resolution != other.Resolution) return false;
          if (Loaction != other.Loaction) return false;
          if (BlockRelease != other.BlockRelease) return false;
          if (HIDRelease != other.HIDRelease) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Addr.Length != 0) hash ^= Addr.GetHashCode();
          if (Resolution != 0) hash ^= Resolution.GetHashCode();
          if (Loaction != 0) hash ^= Loaction.GetHashCode();
          if (BlockRelease != 0) hash ^= BlockRelease.GetHashCode();
          if (HIDRelease != 0) hash ^= HIDRelease.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Addr.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Addr);
          }
          if (Resolution != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Resolution);
          }
          if (Loaction != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Loaction);
          }
          if (BlockRelease != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(BlockRelease);
          }
          if (HIDRelease != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(HIDRelease);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Addr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
          }
          if (Resolution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resolution);
          }
          if (Loaction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loaction);
          }
          if (BlockRelease != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockRelease);
          }
          if (HIDRelease != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HIDRelease);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Address other) {
          if (other == null) {
            return;
          }
          if (other.Addr.Length != 0) {
            Addr = other.Addr;
          }
          if (other.Resolution != 0) {
            Resolution = other.Resolution;
          }
          if (other.Loaction != 0) {
            Loaction = other.Loaction;
          }
          if (other.BlockRelease != 0) {
            BlockRelease = other.BlockRelease;
          }
          if (other.HIDRelease != 0) {
            HIDRelease = other.HIDRelease;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Addr = input.ReadString();
                break;
              }
              case 16: {
                Resolution = input.ReadInt32();
                break;
              }
              case 24: {
                Loaction = input.ReadInt32();
                break;
              }
              case 32: {
                BlockRelease = input.ReadInt32();
                break;
              }
              case 40: {
                HIDRelease = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ID_117_ADDRESS_DATA_RESPONSE : pb::IMessage<ID_117_ADDRESS_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> _parser = new pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE>(() => new ID_117_ADDRESS_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE(ID_117_ADDRESS_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_117_ADDRESS_DATA_RESPONSE Clone() {
      return new ID_117_ADDRESS_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_117_ADDRESS_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_117_ADDRESS_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_117_ADDRESS_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_19_SCALE_DATA_REP : pb::IMessage<ID_19_SCALE_DATA_REP> {
    private static readonly pb::MessageParser<ID_19_SCALE_DATA_REP> _parser = new pb::MessageParser<ID_19_SCALE_DATA_REP>(() => new ID_19_SCALE_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_19_SCALE_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP(ID_19_SCALE_DATA_REP other) : this() {
      resolution_ = other.resolution_;
      inposArea_ = other.inposArea_;
      inposStability_ = other.inposStability_;
      scalePulse_ = other.scalePulse_;
      scaleOffset_ = other.scaleOffset_;
      scaleReset_ = other.scaleReset_;
      readDir_ = other.readDir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_19_SCALE_DATA_REP Clone() {
      return new ID_19_SCALE_DATA_REP(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private uint resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "InposArea" field.</summary>
    public const int InposAreaFieldNumber = 2;
    private uint inposArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InposArea {
      get { return inposArea_; }
      set {
        inposArea_ = value;
      }
    }

    /// <summary>Field number for the "InposStability" field.</summary>
    public const int InposStabilityFieldNumber = 3;
    private uint inposStability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InposStability {
      get { return inposStability_; }
      set {
        inposStability_ = value;
      }
    }

    /// <summary>Field number for the "ScalePulse" field.</summary>
    public const int ScalePulseFieldNumber = 4;
    private uint scalePulse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScalePulse {
      get { return scalePulse_; }
      set {
        scalePulse_ = value;
      }
    }

    /// <summary>Field number for the "ScaleOffset" field.</summary>
    public const int ScaleOffsetFieldNumber = 5;
    private uint scaleOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleOffset {
      get { return scaleOffset_; }
      set {
        scaleOffset_ = value;
      }
    }

    /// <summary>Field number for the "ScaleReset" field.</summary>
    public const int ScaleResetFieldNumber = 6;
    private uint scaleReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleReset {
      get { return scaleReset_; }
      set {
        scaleReset_ = value;
      }
    }

    /// <summary>Field number for the "ReadDir" field.</summary>
    public const int ReadDirFieldNumber = 7;
    private int readDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadDir {
      get { return readDir_; }
      set {
        readDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_19_SCALE_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_19_SCALE_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resolution != other.Resolution) return false;
      if (InposArea != other.InposArea) return false;
      if (InposStability != other.InposStability) return false;
      if (ScalePulse != other.ScalePulse) return false;
      if (ScaleOffset != other.ScaleOffset) return false;
      if (ScaleReset != other.ScaleReset) return false;
      if (ReadDir != other.ReadDir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resolution != 0) hash ^= Resolution.GetHashCode();
      if (InposArea != 0) hash ^= InposArea.GetHashCode();
      if (InposStability != 0) hash ^= InposStability.GetHashCode();
      if (ScalePulse != 0) hash ^= ScalePulse.GetHashCode();
      if (ScaleOffset != 0) hash ^= ScaleOffset.GetHashCode();
      if (ScaleReset != 0) hash ^= ScaleReset.GetHashCode();
      if (ReadDir != 0) hash ^= ReadDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resolution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resolution);
      }
      if (InposArea != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InposArea);
      }
      if (InposStability != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InposStability);
      }
      if (ScalePulse != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ScalePulse);
      }
      if (ScaleOffset != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScaleOffset);
      }
      if (ScaleReset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScaleReset);
      }
      if (ReadDir != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReadDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
      }
      if (InposArea != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposArea);
      }
      if (InposStability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposStability);
      }
      if (ScalePulse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScalePulse);
      }
      if (ScaleOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleOffset);
      }
      if (ScaleReset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleReset);
      }
      if (ReadDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_19_SCALE_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.Resolution != 0) {
        Resolution = other.Resolution;
      }
      if (other.InposArea != 0) {
        InposArea = other.InposArea;
      }
      if (other.InposStability != 0) {
        InposStability = other.InposStability;
      }
      if (other.ScalePulse != 0) {
        ScalePulse = other.ScalePulse;
      }
      if (other.ScaleOffset != 0) {
        ScaleOffset = other.ScaleOffset;
      }
      if (other.ScaleReset != 0) {
        ScaleReset = other.ScaleReset;
      }
      if (other.ReadDir != 0) {
        ReadDir = other.ReadDir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resolution = input.ReadUInt32();
            break;
          }
          case 16: {
            InposArea = input.ReadUInt32();
            break;
          }
          case 24: {
            InposStability = input.ReadUInt32();
            break;
          }
          case 32: {
            ScalePulse = input.ReadUInt32();
            break;
          }
          case 40: {
            ScaleOffset = input.ReadUInt32();
            break;
          }
          case 48: {
            ScaleReset = input.ReadUInt32();
            break;
          }
          case 56: {
            ReadDir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_119_SCALE_DATA_RESPONSE : pb::IMessage<ID_119_SCALE_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_119_SCALE_DATA_RESPONSE>(() => new ID_119_SCALE_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE(ID_119_SCALE_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_119_SCALE_DATA_RESPONSE Clone() {
      return new ID_119_SCALE_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_119_SCALE_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_119_SCALE_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_119_SCALE_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_21_CONTROL_DATA_REP : pb::IMessage<ID_21_CONTROL_DATA_REP> {
    private static readonly pb::MessageParser<ID_21_CONTROL_DATA_REP> _parser = new pb::MessageParser<ID_21_CONTROL_DATA_REP>(() => new ID_21_CONTROL_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_21_CONTROL_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP(ID_21_CONTROL_DATA_REP other) : this() {
      timeoutT1_ = other.timeoutT1_;
      timeoutT2_ = other.timeoutT2_;
      timeoutT3_ = other.timeoutT3_;
      timeoutT4_ = other.timeoutT4_;
      timeoutT5_ = other.timeoutT5_;
      timeoutT6_ = other.timeoutT6_;
      timeoutT7_ = other.timeoutT7_;
      timeoutT8_ = other.timeoutT8_;
      timeoutBlock_ = other.timeoutBlock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_21_CONTROL_DATA_REP Clone() {
      return new ID_21_CONTROL_DATA_REP(this);
    }

    /// <summary>Field number for the "TimeoutT1" field.</summary>
    public const int TimeoutT1FieldNumber = 1;
    private uint timeoutT1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT1 {
      get { return timeoutT1_; }
      set {
        timeoutT1_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT2" field.</summary>
    public const int TimeoutT2FieldNumber = 2;
    private uint timeoutT2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT2 {
      get { return timeoutT2_; }
      set {
        timeoutT2_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT3" field.</summary>
    public const int TimeoutT3FieldNumber = 3;
    private uint timeoutT3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT3 {
      get { return timeoutT3_; }
      set {
        timeoutT3_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT4" field.</summary>
    public const int TimeoutT4FieldNumber = 4;
    private uint timeoutT4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT4 {
      get { return timeoutT4_; }
      set {
        timeoutT4_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT5" field.</summary>
    public const int TimeoutT5FieldNumber = 5;
    private uint timeoutT5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT5 {
      get { return timeoutT5_; }
      set {
        timeoutT5_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT6" field.</summary>
    public const int TimeoutT6FieldNumber = 6;
    private uint timeoutT6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT6 {
      get { return timeoutT6_; }
      set {
        timeoutT6_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT7" field.</summary>
    public const int TimeoutT7FieldNumber = 7;
    private uint timeoutT7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT7 {
      get { return timeoutT7_; }
      set {
        timeoutT7_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutT8" field.</summary>
    public const int TimeoutT8FieldNumber = 8;
    private uint timeoutT8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutT8 {
      get { return timeoutT8_; }
      set {
        timeoutT8_ = value;
      }
    }

    /// <summary>Field number for the "TimeoutBlock" field.</summary>
    public const int TimeoutBlockFieldNumber = 9;
    private uint timeoutBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutBlock {
      get { return timeoutBlock_; }
      set {
        timeoutBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_21_CONTROL_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_21_CONTROL_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeoutT1 != other.TimeoutT1) return false;
      if (TimeoutT2 != other.TimeoutT2) return false;
      if (TimeoutT3 != other.TimeoutT3) return false;
      if (TimeoutT4 != other.TimeoutT4) return false;
      if (TimeoutT5 != other.TimeoutT5) return false;
      if (TimeoutT6 != other.TimeoutT6) return false;
      if (TimeoutT7 != other.TimeoutT7) return false;
      if (TimeoutT8 != other.TimeoutT8) return false;
      if (TimeoutBlock != other.TimeoutBlock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeoutT1 != 0) hash ^= TimeoutT1.GetHashCode();
      if (TimeoutT2 != 0) hash ^= TimeoutT2.GetHashCode();
      if (TimeoutT3 != 0) hash ^= TimeoutT3.GetHashCode();
      if (TimeoutT4 != 0) hash ^= TimeoutT4.GetHashCode();
      if (TimeoutT5 != 0) hash ^= TimeoutT5.GetHashCode();
      if (TimeoutT6 != 0) hash ^= TimeoutT6.GetHashCode();
      if (TimeoutT7 != 0) hash ^= TimeoutT7.GetHashCode();
      if (TimeoutT8 != 0) hash ^= TimeoutT8.GetHashCode();
      if (TimeoutBlock != 0) hash ^= TimeoutBlock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeoutT1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeoutT1);
      }
      if (TimeoutT2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeoutT2);
      }
      if (TimeoutT3 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeoutT3);
      }
      if (TimeoutT4 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeoutT4);
      }
      if (TimeoutT5 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeoutT5);
      }
      if (TimeoutT6 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeoutT6);
      }
      if (TimeoutT7 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TimeoutT7);
      }
      if (TimeoutT8 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeoutT8);
      }
      if (TimeoutBlock != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TimeoutBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeoutT1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT1);
      }
      if (TimeoutT2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT2);
      }
      if (TimeoutT3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT3);
      }
      if (TimeoutT4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT4);
      }
      if (TimeoutT5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT5);
      }
      if (TimeoutT6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT6);
      }
      if (TimeoutT7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT7);
      }
      if (TimeoutT8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT8);
      }
      if (TimeoutBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_21_CONTROL_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.TimeoutT1 != 0) {
        TimeoutT1 = other.TimeoutT1;
      }
      if (other.TimeoutT2 != 0) {
        TimeoutT2 = other.TimeoutT2;
      }
      if (other.TimeoutT3 != 0) {
        TimeoutT3 = other.TimeoutT3;
      }
      if (other.TimeoutT4 != 0) {
        TimeoutT4 = other.TimeoutT4;
      }
      if (other.TimeoutT5 != 0) {
        TimeoutT5 = other.TimeoutT5;
      }
      if (other.TimeoutT6 != 0) {
        TimeoutT6 = other.TimeoutT6;
      }
      if (other.TimeoutT7 != 0) {
        TimeoutT7 = other.TimeoutT7;
      }
      if (other.TimeoutT8 != 0) {
        TimeoutT8 = other.TimeoutT8;
      }
      if (other.TimeoutBlock != 0) {
        TimeoutBlock = other.TimeoutBlock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeoutT1 = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeoutT2 = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeoutT3 = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeoutT4 = input.ReadUInt32();
            break;
          }
          case 40: {
            TimeoutT5 = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeoutT6 = input.ReadUInt32();
            break;
          }
          case 56: {
            TimeoutT7 = input.ReadUInt32();
            break;
          }
          case 64: {
            TimeoutT8 = input.ReadUInt32();
            break;
          }
          case 72: {
            TimeoutBlock = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_121_CONTROL_DATA_RESPONSE : pb::IMessage<ID_121_CONTROL_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> _parser = new pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE>(() => new ID_121_CONTROL_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE(ID_121_CONTROL_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_121_CONTROL_DATA_RESPONSE Clone() {
      return new ID_121_CONTROL_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_121_CONTROL_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_121_CONTROL_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_121_CONTROL_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_23_GUIDE_DATA_REP : pb::IMessage<ID_23_GUIDE_DATA_REP> {
    private static readonly pb::MessageParser<ID_23_GUIDE_DATA_REP> _parser = new pb::MessageParser<ID_23_GUIDE_DATA_REP>(() => new ID_23_GUIDE_DATA_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_23_GUIDE_DATA_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP(ID_23_GUIDE_DATA_REP other) : this() {
      startStopSpd_ = other.startStopSpd_;
      maxSpeed_ = other.maxSpeed_;
      accelTime_ = other.accelTime_;
      sCurveRate_ = other.sCurveRate_;
      normalSpd_ = other.normalSpd_;
      manualHSpd_ = other.manualHSpd_;
      manualLSpd_ = other.manualLSpd_;
      lFLockPos_ = other.lFLockPos_;
      lBLockPos_ = other.lBLockPos_;
      rFLockPos_ = other.rFLockPos_;
      rBLockPos_ = other.rBLockPos_;
      changeStabilityTime_ = other.changeStabilityTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_23_GUIDE_DATA_REP Clone() {
      return new ID_23_GUIDE_DATA_REP(this);
    }

    /// <summary>Field number for the "StartStopSpd" field.</summary>
    public const int StartStopSpdFieldNumber = 1;
    private uint startStopSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartStopSpd {
      get { return startStopSpd_; }
      set {
        startStopSpd_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 2;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelTime" field.</summary>
    public const int AccelTimeFieldNumber = 3;
    private uint accelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccelTime {
      get { return accelTime_; }
      set {
        accelTime_ = value;
      }
    }

    /// <summary>Field number for the "SCurveRate" field.</summary>
    public const int SCurveRateFieldNumber = 4;
    private int sCurveRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCurveRate {
      get { return sCurveRate_; }
      set {
        sCurveRate_ = value;
      }
    }

    /// <summary>Field number for the "NormalSpd" field.</summary>
    public const int NormalSpdFieldNumber = 5;
    private uint normalSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalSpd {
      get { return normalSpd_; }
      set {
        normalSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualHSpd" field.</summary>
    public const int ManualHSpdFieldNumber = 6;
    private uint manualHSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualHSpd {
      get { return manualHSpd_; }
      set {
        manualHSpd_ = value;
      }
    }

    /// <summary>Field number for the "ManualLSpd" field.</summary>
    public const int ManualLSpdFieldNumber = 7;
    private uint manualLSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualLSpd {
      get { return manualLSpd_; }
      set {
        manualLSpd_ = value;
      }
    }

    /// <summary>Field number for the "LFLockPos" field.</summary>
    public const int LFLockPosFieldNumber = 8;
    private uint lFLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LFLockPos {
      get { return lFLockPos_; }
      set {
        lFLockPos_ = value;
      }
    }

    /// <summary>Field number for the "LBLockPos" field.</summary>
    public const int LBLockPosFieldNumber = 9;
    private uint lBLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LBLockPos {
      get { return lBLockPos_; }
      set {
        lBLockPos_ = value;
      }
    }

    /// <summary>Field number for the "RFLockPos" field.</summary>
    public const int RFLockPosFieldNumber = 10;
    private uint rFLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RFLockPos {
      get { return rFLockPos_; }
      set {
        rFLockPos_ = value;
      }
    }

    /// <summary>Field number for the "RBLockPos" field.</summary>
    public const int RBLockPosFieldNumber = 11;
    private uint rBLockPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RBLockPos {
      get { return rBLockPos_; }
      set {
        rBLockPos_ = value;
      }
    }

    /// <summary>Field number for the "ChangeStabilityTime" field.</summary>
    public const int ChangeStabilityTimeFieldNumber = 12;
    private uint changeStabilityTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeStabilityTime {
      get { return changeStabilityTime_; }
      set {
        changeStabilityTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_23_GUIDE_DATA_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_23_GUIDE_DATA_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartStopSpd != other.StartStopSpd) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (AccelTime != other.AccelTime) return false;
      if (SCurveRate != other.SCurveRate) return false;
      if (NormalSpd != other.NormalSpd) return false;
      if (ManualHSpd != other.ManualHSpd) return false;
      if (ManualLSpd != other.ManualLSpd) return false;
      if (LFLockPos != other.LFLockPos) return false;
      if (LBLockPos != other.LBLockPos) return false;
      if (RFLockPos != other.RFLockPos) return false;
      if (RBLockPos != other.RBLockPos) return false;
      if (ChangeStabilityTime != other.ChangeStabilityTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
      if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
      if (NormalSpd != 0) hash ^= NormalSpd.GetHashCode();
      if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
      if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
      if (LFLockPos != 0) hash ^= LFLockPos.GetHashCode();
      if (LBLockPos != 0) hash ^= LBLockPos.GetHashCode();
      if (RFLockPos != 0) hash ^= RFLockPos.GetHashCode();
      if (RBLockPos != 0) hash ^= RBLockPos.GetHashCode();
      if (ChangeStabilityTime != 0) hash ^= ChangeStabilityTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartStopSpd != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxSpeed);
      }
      if (AccelTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccelTime);
      }
      if (SCurveRate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SCurveRate);
      }
      if (NormalSpd != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NormalSpd);
      }
      if (ManualHSpd != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ManualLSpd);
      }
      if (LFLockPos != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LFLockPos);
      }
      if (LBLockPos != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LBLockPos);
      }
      if (RFLockPos != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RFLockPos);
      }
      if (RBLockPos != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RBLockPos);
      }
      if (ChangeStabilityTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ChangeStabilityTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartStopSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (AccelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
      }
      if (SCurveRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
      }
      if (NormalSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalSpd);
      }
      if (ManualHSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
      }
      if (ManualLSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
      }
      if (LFLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LFLockPos);
      }
      if (LBLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LBLockPos);
      }
      if (RFLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RFLockPos);
      }
      if (RBLockPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RBLockPos);
      }
      if (ChangeStabilityTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeStabilityTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_23_GUIDE_DATA_REP other) {
      if (other == null) {
        return;
      }
      if (other.StartStopSpd != 0) {
        StartStopSpd = other.StartStopSpd;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelTime != 0) {
        AccelTime = other.AccelTime;
      }
      if (other.SCurveRate != 0) {
        SCurveRate = other.SCurveRate;
      }
      if (other.NormalSpd != 0) {
        NormalSpd = other.NormalSpd;
      }
      if (other.ManualHSpd != 0) {
        ManualHSpd = other.ManualHSpd;
      }
      if (other.ManualLSpd != 0) {
        ManualLSpd = other.ManualLSpd;
      }
      if (other.LFLockPos != 0) {
        LFLockPos = other.LFLockPos;
      }
      if (other.LBLockPos != 0) {
        LBLockPos = other.LBLockPos;
      }
      if (other.RFLockPos != 0) {
        RFLockPos = other.RFLockPos;
      }
      if (other.RBLockPos != 0) {
        RBLockPos = other.RBLockPos;
      }
      if (other.ChangeStabilityTime != 0) {
        ChangeStabilityTime = other.ChangeStabilityTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartStopSpd = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 24: {
            AccelTime = input.ReadUInt32();
            break;
          }
          case 32: {
            SCurveRate = input.ReadInt32();
            break;
          }
          case 40: {
            NormalSpd = input.ReadUInt32();
            break;
          }
          case 48: {
            ManualHSpd = input.ReadUInt32();
            break;
          }
          case 56: {
            ManualLSpd = input.ReadUInt32();
            break;
          }
          case 64: {
            LFLockPos = input.ReadUInt32();
            break;
          }
          case 72: {
            LBLockPos = input.ReadUInt32();
            break;
          }
          case 80: {
            RFLockPos = input.ReadUInt32();
            break;
          }
          case 88: {
            RBLockPos = input.ReadUInt32();
            break;
          }
          case 96: {
            ChangeStabilityTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_123_GUIDE_DATA_RESPONSE : pb::IMessage<ID_123_GUIDE_DATA_RESPONSE> {
    private static readonly pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE>(() => new ID_123_GUIDE_DATA_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE(ID_123_GUIDE_DATA_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_123_GUIDE_DATA_RESPONSE Clone() {
      return new ID_123_GUIDE_DATA_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_123_GUIDE_DATA_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_123_GUIDE_DATA_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_123_GUIDE_DATA_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_61_INDIVIDUAL_UPLOAD_REQ : pb::IMessage<ID_61_INDIVIDUAL_UPLOAD_REQ> {
    private static readonly pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> _parser = new pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ>(() => new ID_61_INDIVIDUAL_UPLOAD_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ(ID_61_INDIVIDUAL_UPLOAD_REQ other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_61_INDIVIDUAL_UPLOAD_REQ Clone() {
      return new ID_61_INDIVIDUAL_UPLOAD_REQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_61_INDIVIDUAL_UPLOAD_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_61_INDIVIDUAL_UPLOAD_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_61_INDIVIDUAL_UPLOAD_REQ other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_161_INDIVIDUAL_UPLOAD_RESPONSE : pb::IMessage<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> {
    private static readonly pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> _parser = new pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE>(() => new ID_161_INDIVIDUAL_UPLOAD_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_161_INDIVIDUAL_UPLOAD_RESPONSE Clone() {
      return new ID_161_INDIVIDUAL_UPLOAD_RESPONSE(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_161_INDIVIDUAL_UPLOAD_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_162_INDIVIDUAL_DOWNLOAD_REQ : pb::IMessage<ID_162_INDIVIDUAL_DOWNLOAD_REQ> {
    private static readonly pb::MessageParser<ID_162_INDIVIDUAL_DOWNLOAD_REQ> _parser = new pb::MessageParser<ID_162_INDIVIDUAL_DOWNLOAD_REQ>(() => new ID_162_INDIVIDUAL_DOWNLOAD_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_162_INDIVIDUAL_DOWNLOAD_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_INDIVIDUAL_DOWNLOAD_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_INDIVIDUAL_DOWNLOAD_REQ(ID_162_INDIVIDUAL_DOWNLOAD_REQ other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_162_INDIVIDUAL_DOWNLOAD_REQ Clone() {
      return new ID_162_INDIVIDUAL_DOWNLOAD_REQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_162_INDIVIDUAL_DOWNLOAD_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_162_INDIVIDUAL_DOWNLOAD_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_162_INDIVIDUAL_DOWNLOAD_REQ other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE : pb::IMessage<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE> {
    private static readonly pb::MessageParser<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE> _parser = new pb::MessageParser<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE>(() => new ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE(ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE Clone() {
      return new ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_63_INDIVIDUAL_CHANGE_REQ : pb::IMessage<ID_63_INDIVIDUAL_CHANGE_REQ> {
    private static readonly pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> _parser = new pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ>(() => new ID_63_INDIVIDUAL_CHANGE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ(ID_63_INDIVIDUAL_CHANGE_REQ other) : this() {
      offsetGuideFL_ = other.offsetGuideFL_;
      offsetGuideRL_ = other.offsetGuideRL_;
      offsetGuideFR_ = other.offsetGuideFR_;
      offsetGuideRR_ = other.offsetGuideRR_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_63_INDIVIDUAL_CHANGE_REQ Clone() {
      return new ID_63_INDIVIDUAL_CHANGE_REQ(this);
    }

    /// <summary>Field number for the "OffsetGuideFL" field.</summary>
    public const int OffsetGuideFLFieldNumber = 1;
    private uint offsetGuideFL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFL {
      get { return offsetGuideFL_; }
      set {
        offsetGuideFL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRL" field.</summary>
    public const int OffsetGuideRLFieldNumber = 2;
    private uint offsetGuideRL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRL {
      get { return offsetGuideRL_; }
      set {
        offsetGuideRL_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideFR" field.</summary>
    public const int OffsetGuideFRFieldNumber = 3;
    private uint offsetGuideFR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideFR {
      get { return offsetGuideFR_; }
      set {
        offsetGuideFR_ = value;
      }
    }

    /// <summary>Field number for the "OffsetGuideRR" field.</summary>
    public const int OffsetGuideRRFieldNumber = 4;
    private uint offsetGuideRR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetGuideRR {
      get { return offsetGuideRR_; }
      set {
        offsetGuideRR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_63_INDIVIDUAL_CHANGE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_63_INDIVIDUAL_CHANGE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetGuideFL != other.OffsetGuideFL) return false;
      if (OffsetGuideRL != other.OffsetGuideRL) return false;
      if (OffsetGuideFR != other.OffsetGuideFR) return false;
      if (OffsetGuideRR != other.OffsetGuideRR) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
      if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
      if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
      if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetGuideFL != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetGuideRR);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetGuideFL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
      }
      if (OffsetGuideRL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
      }
      if (OffsetGuideFR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
      }
      if (OffsetGuideRR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_63_INDIVIDUAL_CHANGE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OffsetGuideFL != 0) {
        OffsetGuideFL = other.OffsetGuideFL;
      }
      if (other.OffsetGuideRL != 0) {
        OffsetGuideRL = other.OffsetGuideRL;
      }
      if (other.OffsetGuideFR != 0) {
        OffsetGuideFR = other.OffsetGuideFR;
      }
      if (other.OffsetGuideRR != 0) {
        OffsetGuideRR = other.OffsetGuideRR;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetGuideFL = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetGuideRL = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetGuideFR = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetGuideRR = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_163_INDIVIDUAL_CHANGE_RESPONSE : pb::IMessage<ID_163_INDIVIDUAL_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE>(() => new ID_163_INDIVIDUAL_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_163_INDIVIDUAL_CHANGE_RESPONSE Clone() {
      return new ID_163_INDIVIDUAL_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_163_INDIVIDUAL_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_31_TRANS_REQUEST : pb::IMessage<ID_31_TRANS_REQUEST> {
    private static readonly pb::MessageParser<ID_31_TRANS_REQUEST> _parser = new pb::MessageParser<ID_31_TRANS_REQUEST>(() => new ID_31_TRANS_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_31_TRANS_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST(ID_31_TRANS_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      commandAction_ = other.commandAction_;
      loadAdr_ = other.loadAdr_;
      destinationAdr_ = other.destinationAdr_;
      cSTID_ = other.cSTID_;
      loadPortID_ = other.loadPortID_;
      unloadPortID_ = other.unloadPortID_;
      isLoadPortHasGate_ = other.isLoadPortHasGate_;
      isUnloadPortHasGate_ = other.isUnloadPortHasGate_;
      lOTID_ = other.lOTID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_31_TRANS_REQUEST Clone() {
      return new ID_31_TRANS_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommandAction" field.</summary>
    public const int CommandActionFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType commandAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType CommandAction {
      get { return commandAction_; }
      set {
        commandAction_ = value;
      }
    }

    /// <summary>Field number for the "LoadAdr" field.</summary>
    public const int LoadAdrFieldNumber = 3;
    private string loadAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadAdr {
      get { return loadAdr_; }
      set {
        loadAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestinationAdr" field.</summary>
    public const int DestinationAdrFieldNumber = 4;
    private string destinationAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationAdr {
      get { return destinationAdr_; }
      set {
        destinationAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 5;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoadPortID" field.</summary>
    public const int LoadPortIDFieldNumber = 6;
    private string loadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadPortID {
      get { return loadPortID_; }
      set {
        loadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnloadPortID" field.</summary>
    public const int UnloadPortIDFieldNumber = 7;
    private string unloadPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnloadPortID {
      get { return unloadPortID_; }
      set {
        unloadPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsLoadPortHasGate" field.</summary>
    public const int IsLoadPortHasGateFieldNumber = 8;
    private bool isLoadPortHasGate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoadPortHasGate {
      get { return isLoadPortHasGate_; }
      set {
        isLoadPortHasGate_ = value;
      }
    }

    /// <summary>Field number for the "IsUnloadPortHasGate" field.</summary>
    public const int IsUnloadPortHasGateFieldNumber = 9;
    private bool isUnloadPortHasGate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnloadPortHasGate {
      get { return isUnloadPortHasGate_; }
      set {
        isUnloadPortHasGate_ = value;
      }
    }

    /// <summary>Field number for the "LOT_ID" field.</summary>
    public const int LOTIDFieldNumber = 10;
    private string lOTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOTID {
      get { return lOTID_; }
      set {
        lOTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_31_TRANS_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_31_TRANS_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CommandAction != other.CommandAction) return false;
      if (LoadAdr != other.LoadAdr) return false;
      if (DestinationAdr != other.DestinationAdr) return false;
      if (CSTID != other.CSTID) return false;
      if (LoadPortID != other.LoadPortID) return false;
      if (UnloadPortID != other.UnloadPortID) return false;
      if (IsLoadPortHasGate != other.IsLoadPortHasGate) return false;
      if (IsUnloadPortHasGate != other.IsUnloadPortHasGate) return false;
      if (LOTID != other.LOTID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (CommandAction != 0) hash ^= CommandAction.GetHashCode();
      if (LoadAdr.Length != 0) hash ^= LoadAdr.GetHashCode();
      if (DestinationAdr.Length != 0) hash ^= DestinationAdr.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (LoadPortID.Length != 0) hash ^= LoadPortID.GetHashCode();
      if (UnloadPortID.Length != 0) hash ^= UnloadPortID.GetHashCode();
      if (IsLoadPortHasGate != false) hash ^= IsLoadPortHasGate.GetHashCode();
      if (IsUnloadPortHasGate != false) hash ^= IsUnloadPortHasGate.GetHashCode();
      if (LOTID.Length != 0) hash ^= LOTID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (CommandAction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandAction);
      }
      if (LoadAdr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoadAdr);
      }
      if (DestinationAdr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DestinationAdr);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CSTID);
      }
      if (LoadPortID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UnloadPortID);
      }
      if (IsLoadPortHasGate != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsLoadPortHasGate);
      }
      if (IsUnloadPortHasGate != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsUnloadPortHasGate);
      }
      if (LOTID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LOTID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (CommandAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandAction);
      }
      if (LoadAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadAdr);
      }
      if (DestinationAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationAdr);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (LoadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadPortID);
      }
      if (UnloadPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnloadPortID);
      }
      if (IsLoadPortHasGate != false) {
        size += 1 + 1;
      }
      if (IsUnloadPortHasGate != false) {
        size += 1 + 1;
      }
      if (LOTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOTID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_31_TRANS_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.CommandAction != 0) {
        CommandAction = other.CommandAction;
      }
      if (other.LoadAdr.Length != 0) {
        LoadAdr = other.LoadAdr;
      }
      if (other.DestinationAdr.Length != 0) {
        DestinationAdr = other.DestinationAdr;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.LoadPortID.Length != 0) {
        LoadPortID = other.LoadPortID;
      }
      if (other.UnloadPortID.Length != 0) {
        UnloadPortID = other.UnloadPortID;
      }
      if (other.IsLoadPortHasGate != false) {
        IsLoadPortHasGate = other.IsLoadPortHasGate;
      }
      if (other.IsUnloadPortHasGate != false) {
        IsUnloadPortHasGate = other.IsUnloadPortHasGate;
      }
      if (other.LOTID.Length != 0) {
        LOTID = other.LOTID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            commandAction_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType) input.ReadEnum();
            break;
          }
          case 26: {
            LoadAdr = input.ReadString();
            break;
          }
          case 34: {
            DestinationAdr = input.ReadString();
            break;
          }
          case 42: {
            CSTID = input.ReadString();
            break;
          }
          case 50: {
            LoadPortID = input.ReadString();
            break;
          }
          case 58: {
            UnloadPortID = input.ReadString();
            break;
          }
          case 64: {
            IsLoadPortHasGate = input.ReadBool();
            break;
          }
          case 72: {
            IsUnloadPortHasGate = input.ReadBool();
            break;
          }
          case 82: {
            LOTID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_131_TRANS_RESPONSE : pb::IMessage<ID_131_TRANS_RESPONSE> {
    private static readonly pb::MessageParser<ID_131_TRANS_RESPONSE> _parser = new pb::MessageParser<ID_131_TRANS_RESPONSE>(() => new ID_131_TRANS_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_131_TRANS_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE(ID_131_TRANS_RESPONSE other) : this() {
      cmdID_ = other.cmdID_;
      commandAction_ = other.commandAction_;
      replyCode_ = other.replyCode_;
      ngReason_ = other.ngReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_131_TRANS_RESPONSE Clone() {
      return new ID_131_TRANS_RESPONSE(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommandAction" field.</summary>
    public const int CommandActionFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType commandAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType CommandAction {
      get { return commandAction_; }
      set {
        commandAction_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "NgReason" field.</summary>
    public const int NgReasonFieldNumber = 4;
    private string ngReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NgReason {
      get { return ngReason_; }
      set {
        ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_131_TRANS_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_131_TRANS_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CommandAction != other.CommandAction) return false;
      if (ReplyCode != other.ReplyCode) return false;
      if (NgReason != other.NgReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (CommandAction != 0) hash ^= CommandAction.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (CommandAction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommandAction);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
      if (NgReason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NgReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (CommandAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandAction);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (NgReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_131_TRANS_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.CommandAction != 0) {
        CommandAction = other.CommandAction;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.NgReason.Length != 0) {
        NgReason = other.NgReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            commandAction_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandActionType) input.ReadEnum();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 34: {
            NgReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_132_TRANS_COMPLETE_REPORT : pb::IMessage<ID_132_TRANS_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT>(() => new ID_132_TRANS_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT(ID_132_TRANS_COMPLETE_REPORT other) : this() {
      cmdID_ = other.cmdID_;
      cSTID_ = other.cSTID_;
      cmpStatus_ = other.cmpStatus_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      cmdPowerConsume_ = other.cmdPowerConsume_;
      cmdDistance_ = other.cmdDistance_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      directionAngle_ = other.directionAngle_;
      vehicleAngle_ = other.vehicleAngle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_132_TRANS_COMPLETE_REPORT Clone() {
      return new ID_132_TRANS_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 2;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmpStatus" field.</summary>
    public const int CmpStatusFieldNumber = 3;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CompleteStatus cmpStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CompleteStatus CmpStatus {
      get { return cmpStatus_; }
      set {
        cmpStatus_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 4;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 5;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 6;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_Power_Consume" field.</summary>
    public const int CmdPowerConsumeFieldNumber = 7;
    private uint cmdPowerConsume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CmdPowerConsume {
      get { return cmdPowerConsume_; }
      set {
        cmdPowerConsume_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_Distance" field.</summary>
    public const int CmdDistanceFieldNumber = 8;
    private int cmdDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmdDistance {
      get { return cmdDistance_; }
      set {
        cmdDistance_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 9;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 10;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "DirectionAngle" field.</summary>
    public const int DirectionAngleFieldNumber = 11;
    private double directionAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DirectionAngle {
      get { return directionAngle_; }
      set {
        directionAngle_ = value;
      }
    }

    /// <summary>Field number for the "VehicleAngle" field.</summary>
    public const int VehicleAngleFieldNumber = 12;
    private double vehicleAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleAngle {
      get { return vehicleAngle_; }
      set {
        vehicleAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_132_TRANS_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_132_TRANS_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CSTID != other.CSTID) return false;
      if (CmpStatus != other.CmpStatus) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (CmdPowerConsume != other.CmdPowerConsume) return false;
      if (CmdDistance != other.CmdDistance) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (DirectionAngle != other.DirectionAngle) return false;
      if (VehicleAngle != other.VehicleAngle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (CmdPowerConsume != 0) hash ^= CmdPowerConsume.GetHashCode();
      if (CmdDistance != 0) hash ^= CmdDistance.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (DirectionAngle != 0D) hash ^= DirectionAngle.GetHashCode();
      if (VehicleAngle != 0D) hash ^= VehicleAngle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CSTID);
      }
      if (CmpStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SecDistance);
      }
      if (CmdPowerConsume != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CmdPowerConsume);
      }
      if (CmdDistance != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CmdDistance);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(YAxis);
      }
      if (DirectionAngle != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(DirectionAngle);
      }
      if (VehicleAngle != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(VehicleAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (CmpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmpStatus);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (CmdPowerConsume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CmdPowerConsume);
      }
      if (CmdDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmdDistance);
      }
      if (XAxis != 0D) {
        size += 1 + 8;
      }
      if (YAxis != 0D) {
        size += 1 + 8;
      }
      if (DirectionAngle != 0D) {
        size += 1 + 8;
      }
      if (VehicleAngle != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_132_TRANS_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.CmpStatus != 0) {
        CmpStatus = other.CmpStatus;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.CmdPowerConsume != 0) {
        CmdPowerConsume = other.CmdPowerConsume;
      }
      if (other.CmdDistance != 0) {
        CmdDistance = other.CmdDistance;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.DirectionAngle != 0D) {
        DirectionAngle = other.DirectionAngle;
      }
      if (other.VehicleAngle != 0D) {
        VehicleAngle = other.VehicleAngle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 18: {
            CSTID = input.ReadString();
            break;
          }
          case 24: {
            cmpStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CompleteStatus) input.ReadEnum();
            break;
          }
          case 34: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 42: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 48: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 56: {
            CmdPowerConsume = input.ReadUInt32();
            break;
          }
          case 64: {
            CmdDistance = input.ReadInt32();
            break;
          }
          case 73: {
            XAxis = input.ReadDouble();
            break;
          }
          case 81: {
            YAxis = input.ReadDouble();
            break;
          }
          case 89: {
            DirectionAngle = input.ReadDouble();
            break;
          }
          case 97: {
            VehicleAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_32_TRANS_COMPLETE_RESPONSE : pb::IMessage<ID_32_TRANS_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE>(() => new ID_32_TRANS_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE(ID_32_TRANS_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
      waitTime_ = other.waitTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_32_TRANS_COMPLETE_RESPONSE Clone() {
      return new ID_32_TRANS_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "WaitTime" field.</summary>
    public const int WaitTimeFieldNumber = 2;
    private int waitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_32_TRANS_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_32_TRANS_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      if (WaitTime != other.WaitTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_32_TRANS_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 16: {
            WaitTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_134_TRANS_EVENT_REP : pb::IMessage<ID_134_TRANS_EVENT_REP> {
    private static readonly pb::MessageParser<ID_134_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_134_TRANS_EVENT_REP>(() => new ID_134_TRANS_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_134_TRANS_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP(ID_134_TRANS_EVENT_REP other) : this() {
      eventType_ = other.eventType_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      drivingDirection_ = other.drivingDirection_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      directionAngle_ = other.directionAngle_;
      vehicleAngle_ = other.vehicleAngle_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_134_TRANS_EVENT_REP Clone() {
      return new ID_134_TRANS_EVENT_REP(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 2;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 3;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 4;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 5;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 6;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 7;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "DirectionAngle" field.</summary>
    public const int DirectionAngleFieldNumber = 8;
    private double directionAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DirectionAngle {
      get { return directionAngle_; }
      set {
        directionAngle_ = value;
      }
    }

    /// <summary>Field number for the "VehicleAngle" field.</summary>
    public const int VehicleAngleFieldNumber = 9;
    private double vehicleAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleAngle {
      get { return vehicleAngle_; }
      set {
        vehicleAngle_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 10;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_134_TRANS_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_134_TRANS_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (DirectionAngle != other.DirectionAngle) return false;
      if (VehicleAngle != other.VehicleAngle) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (DirectionAngle != 0D) hash ^= DirectionAngle.GetHashCode();
      if (VehicleAngle != 0D) hash ^= VehicleAngle.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SecDistance);
      }
      if (DrivingDirection != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DrivingDirection);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(YAxis);
      }
      if (DirectionAngle != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DirectionAngle);
      }
      if (VehicleAngle != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(VehicleAngle);
      }
      if (Speed != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (DrivingDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (XAxis != 0D) {
        size += 1 + 8;
      }
      if (YAxis != 0D) {
        size += 1 + 8;
      }
      if (DirectionAngle != 0D) {
        size += 1 + 8;
      }
      if (VehicleAngle != 0D) {
        size += 1 + 8;
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_134_TRANS_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.DirectionAngle != 0D) {
        DirectionAngle = other.DirectionAngle;
      }
      if (other.VehicleAngle != 0D) {
        VehicleAngle = other.VehicleAngle;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 26: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 32: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 40: {
            drivingDirection_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 49: {
            XAxis = input.ReadDouble();
            break;
          }
          case 57: {
            YAxis = input.ReadDouble();
            break;
          }
          case 65: {
            DirectionAngle = input.ReadDouble();
            break;
          }
          case 73: {
            VehicleAngle = input.ReadDouble();
            break;
          }
          case 81: {
            Speed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_35_CST_ID_RENAME_REQUEST : pb::IMessage<ID_35_CST_ID_RENAME_REQUEST> {
    private static readonly pb::MessageParser<ID_35_CST_ID_RENAME_REQUEST> _parser = new pb::MessageParser<ID_35_CST_ID_RENAME_REQUEST>(() => new ID_35_CST_ID_RENAME_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_35_CST_ID_RENAME_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CST_ID_RENAME_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CST_ID_RENAME_REQUEST(ID_35_CST_ID_RENAME_REQUEST other) : this() {
      oLDCSTID_ = other.oLDCSTID_;
      nEWCSTID_ = other.nEWCSTID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_35_CST_ID_RENAME_REQUEST Clone() {
      return new ID_35_CST_ID_RENAME_REQUEST(this);
    }

    /// <summary>Field number for the "OLD_CST_ID" field.</summary>
    public const int OLDCSTIDFieldNumber = 1;
    private string oLDCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OLDCSTID {
      get { return oLDCSTID_; }
      set {
        oLDCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NEW_CST_ID" field.</summary>
    public const int NEWCSTIDFieldNumber = 2;
    private string nEWCSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NEWCSTID {
      get { return nEWCSTID_; }
      set {
        nEWCSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_35_CST_ID_RENAME_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_35_CST_ID_RENAME_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OLDCSTID != other.OLDCSTID) return false;
      if (NEWCSTID != other.NEWCSTID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OLDCSTID.Length != 0) hash ^= OLDCSTID.GetHashCode();
      if (NEWCSTID.Length != 0) hash ^= NEWCSTID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OLDCSTID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OLDCSTID);
      }
      if (NEWCSTID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NEWCSTID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OLDCSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OLDCSTID);
      }
      if (NEWCSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NEWCSTID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_35_CST_ID_RENAME_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.OLDCSTID.Length != 0) {
        OLDCSTID = other.OLDCSTID;
      }
      if (other.NEWCSTID.Length != 0) {
        NEWCSTID = other.NEWCSTID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OLDCSTID = input.ReadString();
            break;
          }
          case 18: {
            NEWCSTID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_135_CST_ID_RENAME_RESPONSE : pb::IMessage<ID_135_CST_ID_RENAME_RESPONSE> {
    private static readonly pb::MessageParser<ID_135_CST_ID_RENAME_RESPONSE> _parser = new pb::MessageParser<ID_135_CST_ID_RENAME_RESPONSE>(() => new ID_135_CST_ID_RENAME_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_135_CST_ID_RENAME_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CST_ID_RENAME_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CST_ID_RENAME_RESPONSE(ID_135_CST_ID_RENAME_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_135_CST_ID_RENAME_RESPONSE Clone() {
      return new ID_135_CST_ID_RENAME_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_135_CST_ID_RENAME_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_135_CST_ID_RENAME_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_135_CST_ID_RENAME_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReserveInfo : pb::IMessage<ReserveInfo> {
    private static readonly pb::MessageParser<ReserveInfo> _parser = new pb::MessageParser<ReserveInfo>(() => new ReserveInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo(ReserveInfo other) : this() {
      reserveSectionID_ = other.reserveSectionID_;
      driveDirction_ = other.driveDirction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveInfo Clone() {
      return new ReserveInfo(this);
    }

    /// <summary>Field number for the "Reserve_Section_ID" field.</summary>
    public const int ReserveSectionIDFieldNumber = 1;
    private string reserveSectionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReserveSectionID {
      get { return reserveSectionID_; }
      set {
        reserveSectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DriveDirction" field.</summary>
    public const int DriveDirctionFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction driveDirction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction DriveDirction {
      get { return driveDirction_; }
      set {
        driveDirction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReserveSectionID != other.ReserveSectionID) return false;
      if (DriveDirction != other.DriveDirction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReserveSectionID.Length != 0) hash ^= ReserveSectionID.GetHashCode();
      if (DriveDirction != 0) hash ^= DriveDirction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReserveSectionID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReserveSectionID);
      }
      if (DriveDirction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DriveDirction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReserveSectionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReserveSectionID);
      }
      if (DriveDirction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DriveDirction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveInfo other) {
      if (other == null) {
        return;
      }
      if (other.ReserveSectionID.Length != 0) {
        ReserveSectionID = other.ReserveSectionID;
      }
      if (other.DriveDirction != 0) {
        DriveDirction = other.DriveDirction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReserveSectionID = input.ReadString();
            break;
          }
          case 16: {
            driveDirction_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PortInfo : pb::IMessage<PortInfo> {
    private static readonly pb::MessageParser<PortInfo> _parser = new pb::MessageParser<PortInfo>(() => new PortInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PortInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortInfo(PortInfo other) : this() {
      iD_ = other.iD_;
      isInputMode_ = other.isInputMode_;
      isOutputMode_ = other.isOutputMode_;
      isAGVPortReady_ = other.isAGVPortReady_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortInfo Clone() {
      return new PortInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsInputMode" field.</summary>
    public const int IsInputModeFieldNumber = 2;
    private bool isInputMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInputMode {
      get { return isInputMode_; }
      set {
        isInputMode_ = value;
      }
    }

    /// <summary>Field number for the "IsOutputMode" field.</summary>
    public const int IsOutputModeFieldNumber = 3;
    private bool isOutputMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOutputMode {
      get { return isOutputMode_; }
      set {
        isOutputMode_ = value;
      }
    }

    /// <summary>Field number for the "IsAGVPortReady" field.</summary>
    public const int IsAGVPortReadyFieldNumber = 4;
    private bool isAGVPortReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAGVPortReady {
      get { return isAGVPortReady_; }
      set {
        isAGVPortReady_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PortInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PortInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (IsInputMode != other.IsInputMode) return false;
      if (IsOutputMode != other.IsOutputMode) return false;
      if (IsAGVPortReady != other.IsAGVPortReady) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (IsInputMode != false) hash ^= IsInputMode.GetHashCode();
      if (IsOutputMode != false) hash ^= IsOutputMode.GetHashCode();
      if (IsAGVPortReady != false) hash ^= IsAGVPortReady.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (IsInputMode != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsInputMode);
      }
      if (IsOutputMode != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOutputMode);
      }
      if (IsAGVPortReady != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAGVPortReady);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (IsInputMode != false) {
        size += 1 + 1;
      }
      if (IsOutputMode != false) {
        size += 1 + 1;
      }
      if (IsAGVPortReady != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PortInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.IsInputMode != false) {
        IsInputMode = other.IsInputMode;
      }
      if (other.IsOutputMode != false) {
        IsOutputMode = other.IsOutputMode;
      }
      if (other.IsAGVPortReady != false) {
        IsAGVPortReady = other.IsAGVPortReady;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 16: {
            IsInputMode = input.ReadBool();
            break;
          }
          case 24: {
            IsOutputMode = input.ReadBool();
            break;
          }
          case 32: {
            IsAGVPortReady = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_136_TRANS_EVENT_REP : pb::IMessage<ID_136_TRANS_EVENT_REP> {
    private static readonly pb::MessageParser<ID_136_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_136_TRANS_EVENT_REP>(() => new ID_136_TRANS_EVENT_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_136_TRANS_EVENT_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP(ID_136_TRANS_EVENT_REP other) : this() {
      eventType_ = other.eventType_;
      reserveInfos_ = other.reserveInfos_.Clone();
      requestBlockID_ = other.requestBlockID_;
      cSTID_ = other.cSTID_;
      releaseBlockAdrID_ = other.releaseBlockAdrID_;
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      secDistance_ = other.secDistance_;
      bCRReadResult_ = other.bCRReadResult_;
      cmdID_ = other.cmdID_;
      location_ = other.location_;
      currentPortID_ = other.currentPortID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_136_TRANS_EVENT_REP Clone() {
      return new ID_136_TRANS_EVENT_REP(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(18, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Request_Block_ID" field.</summary>
    public const int RequestBlockIDFieldNumber = 3;
    private string requestBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestBlockID {
      get { return requestBlockID_; }
      set {
        requestBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CST_ID" field.</summary>
    public const int CSTIDFieldNumber = 4;
    private string cSTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CSTID {
      get { return cSTID_; }
      set {
        cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Release_Block_AdrID" field.</summary>
    public const int ReleaseBlockAdrIDFieldNumber = 5;
    private string releaseBlockAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseBlockAdrID {
      get { return releaseBlockAdrID_; }
      set {
        releaseBlockAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 6;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 7;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 8;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "BCRReadResult" field.</summary>
    public const int BCRReadResultFieldNumber = 9;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.BCRReadResult bCRReadResult_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.BCRReadResult BCRReadResult {
      get { return bCRReadResult_; }
      set {
        bCRReadResult_ = value;
      }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 10;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Location" field.</summary>
    public const int LocationFieldNumber = 11;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AGVLocation location_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AGVLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "CurrentPortID" field.</summary>
    public const int CurrentPortIDFieldNumber = 12;
    private string currentPortID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentPortID {
      get { return currentPortID_; }
      set {
        currentPortID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_136_TRANS_EVENT_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_136_TRANS_EVENT_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (RequestBlockID != other.RequestBlockID) return false;
      if (CSTID != other.CSTID) return false;
      if (ReleaseBlockAdrID != other.ReleaseBlockAdrID) return false;
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (SecDistance != other.SecDistance) return false;
      if (BCRReadResult != other.BCRReadResult) return false;
      if (CmdID != other.CmdID) return false;
      if (Location != other.Location) return false;
      if (CurrentPortID != other.CurrentPortID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (RequestBlockID.Length != 0) hash ^= RequestBlockID.GetHashCode();
      if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
      if (ReleaseBlockAdrID.Length != 0) hash ^= ReleaseBlockAdrID.GetHashCode();
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (BCRReadResult != 0) hash ^= BCRReadResult.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (Location != 0) hash ^= Location.GetHashCode();
      if (CurrentPortID.Length != 0) hash ^= CurrentPortID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (RequestBlockID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RequestBlockID);
      }
      if (CSTID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CSTID);
      }
      if (ReleaseBlockAdrID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReleaseBlockAdrID);
      }
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CurrentSecID);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SecDistance);
      }
      if (BCRReadResult != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) BCRReadResult);
      }
      if (CmdID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CmdID);
      }
      if (Location != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Location);
      }
      if (CurrentPortID.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentPortID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (RequestBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestBlockID);
      }
      if (CSTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
      }
      if (ReleaseBlockAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseBlockAdrID);
      }
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (BCRReadResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BCRReadResult);
      }
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
      }
      if (CurrentPortID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentPortID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_136_TRANS_EVENT_REP other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.RequestBlockID.Length != 0) {
        RequestBlockID = other.RequestBlockID;
      }
      if (other.CSTID.Length != 0) {
        CSTID = other.CSTID;
      }
      if (other.ReleaseBlockAdrID.Length != 0) {
        ReleaseBlockAdrID = other.ReleaseBlockAdrID;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.BCRReadResult != 0) {
        BCRReadResult = other.BCRReadResult;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.Location != 0) {
        Location = other.Location;
      }
      if (other.CurrentPortID.Length != 0) {
        CurrentPortID = other.CurrentPortID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 26: {
            RequestBlockID = input.ReadString();
            break;
          }
          case 34: {
            CSTID = input.ReadString();
            break;
          }
          case 42: {
            ReleaseBlockAdrID = input.ReadString();
            break;
          }
          case 50: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 58: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 64: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 72: {
            bCRReadResult_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.BCRReadResult) input.ReadEnum();
            break;
          }
          case 82: {
            CmdID = input.ReadString();
            break;
          }
          case 88: {
            location_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AGVLocation) input.ReadEnum();
            break;
          }
          case 98: {
            CurrentPortID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_36_TRANS_EVENT_RESPONSE : pb::IMessage<ID_36_TRANS_EVENT_RESPONSE> {
    private static readonly pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> _parser = new pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE>(() => new ID_36_TRANS_EVENT_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE(ID_36_TRANS_EVENT_RESPONSE other) : this() {
      eventType_ = other.eventType_;
      isReserveSuccess_ = other.isReserveSuccess_;
      isBlockPass_ = other.isBlockPass_;
      renameCarrierID_ = other.renameCarrierID_;
      replyAction_ = other.replyAction_;
      replyCode_ = other.replyCode_;
      reserveInfos_ = other.reserveInfos_.Clone();
      cmdID_ = other.cmdID_;
      portInfos_ = other.portInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_36_TRANS_EVENT_RESPONSE Clone() {
      return new ID_36_TRANS_EVENT_RESPONSE(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "Is_Reserve_Success" field.</summary>
    public const int IsReserveSuccessFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveResult isReserveSuccess_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveResult IsReserveSuccess {
      get { return isReserveSuccess_; }
      set {
        isReserveSuccess_ = value;
      }
    }

    /// <summary>Field number for the "Is_Block_Pass" field.</summary>
    public const int IsBlockPassFieldNumber = 3;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PassType isBlockPass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PassType IsBlockPass {
      get { return isBlockPass_; }
      set {
        isBlockPass_ = value;
      }
    }

    /// <summary>Field number for the "RenameCarrierID" field.</summary>
    public const int RenameCarrierIDFieldNumber = 4;
    private string renameCarrierID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameCarrierID {
      get { return renameCarrierID_; }
      set {
        renameCarrierID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReplyAction" field.</summary>
    public const int ReplyActionFieldNumber = 5;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReplyActionType replyAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReplyActionType ReplyAction {
      get { return replyAction_; }
      set {
        replyAction_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 6;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 7;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(58, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 8;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PortInfos" field.</summary>
    public const int PortInfosFieldNumber = 9;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo> _repeated_portInfos_codec
        = pb::FieldCodec.ForMessage(74, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo> portInfos_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PortInfo> PortInfos {
      get { return portInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_36_TRANS_EVENT_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_36_TRANS_EVENT_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (IsReserveSuccess != other.IsReserveSuccess) return false;
      if (IsBlockPass != other.IsBlockPass) return false;
      if (RenameCarrierID != other.RenameCarrierID) return false;
      if (ReplyAction != other.ReplyAction) return false;
      if (ReplyCode != other.ReplyCode) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (CmdID != other.CmdID) return false;
      if(!portInfos_.Equals(other.portInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (IsReserveSuccess != 0) hash ^= IsReserveSuccess.GetHashCode();
      if (IsBlockPass != 0) hash ^= IsBlockPass.GetHashCode();
      if (RenameCarrierID.Length != 0) hash ^= RenameCarrierID.GetHashCode();
      if (ReplyAction != 0) hash ^= ReplyAction.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      hash ^= portInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (IsReserveSuccess != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IsReserveSuccess);
      }
      if (IsBlockPass != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) IsBlockPass);
      }
      if (RenameCarrierID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RenameCarrierID);
      }
      if (ReplyAction != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ReplyAction);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReplyCode);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (CmdID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CmdID);
      }
      portInfos_.WriteTo(output, _repeated_portInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (IsReserveSuccess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsReserveSuccess);
      }
      if (IsBlockPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsBlockPass);
      }
      if (RenameCarrierID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameCarrierID);
      }
      if (ReplyAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReplyAction);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      size += portInfos_.CalculateSize(_repeated_portInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_36_TRANS_EVENT_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.IsReserveSuccess != 0) {
        IsReserveSuccess = other.IsReserveSuccess;
      }
      if (other.IsBlockPass != 0) {
        IsBlockPass = other.IsBlockPass;
      }
      if (other.RenameCarrierID.Length != 0) {
        RenameCarrierID = other.RenameCarrierID;
      }
      if (other.ReplyAction != 0) {
        ReplyAction = other.ReplyAction;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      portInfos_.Add(other.portInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.EventType) input.ReadEnum();
            break;
          }
          case 16: {
            isReserveSuccess_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveResult) input.ReadEnum();
            break;
          }
          case 24: {
            isBlockPass_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PassType) input.ReadEnum();
            break;
          }
          case 34: {
            RenameCarrierID = input.ReadString();
            break;
          }
          case 40: {
            replyAction_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReplyActionType) input.ReadEnum();
            break;
          }
          case 48: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 58: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 66: {
            CmdID = input.ReadString();
            break;
          }
          case 74: {
            portInfos_.AddEntriesFrom(input, _repeated_portInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_37_TRANS_CANCEL_REQUEST : pb::IMessage<ID_37_TRANS_CANCEL_REQUEST> {
    private static readonly pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST>(() => new ID_37_TRANS_CANCEL_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST(ID_37_TRANS_CANCEL_REQUEST other) : this() {
      cmdID_ = other.cmdID_;
      cancelAction_ = other.cancelAction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_37_TRANS_CANCEL_REQUEST Clone() {
      return new ID_37_TRANS_CANCEL_REQUEST(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CancelAction" field.</summary>
    public const int CancelActionFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType cancelAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType CancelAction {
      get { return cancelAction_; }
      set {
        cancelAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_37_TRANS_CANCEL_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_37_TRANS_CANCEL_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CancelAction != other.CancelAction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (CancelAction != 0) hash ^= CancelAction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (CancelAction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CancelAction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (CancelAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CancelAction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_37_TRANS_CANCEL_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.CancelAction != 0) {
        CancelAction = other.CancelAction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            cancelAction_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_137_TRANS_CANCEL_RESPONSE : pb::IMessage<ID_137_TRANS_CANCEL_RESPONSE> {
    private static readonly pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE>(() => new ID_137_TRANS_CANCEL_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE(ID_137_TRANS_CANCEL_RESPONSE other) : this() {
      cmdID_ = other.cmdID_;
      cancelAction_ = other.cancelAction_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_137_TRANS_CANCEL_RESPONSE Clone() {
      return new ID_137_TRANS_CANCEL_RESPONSE(this);
    }

    /// <summary>Field number for the "Cmd_ID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private string cmdID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CancelAction" field.</summary>
    public const int CancelActionFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType cancelAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType CancelAction {
      get { return cancelAction_; }
      set {
        cancelAction_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 3;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_137_TRANS_CANCEL_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_137_TRANS_CANCEL_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CancelAction != other.CancelAction) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
      if (CancelAction != 0) hash ^= CancelAction.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdID);
      }
      if (CancelAction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CancelAction);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
      }
      if (CancelAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CancelAction);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_137_TRANS_CANCEL_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CmdID.Length != 0) {
        CmdID = other.CmdID;
      }
      if (other.CancelAction != 0) {
        CancelAction = other.CancelAction;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CmdID = input.ReadString();
            break;
          }
          case 16: {
            cancelAction_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CancelActionType) input.ReadEnum();
            break;
          }
          case 24: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FromToAdr : pb::IMessage<FromToAdr> {
    private static readonly pb::MessageParser<FromToAdr> _parser = new pb::MessageParser<FromToAdr>(() => new FromToAdr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromToAdr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromToAdr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromToAdr(FromToAdr other) : this() {
      from_ = other.from_;
      to_ = other.to_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromToAdr Clone() {
      return new FromToAdr(this);
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromToAdr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromToAdr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromToAdr other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuideInfo : pb::IMessage<GuideInfo> {
    private static readonly pb::MessageParser<GuideInfo> _parser = new pb::MessageParser<GuideInfo>(() => new GuideInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo(GuideInfo other) : this() {
      FromTo = other.fromTo_ != null ? other.FromTo.Clone() : null;
      guideSections_ = other.guideSections_.Clone();
      guideAddresses_ = other.guideAddresses_.Clone();
      distance_ = other.distance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfo Clone() {
      return new GuideInfo(this);
    }

    /// <summary>Field number for the "FromTo" field.</summary>
    public const int FromToFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr fromTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr FromTo {
      get { return fromTo_; }
      set {
        fromTo_ = value;
      }
    }

    /// <summary>Field number for the "GuideSections" field.</summary>
    public const int GuideSectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_guideSections_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> guideSections_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSections {
      get { return guideSections_; }
    }

    /// <summary>Field number for the "GuideAddresses" field.</summary>
    public const int GuideAddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_guideAddresses_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> guideAddresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddresses {
      get { return guideAddresses_; }
    }

    /// <summary>Field number for the "Distance" field.</summary>
    public const int DistanceFieldNumber = 4;
    private uint distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FromTo, other.FromTo)) return false;
      if(!guideSections_.Equals(other.guideSections_)) return false;
      if(!guideAddresses_.Equals(other.guideAddresses_)) return false;
      if (Distance != other.Distance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fromTo_ != null) hash ^= FromTo.GetHashCode();
      hash ^= guideSections_.GetHashCode();
      hash ^= guideAddresses_.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fromTo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FromTo);
      }
      guideSections_.WriteTo(output, _repeated_guideSections_codec);
      guideAddresses_.WriteTo(output, _repeated_guideAddresses_codec);
      if (Distance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Distance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fromTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromTo);
      }
      size += guideSections_.CalculateSize(_repeated_guideSections_codec);
      size += guideAddresses_.CalculateSize(_repeated_guideAddresses_codec);
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Distance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideInfo other) {
      if (other == null) {
        return;
      }
      if (other.fromTo_ != null) {
        if (fromTo_ == null) {
          fromTo_ = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr();
        }
        FromTo.MergeFrom(other.FromTo);
      }
      guideSections_.Add(other.guideSections_);
      guideAddresses_.Add(other.guideAddresses_);
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fromTo_ == null) {
              fromTo_ = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr();
            }
            input.ReadMessage(fromTo_);
            break;
          }
          case 18: {
            guideSections_.AddEntriesFrom(input, _repeated_guideSections_codec);
            break;
          }
          case 26: {
            guideAddresses_.AddEntriesFrom(input, _repeated_guideAddresses_codec);
            break;
          }
          case 32: {
            Distance = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_138_GUIDE_INFO_REQUEST : pb::IMessage<ID_138_GUIDE_INFO_REQUEST> {
    private static readonly pb::MessageParser<ID_138_GUIDE_INFO_REQUEST> _parser = new pb::MessageParser<ID_138_GUIDE_INFO_REQUEST>(() => new ID_138_GUIDE_INFO_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_138_GUIDE_INFO_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_GUIDE_INFO_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_GUIDE_INFO_REQUEST(ID_138_GUIDE_INFO_REQUEST other) : this() {
      fromToAdrList_ = other.fromToAdrList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_138_GUIDE_INFO_REQUEST Clone() {
      return new ID_138_GUIDE_INFO_REQUEST(this);
    }

    /// <summary>Field number for the "FromToAdrList" field.</summary>
    public const int FromToAdrListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr> _repeated_fromToAdrList_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr> fromToAdrList_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.FromToAdr> FromToAdrList {
      get { return fromToAdrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_138_GUIDE_INFO_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_138_GUIDE_INFO_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fromToAdrList_.Equals(other.fromToAdrList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fromToAdrList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fromToAdrList_.WriteTo(output, _repeated_fromToAdrList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fromToAdrList_.CalculateSize(_repeated_fromToAdrList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_138_GUIDE_INFO_REQUEST other) {
      if (other == null) {
        return;
      }
      fromToAdrList_.Add(other.fromToAdrList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fromToAdrList_.AddEntriesFrom(input, _repeated_fromToAdrList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_38_GUIDE_INFO_RESPONSE : pb::IMessage<ID_38_GUIDE_INFO_RESPONSE> {
    private static readonly pb::MessageParser<ID_38_GUIDE_INFO_RESPONSE> _parser = new pb::MessageParser<ID_38_GUIDE_INFO_RESPONSE>(() => new ID_38_GUIDE_INFO_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_38_GUIDE_INFO_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_GUIDE_INFO_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_GUIDE_INFO_RESPONSE(ID_38_GUIDE_INFO_RESPONSE other) : this() {
      guideInfoList_ = other.guideInfoList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_38_GUIDE_INFO_RESPONSE Clone() {
      return new ID_38_GUIDE_INFO_RESPONSE(this);
    }

    /// <summary>Field number for the "GuideInfoList" field.</summary>
    public const int GuideInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo> _repeated_guideInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo> guideInfoList_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.GuideInfo> GuideInfoList {
      get { return guideInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_38_GUIDE_INFO_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_38_GUIDE_INFO_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guideInfoList_.Equals(other.guideInfoList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guideInfoList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guideInfoList_.WriteTo(output, _repeated_guideInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guideInfoList_.CalculateSize(_repeated_guideInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_38_GUIDE_INFO_RESPONSE other) {
      if (other == null) {
        return;
      }
      guideInfoList_.Add(other.guideInfoList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guideInfoList_.AddEntriesFrom(input, _repeated_guideInfoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_39_PAUSE_REQUEST : pb::IMessage<ID_39_PAUSE_REQUEST> {
    private static readonly pb::MessageParser<ID_39_PAUSE_REQUEST> _parser = new pb::MessageParser<ID_39_PAUSE_REQUEST>(() => new ID_39_PAUSE_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_39_PAUSE_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST(ID_39_PAUSE_REQUEST other) : this() {
      eventType_ = other.eventType_;
      pauseType_ = other.pauseType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_39_PAUSE_REQUEST Clone() {
      return new ID_39_PAUSE_REQUEST(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "PauseType" field.</summary>
    public const int PauseTypeFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseType pauseType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseType PauseType {
      get { return pauseType_; }
      set {
        pauseType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_39_PAUSE_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_39_PAUSE_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (PauseType != other.PauseType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (PauseType != 0) hash ^= PauseType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (PauseType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PauseType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (PauseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_39_PAUSE_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.PauseType != 0) {
        PauseType = other.PauseType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent) input.ReadEnum();
            break;
          }
          case 16: {
            pauseType_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_139_PAUSE_RESPONSE : pb::IMessage<ID_139_PAUSE_RESPONSE> {
    private static readonly pb::MessageParser<ID_139_PAUSE_RESPONSE> _parser = new pb::MessageParser<ID_139_PAUSE_RESPONSE>(() => new ID_139_PAUSE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_139_PAUSE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE(ID_139_PAUSE_RESPONSE other) : this() {
      eventType_ = other.eventType_;
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_139_PAUSE_RESPONSE Clone() {
      return new ID_139_PAUSE_RESPONSE(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 2;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_139_PAUSE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_139_PAUSE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (ReplyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_139_PAUSE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.PauseEvent) input.ReadEnum();
            break;
          }
          case 16: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_41_MODE_CHANGE_REQ : pb::IMessage<ID_41_MODE_CHANGE_REQ> {
    private static readonly pb::MessageParser<ID_41_MODE_CHANGE_REQ> _parser = new pb::MessageParser<ID_41_MODE_CHANGE_REQ>(() => new ID_41_MODE_CHANGE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_41_MODE_CHANGE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ(ID_41_MODE_CHANGE_REQ other) : this() {
      operatingVHMode_ = other.operatingVHMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_41_MODE_CHANGE_REQ Clone() {
      return new ID_41_MODE_CHANGE_REQ(this);
    }

    /// <summary>Field number for the "OperatingVHMode" field.</summary>
    public const int OperatingVHModeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingVHMode operatingVHMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingVHMode OperatingVHMode {
      get { return operatingVHMode_; }
      set {
        operatingVHMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_41_MODE_CHANGE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_41_MODE_CHANGE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperatingVHMode != other.OperatingVHMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperatingVHMode != 0) hash ^= OperatingVHMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperatingVHMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OperatingVHMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperatingVHMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingVHMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_41_MODE_CHANGE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OperatingVHMode != 0) {
        OperatingVHMode = other.OperatingVHMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operatingVHMode_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingVHMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_141_MODE_CHANGE_RESPONSE : pb::IMessage<ID_141_MODE_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE>(() => new ID_141_MODE_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE(ID_141_MODE_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_141_MODE_CHANGE_RESPONSE Clone() {
      return new ID_141_MODE_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_141_MODE_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_141_MODE_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_141_MODE_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_43_STATUS_REQUEST : pb::IMessage<ID_43_STATUS_REQUEST> {
    private static readonly pb::MessageParser<ID_43_STATUS_REQUEST> _parser = new pb::MessageParser<ID_43_STATUS_REQUEST>(() => new ID_43_STATUS_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_43_STATUS_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST(ID_43_STATUS_REQUEST other) : this() {
      systemTime_ = other.systemTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_43_STATUS_REQUEST Clone() {
      return new ID_43_STATUS_REQUEST(this);
    }

    /// <summary>Field number for the "SystemTime" field.</summary>
    public const int SystemTimeFieldNumber = 1;
    private string systemTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemTime {
      get { return systemTime_; }
      set {
        systemTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_43_STATUS_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_43_STATUS_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SystemTime != other.SystemTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SystemTime.Length != 0) hash ^= SystemTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SystemTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SystemTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SystemTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_43_STATUS_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.SystemTime.Length != 0) {
        SystemTime = other.SystemTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SystemTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_143_STATUS_RESPONSE : pb::IMessage<ID_143_STATUS_RESPONSE> {
    private static readonly pb::MessageParser<ID_143_STATUS_RESPONSE> _parser = new pb::MessageParser<ID_143_STATUS_RESPONSE>(() => new ID_143_STATUS_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_143_STATUS_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE(ID_143_STATUS_RESPONSE other) : this() {
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      modeStatus_ = other.modeStatus_;
      actionStatus_ = other.actionStatus_;
      powerStatus_ = other.powerStatus_;
      obstacleStatus_ = other.obstacleStatus_;
      reserveStatus_ = other.reserveStatus_;
      blockingStatus_ = other.blockingStatus_;
      pauseStatus_ = other.pauseStatus_;
      errorStatus_ = other.errorStatus_;
      secDistance_ = other.secDistance_;
      obstDistance_ = other.obstDistance_;
      obstVehicleID_ = other.obstVehicleID_;
      reserveInfos_ = other.reserveInfos_.Clone();
      stoppedBlockID_ = other.stoppedBlockID_;
      earthquakePauseTatus_ = other.earthquakePauseTatus_;
      safetyPauseStatus_ = other.safetyPauseStatus_;
      cmdId1_ = other.cmdId1_;
      cmsState1_ = other.cmsState1_;
      cmdId2_ = other.cmdId2_;
      cmsState2_ = other.cmsState2_;
      hasCstL_ = other.hasCstL_;
      cstIdL_ = other.cstIdL_;
      hasCstR_ = other.hasCstR_;
      cstIdR_ = other.cstIdR_;
      drivingDirection_ = other.drivingDirection_;
      steeringWheel_ = other.steeringWheel_;
      batteryCapacity_ = other.batteryCapacity_;
      chargeStatus_ = other.chargeStatus_;
      batteryTemperature_ = other.batteryTemperature_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      directionAngle_ = other.directionAngle_;
      vehicleAngle_ = other.vehicleAngle_;
      speed_ = other.speed_;
      willPassGuideSection_ = other.willPassGuideSection_.Clone();
      systemTime_ = other.systemTime_;
      shelfStatusL_ = other.shelfStatusL_;
      shelfStatusR_ = other.shelfStatusR_;
      currentExcuteCmdId_ = other.currentExcuteCmdId_;
      opPauseStatus_ = other.opPauseStatus_;
      cmdId3_ = other.cmdId3_;
      cmsState3_ = other.cmsState3_;
      cmdId4_ = other.cmdId4_;
      cmsState4_ = other.cmsState4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_143_STATUS_RESPONSE Clone() {
      return new ID_143_STATUS_RESPONSE(this);
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 1;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 2;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModeStatus" field.</summary>
    public const int ModeStatusFieldNumber = 3;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus modeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus ModeStatus {
      get { return modeStatus_; }
      set {
        modeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ActionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 4;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus actionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "PowerStatus" field.</summary>
    public const int PowerStatusFieldNumber = 5;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus powerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus PowerStatus {
      get { return powerStatus_; }
      set {
        powerStatus_ = value;
      }
    }

    /// <summary>Field number for the "ObstacleStatus" field.</summary>
    public const int ObstacleStatusFieldNumber = 6;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle obstacleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveStatus" field.</summary>
    public const int ReserveStatusFieldNumber = 7;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle reserveStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle ReserveStatus {
      get { return reserveStatus_; }
      set {
        reserveStatus_ = value;
      }
    }

    /// <summary>Field number for the "BlockingStatus" field.</summary>
    public const int BlockingStatusFieldNumber = 8;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle blockingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle BlockingStatus {
      get { return blockingStatus_; }
      set {
        blockingStatus_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 9;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrorStatus" field.</summary>
    public const int ErrorStatusFieldNumber = 10;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle errorStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle ErrorStatus {
      get { return errorStatus_; }
      set {
        errorStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 11;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Distance" field.</summary>
    public const int ObstDistanceFieldNumber = 12;
    private int obstDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstDistance {
      get { return obstDistance_; }
      set {
        obstDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
    public const int ObstVehicleIDFieldNumber = 13;
    private string obstVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstVehicleID {
      get { return obstVehicleID_; }
      set {
        obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(114, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
    public const int StoppedBlockIDFieldNumber = 15;
    private string stoppedBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedBlockID {
      get { return stoppedBlockID_; }
      set {
        stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
    public const int EarthquakePauseTatusFieldNumber = 16;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle earthquakePauseTatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle EarthquakePauseTatus {
      get { return earthquakePauseTatus_; }
      set {
        earthquakePauseTatus_ = value;
      }
    }

    /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
    public const int SafetyPauseStatusFieldNumber = 17;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle safetyPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle SafetyPauseStatus {
      get { return safetyPauseStatus_; }
      set {
        safetyPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "CmdId1" field.</summary>
    public const int CmdId1FieldNumber = 18;
    private string cmdId1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId1 {
      get { return cmdId1_; }
      set {
        cmdId1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_1" field.</summary>
    public const int CmsState1FieldNumber = 19;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState1 {
      get { return cmsState1_; }
      set {
        cmsState1_ = value;
      }
    }

    /// <summary>Field number for the "CmdId2" field.</summary>
    public const int CmdId2FieldNumber = 20;
    private string cmdId2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId2 {
      get { return cmdId2_; }
      set {
        cmdId2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_2" field.</summary>
    public const int CmsState2FieldNumber = 21;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState2 {
      get { return cmsState2_; }
      set {
        cmsState2_ = value;
      }
    }

    /// <summary>Field number for the "HasCst_L" field.</summary>
    public const int HasCstLFieldNumber = 22;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus hasCstL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus HasCstL {
      get { return hasCstL_; }
      set {
        hasCstL_ = value;
      }
    }

    /// <summary>Field number for the "CstIdL" field.</summary>
    public const int CstIdLFieldNumber = 23;
    private string cstIdL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CstIdL {
      get { return cstIdL_; }
      set {
        cstIdL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasCst_R" field.</summary>
    public const int HasCstRFieldNumber = 24;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus hasCstR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus HasCstR {
      get { return hasCstR_; }
      set {
        hasCstR_ = value;
      }
    }

    /// <summary>Field number for the "CstIdR" field.</summary>
    public const int CstIdRFieldNumber = 25;
    private string cstIdR_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CstIdR {
      get { return cstIdR_; }
      set {
        cstIdR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 26;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "Steering_Wheel" field.</summary>
    public const int SteeringWheelFieldNumber = 27;
    private int steeringWheel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SteeringWheel {
      get { return steeringWheel_; }
      set {
        steeringWheel_ = value;
      }
    }

    /// <summary>Field number for the "BatteryCapacity" field.</summary>
    public const int BatteryCapacityFieldNumber = 28;
    private uint batteryCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatteryCapacity {
      get { return batteryCapacity_; }
      set {
        batteryCapacity_ = value;
      }
    }

    /// <summary>Field number for the "ChargeStatus" field.</summary>
    public const int ChargeStatusFieldNumber = 29;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus chargeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus ChargeStatus {
      get { return chargeStatus_; }
      set {
        chargeStatus_ = value;
      }
    }

    /// <summary>Field number for the "BatteryTemperature" field.</summary>
    public const int BatteryTemperatureFieldNumber = 30;
    private int batteryTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatteryTemperature {
      get { return batteryTemperature_; }
      set {
        batteryTemperature_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 31;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 32;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "DirectionAngle" field.</summary>
    public const int DirectionAngleFieldNumber = 33;
    private double directionAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DirectionAngle {
      get { return directionAngle_; }
      set {
        directionAngle_ = value;
      }
    }

    /// <summary>Field number for the "VehicleAngle" field.</summary>
    public const int VehicleAngleFieldNumber = 34;
    private double vehicleAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleAngle {
      get { return vehicleAngle_; }
      set {
        vehicleAngle_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 35;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "WillPassGuideSection" field.</summary>
    public const int WillPassGuideSectionFieldNumber = 36;
    private static readonly pb::FieldCodec<string> _repeated_willPassGuideSection_codec
        = pb::FieldCodec.ForString(290);
    private readonly pbc::RepeatedField<string> willPassGuideSection_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WillPassGuideSection {
      get { return willPassGuideSection_; }
    }

    /// <summary>Field number for the "SystemTime" field.</summary>
    public const int SystemTimeFieldNumber = 37;
    private string systemTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemTime {
      get { return systemTime_; }
      set {
        systemTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShelfStatus_L" field.</summary>
    public const int ShelfStatusLFieldNumber = 38;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus shelfStatusL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus ShelfStatusL {
      get { return shelfStatusL_; }
      set {
        shelfStatusL_ = value;
      }
    }

    /// <summary>Field number for the "ShelfStatus_R" field.</summary>
    public const int ShelfStatusRFieldNumber = 39;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus shelfStatusR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus ShelfStatusR {
      get { return shelfStatusR_; }
      set {
        shelfStatusR_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExcuteCmdId" field.</summary>
    public const int CurrentExcuteCmdIdFieldNumber = 40;
    private string currentExcuteCmdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentExcuteCmdId {
      get { return currentExcuteCmdId_; }
      set {
        currentExcuteCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpPauseStatus" field.</summary>
    public const int OpPauseStatusFieldNumber = 41;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle opPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle OpPauseStatus {
      get { return opPauseStatus_; }
      set {
        opPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "CmdId3" field.</summary>
    public const int CmdId3FieldNumber = 42;
    private string cmdId3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId3 {
      get { return cmdId3_; }
      set {
        cmdId3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_3" field.</summary>
    public const int CmsState3FieldNumber = 43;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState3_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState3 {
      get { return cmsState3_; }
      set {
        cmsState3_ = value;
      }
    }

    /// <summary>Field number for the "CmdId4" field.</summary>
    public const int CmdId4FieldNumber = 44;
    private string cmdId4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId4 {
      get { return cmdId4_; }
      set {
        cmdId4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_4" field.</summary>
    public const int CmsState4FieldNumber = 45;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState4_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState4 {
      get { return cmsState4_; }
      set {
        cmsState4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_143_STATUS_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_143_STATUS_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (ModeStatus != other.ModeStatus) return false;
      if (ActionStatus != other.ActionStatus) return false;
      if (PowerStatus != other.PowerStatus) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (ReserveStatus != other.ReserveStatus) return false;
      if (BlockingStatus != other.BlockingStatus) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (ErrorStatus != other.ErrorStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (ObstDistance != other.ObstDistance) return false;
      if (ObstVehicleID != other.ObstVehicleID) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (StoppedBlockID != other.StoppedBlockID) return false;
      if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
      if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
      if (CmdId1 != other.CmdId1) return false;
      if (CmsState1 != other.CmsState1) return false;
      if (CmdId2 != other.CmdId2) return false;
      if (CmsState2 != other.CmsState2) return false;
      if (HasCstL != other.HasCstL) return false;
      if (CstIdL != other.CstIdL) return false;
      if (HasCstR != other.HasCstR) return false;
      if (CstIdR != other.CstIdR) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (SteeringWheel != other.SteeringWheel) return false;
      if (BatteryCapacity != other.BatteryCapacity) return false;
      if (ChargeStatus != other.ChargeStatus) return false;
      if (BatteryTemperature != other.BatteryTemperature) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (DirectionAngle != other.DirectionAngle) return false;
      if (VehicleAngle != other.VehicleAngle) return false;
      if (Speed != other.Speed) return false;
      if(!willPassGuideSection_.Equals(other.willPassGuideSection_)) return false;
      if (SystemTime != other.SystemTime) return false;
      if (ShelfStatusL != other.ShelfStatusL) return false;
      if (ShelfStatusR != other.ShelfStatusR) return false;
      if (CurrentExcuteCmdId != other.CurrentExcuteCmdId) return false;
      if (OpPauseStatus != other.OpPauseStatus) return false;
      if (CmdId3 != other.CmdId3) return false;
      if (CmsState3 != other.CmsState3) return false;
      if (CmdId4 != other.CmdId4) return false;
      if (CmsState4 != other.CmsState4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
      if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
      if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (ReserveStatus != 0) hash ^= ReserveStatus.GetHashCode();
      if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
      if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
      if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
      if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
      if (CmdId1.Length != 0) hash ^= CmdId1.GetHashCode();
      if (CmsState1 != 0) hash ^= CmsState1.GetHashCode();
      if (CmdId2.Length != 0) hash ^= CmdId2.GetHashCode();
      if (CmsState2 != 0) hash ^= CmsState2.GetHashCode();
      if (HasCstL != 0) hash ^= HasCstL.GetHashCode();
      if (CstIdL.Length != 0) hash ^= CstIdL.GetHashCode();
      if (HasCstR != 0) hash ^= HasCstR.GetHashCode();
      if (CstIdR.Length != 0) hash ^= CstIdR.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (SteeringWheel != 0) hash ^= SteeringWheel.GetHashCode();
      if (BatteryCapacity != 0) hash ^= BatteryCapacity.GetHashCode();
      if (ChargeStatus != 0) hash ^= ChargeStatus.GetHashCode();
      if (BatteryTemperature != 0) hash ^= BatteryTemperature.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (DirectionAngle != 0D) hash ^= DirectionAngle.GetHashCode();
      if (VehicleAngle != 0D) hash ^= VehicleAngle.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      hash ^= willPassGuideSection_.GetHashCode();
      if (SystemTime.Length != 0) hash ^= SystemTime.GetHashCode();
      if (ShelfStatusL != 0) hash ^= ShelfStatusL.GetHashCode();
      if (ShelfStatusR != 0) hash ^= ShelfStatusR.GetHashCode();
      if (CurrentExcuteCmdId.Length != 0) hash ^= CurrentExcuteCmdId.GetHashCode();
      if (OpPauseStatus != 0) hash ^= OpPauseStatus.GetHashCode();
      if (CmdId3.Length != 0) hash ^= CmdId3.GetHashCode();
      if (CmsState3 != 0) hash ^= CmsState3.GetHashCode();
      if (CmdId4.Length != 0) hash ^= CmdId4.GetHashCode();
      if (CmsState4 != 0) hash ^= CmsState4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentSecID);
      }
      if (ModeStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ObstacleStatus);
      }
      if (ReserveStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ReserveStatus);
      }
      if (BlockingStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) BlockingStatus);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ErrorStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(SecDistance);
      }
      if (ObstDistance != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ObstVehicleID);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (StoppedBlockID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StoppedBlockID);
      }
      if (EarthquakePauseTatus != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) SafetyPauseStatus);
      }
      if (CmdId1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CmdId1);
      }
      if (CmsState1 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) CmsState1);
      }
      if (CmdId2.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CmdId2);
      }
      if (CmsState2 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) CmsState2);
      }
      if (HasCstL != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) HasCstL);
      }
      if (CstIdL.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(CstIdL);
      }
      if (HasCstR != 0) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) HasCstR);
      }
      if (CstIdR.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CstIdR);
      }
      if (DrivingDirection != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) DrivingDirection);
      }
      if (SteeringWheel != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SteeringWheel);
      }
      if (BatteryCapacity != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(BatteryCapacity);
      }
      if (ChargeStatus != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) ChargeStatus);
      }
      if (BatteryTemperature != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(BatteryTemperature);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(YAxis);
      }
      if (DirectionAngle != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(DirectionAngle);
      }
      if (VehicleAngle != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(VehicleAngle);
      }
      if (Speed != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(Speed);
      }
      willPassGuideSection_.WriteTo(output, _repeated_willPassGuideSection_codec);
      if (SystemTime.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SystemTime);
      }
      if (ShelfStatusL != 0) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(CurrentExcuteCmdId);
      }
      if (OpPauseStatus != 0) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) OpPauseStatus);
      }
      if (CmdId3.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(CmdId3);
      }
      if (CmsState3 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) CmsState3);
      }
      if (CmdId4.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(CmdId4);
      }
      if (CmsState4 != 0) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) CmsState4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (ModeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObstacleStatus);
      }
      if (ReserveStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReserveStatus);
      }
      if (BlockingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockingStatus);
      }
      if (PauseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (ObstDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (StoppedBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
      }
      if (EarthquakePauseTatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyPauseStatus);
      }
      if (CmdId1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId1);
      }
      if (CmsState1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState1);
      }
      if (CmdId2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId2);
      }
      if (CmsState2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState2);
      }
      if (HasCstL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCstL);
      }
      if (CstIdL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CstIdL);
      }
      if (HasCstR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCstR);
      }
      if (CstIdR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CstIdR);
      }
      if (DrivingDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (SteeringWheel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SteeringWheel);
      }
      if (BatteryCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BatteryCapacity);
      }
      if (ChargeStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChargeStatus);
      }
      if (BatteryTemperature != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BatteryTemperature);
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      if (DirectionAngle != 0D) {
        size += 2 + 8;
      }
      if (VehicleAngle != 0D) {
        size += 2 + 8;
      }
      if (Speed != 0D) {
        size += 2 + 8;
      }
      size += willPassGuideSection_.CalculateSize(_repeated_willPassGuideSection_codec);
      if (SystemTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SystemTime);
      }
      if (ShelfStatusL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentExcuteCmdId);
      }
      if (OpPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpPauseStatus);
      }
      if (CmdId3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId3);
      }
      if (CmsState3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState3);
      }
      if (CmdId4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId4);
      }
      if (CmsState4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_143_STATUS_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.ModeStatus != 0) {
        ModeStatus = other.ModeStatus;
      }
      if (other.ActionStatus != 0) {
        ActionStatus = other.ActionStatus;
      }
      if (other.PowerStatus != 0) {
        PowerStatus = other.PowerStatus;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.ReserveStatus != 0) {
        ReserveStatus = other.ReserveStatus;
      }
      if (other.BlockingStatus != 0) {
        BlockingStatus = other.BlockingStatus;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.ErrorStatus != 0) {
        ErrorStatus = other.ErrorStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.ObstDistance != 0) {
        ObstDistance = other.ObstDistance;
      }
      if (other.ObstVehicleID.Length != 0) {
        ObstVehicleID = other.ObstVehicleID;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.StoppedBlockID.Length != 0) {
        StoppedBlockID = other.StoppedBlockID;
      }
      if (other.EarthquakePauseTatus != 0) {
        EarthquakePauseTatus = other.EarthquakePauseTatus;
      }
      if (other.SafetyPauseStatus != 0) {
        SafetyPauseStatus = other.SafetyPauseStatus;
      }
      if (other.CmdId1.Length != 0) {
        CmdId1 = other.CmdId1;
      }
      if (other.CmsState1 != 0) {
        CmsState1 = other.CmsState1;
      }
      if (other.CmdId2.Length != 0) {
        CmdId2 = other.CmdId2;
      }
      if (other.CmsState2 != 0) {
        CmsState2 = other.CmsState2;
      }
      if (other.HasCstL != 0) {
        HasCstL = other.HasCstL;
      }
      if (other.CstIdL.Length != 0) {
        CstIdL = other.CstIdL;
      }
      if (other.HasCstR != 0) {
        HasCstR = other.HasCstR;
      }
      if (other.CstIdR.Length != 0) {
        CstIdR = other.CstIdR;
      }
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.SteeringWheel != 0) {
        SteeringWheel = other.SteeringWheel;
      }
      if (other.BatteryCapacity != 0) {
        BatteryCapacity = other.BatteryCapacity;
      }
      if (other.ChargeStatus != 0) {
        ChargeStatus = other.ChargeStatus;
      }
      if (other.BatteryTemperature != 0) {
        BatteryTemperature = other.BatteryTemperature;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.DirectionAngle != 0D) {
        DirectionAngle = other.DirectionAngle;
      }
      if (other.VehicleAngle != 0D) {
        VehicleAngle = other.VehicleAngle;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      willPassGuideSection_.Add(other.willPassGuideSection_);
      if (other.SystemTime.Length != 0) {
        SystemTime = other.SystemTime;
      }
      if (other.ShelfStatusL != 0) {
        ShelfStatusL = other.ShelfStatusL;
      }
      if (other.ShelfStatusR != 0) {
        ShelfStatusR = other.ShelfStatusR;
      }
      if (other.CurrentExcuteCmdId.Length != 0) {
        CurrentExcuteCmdId = other.CurrentExcuteCmdId;
      }
      if (other.OpPauseStatus != 0) {
        OpPauseStatus = other.OpPauseStatus;
      }
      if (other.CmdId3.Length != 0) {
        CmdId3 = other.CmdId3;
      }
      if (other.CmsState3 != 0) {
        CmsState3 = other.CmsState3;
      }
      if (other.CmdId4.Length != 0) {
        CmdId4 = other.CmdId4;
      }
      if (other.CmsState4 != 0) {
        CmsState4 = other.CmsState4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 18: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 24: {
            modeStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 32: {
            actionStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 40: {
            powerStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            obstacleStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 56: {
            reserveStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 64: {
            blockingStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 72: {
            pauseStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 80: {
            errorStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 88: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 96: {
            ObstDistance = input.ReadInt32();
            break;
          }
          case 106: {
            ObstVehicleID = input.ReadString();
            break;
          }
          case 114: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 122: {
            StoppedBlockID = input.ReadString();
            break;
          }
          case 128: {
            earthquakePauseTatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 136: {
            safetyPauseStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 146: {
            CmdId1 = input.ReadString();
            break;
          }
          case 152: {
            cmsState1_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
          case 162: {
            CmdId2 = input.ReadString();
            break;
          }
          case 168: {
            cmsState2_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
          case 176: {
            hasCstL_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 186: {
            CstIdL = input.ReadString();
            break;
          }
          case 192: {
            hasCstR_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 202: {
            CstIdR = input.ReadString();
            break;
          }
          case 208: {
            drivingDirection_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 216: {
            SteeringWheel = input.ReadInt32();
            break;
          }
          case 224: {
            BatteryCapacity = input.ReadUInt32();
            break;
          }
          case 232: {
            chargeStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus) input.ReadEnum();
            break;
          }
          case 240: {
            BatteryTemperature = input.ReadInt32();
            break;
          }
          case 249: {
            XAxis = input.ReadDouble();
            break;
          }
          case 257: {
            YAxis = input.ReadDouble();
            break;
          }
          case 265: {
            DirectionAngle = input.ReadDouble();
            break;
          }
          case 273: {
            VehicleAngle = input.ReadDouble();
            break;
          }
          case 281: {
            Speed = input.ReadDouble();
            break;
          }
          case 290: {
            willPassGuideSection_.AddEntriesFrom(input, _repeated_willPassGuideSection_codec);
            break;
          }
          case 298: {
            SystemTime = input.ReadString();
            break;
          }
          case 304: {
            shelfStatusL_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 312: {
            shelfStatusR_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 322: {
            CurrentExcuteCmdId = input.ReadString();
            break;
          }
          case 328: {
            opPauseStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 338: {
            CmdId3 = input.ReadString();
            break;
          }
          case 344: {
            cmsState3_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
          case 354: {
            CmdId4 = input.ReadString();
            break;
          }
          case 360: {
            cmsState4_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_144_STATUS_CHANGE_REP : pb::IMessage<ID_144_STATUS_CHANGE_REP> {
    private static readonly pb::MessageParser<ID_144_STATUS_CHANGE_REP> _parser = new pb::MessageParser<ID_144_STATUS_CHANGE_REP>(() => new ID_144_STATUS_CHANGE_REP());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_144_STATUS_CHANGE_REP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP(ID_144_STATUS_CHANGE_REP other) : this() {
      currentAdrID_ = other.currentAdrID_;
      currentSecID_ = other.currentSecID_;
      modeStatus_ = other.modeStatus_;
      actionStatus_ = other.actionStatus_;
      powerStatus_ = other.powerStatus_;
      obstacleStatus_ = other.obstacleStatus_;
      reserveStatus_ = other.reserveStatus_;
      blockingStatus_ = other.blockingStatus_;
      pauseStatus_ = other.pauseStatus_;
      errorStatus_ = other.errorStatus_;
      secDistance_ = other.secDistance_;
      obstDistance_ = other.obstDistance_;
      obstVehicleID_ = other.obstVehicleID_;
      reserveInfos_ = other.reserveInfos_.Clone();
      stoppedBlockID_ = other.stoppedBlockID_;
      earthquakePauseTatus_ = other.earthquakePauseTatus_;
      safetyPauseStatus_ = other.safetyPauseStatus_;
      cmdId1_ = other.cmdId1_;
      cmsState1_ = other.cmsState1_;
      cmdId2_ = other.cmdId2_;
      cmsState2_ = other.cmsState2_;
      hasCstL_ = other.hasCstL_;
      cstIdL_ = other.cstIdL_;
      hasCstR_ = other.hasCstR_;
      cstIdR_ = other.cstIdR_;
      drivingDirection_ = other.drivingDirection_;
      steeringWheel_ = other.steeringWheel_;
      batteryCapacity_ = other.batteryCapacity_;
      chargeStatus_ = other.chargeStatus_;
      batteryTemperature_ = other.batteryTemperature_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      directionAngle_ = other.directionAngle_;
      vehicleAngle_ = other.vehicleAngle_;
      speed_ = other.speed_;
      willPassGuideSection_ = other.willPassGuideSection_.Clone();
      systemTime_ = other.systemTime_;
      shelfStatusL_ = other.shelfStatusL_;
      shelfStatusR_ = other.shelfStatusR_;
      currentExcuteCmdId_ = other.currentExcuteCmdId_;
      opPauseStatus_ = other.opPauseStatus_;
      cmdId3_ = other.cmdId3_;
      cmsState3_ = other.cmsState3_;
      cmdId4_ = other.cmdId4_;
      cmsState4_ = other.cmsState4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_144_STATUS_CHANGE_REP Clone() {
      return new ID_144_STATUS_CHANGE_REP(this);
    }

    /// <summary>Field number for the "CurrentAdrID" field.</summary>
    public const int CurrentAdrIDFieldNumber = 1;
    private string currentAdrID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAdrID {
      get { return currentAdrID_; }
      set {
        currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSecID" field.</summary>
    public const int CurrentSecIDFieldNumber = 2;
    private string currentSecID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSecID {
      get { return currentSecID_; }
      set {
        currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModeStatus" field.</summary>
    public const int ModeStatusFieldNumber = 3;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus modeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus ModeStatus {
      get { return modeStatus_; }
      set {
        modeStatus_ = value;
      }
    }

    /// <summary>Field number for the "ActionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 4;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus actionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "PowerStatus" field.</summary>
    public const int PowerStatusFieldNumber = 5;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus powerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus PowerStatus {
      get { return powerStatus_; }
      set {
        powerStatus_ = value;
      }
    }

    /// <summary>Field number for the "ObstacleStatus" field.</summary>
    public const int ObstacleStatusFieldNumber = 6;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle obstacleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle ObstacleStatus {
      get { return obstacleStatus_; }
      set {
        obstacleStatus_ = value;
      }
    }

    /// <summary>Field number for the "ReserveStatus" field.</summary>
    public const int ReserveStatusFieldNumber = 7;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle reserveStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle ReserveStatus {
      get { return reserveStatus_; }
      set {
        reserveStatus_ = value;
      }
    }

    /// <summary>Field number for the "BlockingStatus" field.</summary>
    public const int BlockingStatusFieldNumber = 8;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle blockingStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle BlockingStatus {
      get { return blockingStatus_; }
      set {
        blockingStatus_ = value;
      }
    }

    /// <summary>Field number for the "PauseStatus" field.</summary>
    public const int PauseStatusFieldNumber = 9;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle pauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle PauseStatus {
      get { return pauseStatus_; }
      set {
        pauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrorStatus" field.</summary>
    public const int ErrorStatusFieldNumber = 10;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle errorStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle ErrorStatus {
      get { return errorStatus_; }
      set {
        errorStatus_ = value;
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 11;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Distance" field.</summary>
    public const int ObstDistanceFieldNumber = 12;
    private int obstDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObstDistance {
      get { return obstDistance_; }
      set {
        obstDistance_ = value;
      }
    }

    /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
    public const int ObstVehicleIDFieldNumber = 13;
    private string obstVehicleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstVehicleID {
      get { return obstVehicleID_; }
      set {
        obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReserveInfos" field.</summary>
    public const int ReserveInfosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> _repeated_reserveInfos_codec
        = pb::FieldCodec.ForMessage(114, global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> reserveInfos_ = new pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ReserveInfo> ReserveInfos {
      get { return reserveInfos_; }
    }

    /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
    public const int StoppedBlockIDFieldNumber = 15;
    private string stoppedBlockID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoppedBlockID {
      get { return stoppedBlockID_; }
      set {
        stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
    public const int EarthquakePauseTatusFieldNumber = 16;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle earthquakePauseTatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle EarthquakePauseTatus {
      get { return earthquakePauseTatus_; }
      set {
        earthquakePauseTatus_ = value;
      }
    }

    /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
    public const int SafetyPauseStatusFieldNumber = 17;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle safetyPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle SafetyPauseStatus {
      get { return safetyPauseStatus_; }
      set {
        safetyPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "CmdId1" field.</summary>
    public const int CmdId1FieldNumber = 18;
    private string cmdId1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId1 {
      get { return cmdId1_; }
      set {
        cmdId1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_1" field.</summary>
    public const int CmsState1FieldNumber = 19;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState1 {
      get { return cmsState1_; }
      set {
        cmsState1_ = value;
      }
    }

    /// <summary>Field number for the "CmdId2" field.</summary>
    public const int CmdId2FieldNumber = 20;
    private string cmdId2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId2 {
      get { return cmdId2_; }
      set {
        cmdId2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_2" field.</summary>
    public const int CmsState2FieldNumber = 21;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState2 {
      get { return cmsState2_; }
      set {
        cmsState2_ = value;
      }
    }

    /// <summary>Field number for the "HasCst_L" field.</summary>
    public const int HasCstLFieldNumber = 22;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus hasCstL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus HasCstL {
      get { return hasCstL_; }
      set {
        hasCstL_ = value;
      }
    }

    /// <summary>Field number for the "CstIdL" field.</summary>
    public const int CstIdLFieldNumber = 23;
    private string cstIdL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CstIdL {
      get { return cstIdL_; }
      set {
        cstIdL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasCst_R" field.</summary>
    public const int HasCstRFieldNumber = 24;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus hasCstR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus HasCstR {
      get { return hasCstR_; }
      set {
        hasCstR_ = value;
      }
    }

    /// <summary>Field number for the "CstIdR" field.</summary>
    public const int CstIdRFieldNumber = 25;
    private string cstIdR_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CstIdR {
      get { return cstIdR_; }
      set {
        cstIdR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DrivingDirection" field.</summary>
    public const int DrivingDirectionFieldNumber = 26;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction drivingDirection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction DrivingDirection {
      get { return drivingDirection_; }
      set {
        drivingDirection_ = value;
      }
    }

    /// <summary>Field number for the "Steering_Wheel" field.</summary>
    public const int SteeringWheelFieldNumber = 27;
    private int steeringWheel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SteeringWheel {
      get { return steeringWheel_; }
      set {
        steeringWheel_ = value;
      }
    }

    /// <summary>Field number for the "BatteryCapacity" field.</summary>
    public const int BatteryCapacityFieldNumber = 28;
    private uint batteryCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatteryCapacity {
      get { return batteryCapacity_; }
      set {
        batteryCapacity_ = value;
      }
    }

    /// <summary>Field number for the "ChargeStatus" field.</summary>
    public const int ChargeStatusFieldNumber = 29;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus chargeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus ChargeStatus {
      get { return chargeStatus_; }
      set {
        chargeStatus_ = value;
      }
    }

    /// <summary>Field number for the "BatteryTemperature" field.</summary>
    public const int BatteryTemperatureFieldNumber = 30;
    private int batteryTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatteryTemperature {
      get { return batteryTemperature_; }
      set {
        batteryTemperature_ = value;
      }
    }

    /// <summary>Field number for the "XAxis" field.</summary>
    public const int XAxisFieldNumber = 31;
    private double xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "YAxis" field.</summary>
    public const int YAxisFieldNumber = 32;
    private double yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "DirectionAngle" field.</summary>
    public const int DirectionAngleFieldNumber = 33;
    private double directionAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DirectionAngle {
      get { return directionAngle_; }
      set {
        directionAngle_ = value;
      }
    }

    /// <summary>Field number for the "VehicleAngle" field.</summary>
    public const int VehicleAngleFieldNumber = 34;
    private double vehicleAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VehicleAngle {
      get { return vehicleAngle_; }
      set {
        vehicleAngle_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 35;
    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "WillPassGuideSection" field.</summary>
    public const int WillPassGuideSectionFieldNumber = 36;
    private static readonly pb::FieldCodec<string> _repeated_willPassGuideSection_codec
        = pb::FieldCodec.ForString(290);
    private readonly pbc::RepeatedField<string> willPassGuideSection_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WillPassGuideSection {
      get { return willPassGuideSection_; }
    }

    /// <summary>Field number for the "SystemTime" field.</summary>
    public const int SystemTimeFieldNumber = 37;
    private string systemTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SystemTime {
      get { return systemTime_; }
      set {
        systemTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShelfStatus_L" field.</summary>
    public const int ShelfStatusLFieldNumber = 38;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus shelfStatusL_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus ShelfStatusL {
      get { return shelfStatusL_; }
      set {
        shelfStatusL_ = value;
      }
    }

    /// <summary>Field number for the "ShelfStatus_R" field.</summary>
    public const int ShelfStatusRFieldNumber = 39;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus shelfStatusR_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus ShelfStatusR {
      get { return shelfStatusR_; }
      set {
        shelfStatusR_ = value;
      }
    }

    /// <summary>Field number for the "CurrentExcuteCmdId" field.</summary>
    public const int CurrentExcuteCmdIdFieldNumber = 40;
    private string currentExcuteCmdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentExcuteCmdId {
      get { return currentExcuteCmdId_; }
      set {
        currentExcuteCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpPauseStatus" field.</summary>
    public const int OpPauseStatusFieldNumber = 41;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle opPauseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle OpPauseStatus {
      get { return opPauseStatus_; }
      set {
        opPauseStatus_ = value;
      }
    }

    /// <summary>Field number for the "CmdId3" field.</summary>
    public const int CmdId3FieldNumber = 42;
    private string cmdId3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId3 {
      get { return cmdId3_; }
      set {
        cmdId3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_3" field.</summary>
    public const int CmsState3FieldNumber = 43;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState3_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState3 {
      get { return cmsState3_; }
      set {
        cmsState3_ = value;
      }
    }

    /// <summary>Field number for the "CmdId4" field.</summary>
    public const int CmdId4FieldNumber = 44;
    private string cmdId4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdId4 {
      get { return cmdId4_; }
      set {
        cmdId4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CmsState_4" field.</summary>
    public const int CmsState4FieldNumber = 45;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState cmsState4_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState CmsState4 {
      get { return cmsState4_; }
      set {
        cmsState4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_144_STATUS_CHANGE_REP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_144_STATUS_CHANGE_REP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentAdrID != other.CurrentAdrID) return false;
      if (CurrentSecID != other.CurrentSecID) return false;
      if (ModeStatus != other.ModeStatus) return false;
      if (ActionStatus != other.ActionStatus) return false;
      if (PowerStatus != other.PowerStatus) return false;
      if (ObstacleStatus != other.ObstacleStatus) return false;
      if (ReserveStatus != other.ReserveStatus) return false;
      if (BlockingStatus != other.BlockingStatus) return false;
      if (PauseStatus != other.PauseStatus) return false;
      if (ErrorStatus != other.ErrorStatus) return false;
      if (SecDistance != other.SecDistance) return false;
      if (ObstDistance != other.ObstDistance) return false;
      if (ObstVehicleID != other.ObstVehicleID) return false;
      if(!reserveInfos_.Equals(other.reserveInfos_)) return false;
      if (StoppedBlockID != other.StoppedBlockID) return false;
      if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
      if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
      if (CmdId1 != other.CmdId1) return false;
      if (CmsState1 != other.CmsState1) return false;
      if (CmdId2 != other.CmdId2) return false;
      if (CmsState2 != other.CmsState2) return false;
      if (HasCstL != other.HasCstL) return false;
      if (CstIdL != other.CstIdL) return false;
      if (HasCstR != other.HasCstR) return false;
      if (CstIdR != other.CstIdR) return false;
      if (DrivingDirection != other.DrivingDirection) return false;
      if (SteeringWheel != other.SteeringWheel) return false;
      if (BatteryCapacity != other.BatteryCapacity) return false;
      if (ChargeStatus != other.ChargeStatus) return false;
      if (BatteryTemperature != other.BatteryTemperature) return false;
      if (XAxis != other.XAxis) return false;
      if (YAxis != other.YAxis) return false;
      if (DirectionAngle != other.DirectionAngle) return false;
      if (VehicleAngle != other.VehicleAngle) return false;
      if (Speed != other.Speed) return false;
      if(!willPassGuideSection_.Equals(other.willPassGuideSection_)) return false;
      if (SystemTime != other.SystemTime) return false;
      if (ShelfStatusL != other.ShelfStatusL) return false;
      if (ShelfStatusR != other.ShelfStatusR) return false;
      if (CurrentExcuteCmdId != other.CurrentExcuteCmdId) return false;
      if (OpPauseStatus != other.OpPauseStatus) return false;
      if (CmdId3 != other.CmdId3) return false;
      if (CmsState3 != other.CmsState3) return false;
      if (CmdId4 != other.CmdId4) return false;
      if (CmsState4 != other.CmsState4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
      if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
      if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
      if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
      if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
      if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
      if (ReserveStatus != 0) hash ^= ReserveStatus.GetHashCode();
      if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
      if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
      if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
      if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
      hash ^= reserveInfos_.GetHashCode();
      if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
      if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
      if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
      if (CmdId1.Length != 0) hash ^= CmdId1.GetHashCode();
      if (CmsState1 != 0) hash ^= CmsState1.GetHashCode();
      if (CmdId2.Length != 0) hash ^= CmdId2.GetHashCode();
      if (CmsState2 != 0) hash ^= CmsState2.GetHashCode();
      if (HasCstL != 0) hash ^= HasCstL.GetHashCode();
      if (CstIdL.Length != 0) hash ^= CstIdL.GetHashCode();
      if (HasCstR != 0) hash ^= HasCstR.GetHashCode();
      if (CstIdR.Length != 0) hash ^= CstIdR.GetHashCode();
      if (DrivingDirection != 0) hash ^= DrivingDirection.GetHashCode();
      if (SteeringWheel != 0) hash ^= SteeringWheel.GetHashCode();
      if (BatteryCapacity != 0) hash ^= BatteryCapacity.GetHashCode();
      if (ChargeStatus != 0) hash ^= ChargeStatus.GetHashCode();
      if (BatteryTemperature != 0) hash ^= BatteryTemperature.GetHashCode();
      if (XAxis != 0D) hash ^= XAxis.GetHashCode();
      if (YAxis != 0D) hash ^= YAxis.GetHashCode();
      if (DirectionAngle != 0D) hash ^= DirectionAngle.GetHashCode();
      if (VehicleAngle != 0D) hash ^= VehicleAngle.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      hash ^= willPassGuideSection_.GetHashCode();
      if (SystemTime.Length != 0) hash ^= SystemTime.GetHashCode();
      if (ShelfStatusL != 0) hash ^= ShelfStatusL.GetHashCode();
      if (ShelfStatusR != 0) hash ^= ShelfStatusR.GetHashCode();
      if (CurrentExcuteCmdId.Length != 0) hash ^= CurrentExcuteCmdId.GetHashCode();
      if (OpPauseStatus != 0) hash ^= OpPauseStatus.GetHashCode();
      if (CmdId3.Length != 0) hash ^= CmdId3.GetHashCode();
      if (CmsState3 != 0) hash ^= CmsState3.GetHashCode();
      if (CmdId4.Length != 0) hash ^= CmdId4.GetHashCode();
      if (CmsState4 != 0) hash ^= CmsState4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentAdrID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrentSecID);
      }
      if (ModeStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ObstacleStatus);
      }
      if (ReserveStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ReserveStatus);
      }
      if (BlockingStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) BlockingStatus);
      }
      if (PauseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ErrorStatus);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(SecDistance);
      }
      if (ObstDistance != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ObstVehicleID);
      }
      reserveInfos_.WriteTo(output, _repeated_reserveInfos_codec);
      if (StoppedBlockID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StoppedBlockID);
      }
      if (EarthquakePauseTatus != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) SafetyPauseStatus);
      }
      if (CmdId1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CmdId1);
      }
      if (CmsState1 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) CmsState1);
      }
      if (CmdId2.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CmdId2);
      }
      if (CmsState2 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) CmsState2);
      }
      if (HasCstL != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) HasCstL);
      }
      if (CstIdL.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(CstIdL);
      }
      if (HasCstR != 0) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) HasCstR);
      }
      if (CstIdR.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CstIdR);
      }
      if (DrivingDirection != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) DrivingDirection);
      }
      if (SteeringWheel != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SteeringWheel);
      }
      if (BatteryCapacity != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(BatteryCapacity);
      }
      if (ChargeStatus != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) ChargeStatus);
      }
      if (BatteryTemperature != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(BatteryTemperature);
      }
      if (XAxis != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(XAxis);
      }
      if (YAxis != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(YAxis);
      }
      if (DirectionAngle != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(DirectionAngle);
      }
      if (VehicleAngle != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(VehicleAngle);
      }
      if (Speed != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(Speed);
      }
      willPassGuideSection_.WriteTo(output, _repeated_willPassGuideSection_codec);
      if (SystemTime.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SystemTime);
      }
      if (ShelfStatusL != 0) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(CurrentExcuteCmdId);
      }
      if (OpPauseStatus != 0) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) OpPauseStatus);
      }
      if (CmdId3.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(CmdId3);
      }
      if (CmsState3 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) CmsState3);
      }
      if (CmdId4.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(CmdId4);
      }
      if (CmsState4 != 0) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) CmsState4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentAdrID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
      }
      if (CurrentSecID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
      }
      if (ModeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModeStatus);
      }
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
      }
      if (PowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerStatus);
      }
      if (ObstacleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObstacleStatus);
      }
      if (ReserveStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReserveStatus);
      }
      if (BlockingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockingStatus);
      }
      if (PauseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PauseStatus);
      }
      if (ErrorStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorStatus);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (ObstDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
      }
      if (ObstVehicleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
      }
      size += reserveInfos_.CalculateSize(_repeated_reserveInfos_codec);
      if (StoppedBlockID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
      }
      if (EarthquakePauseTatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EarthquakePauseTatus);
      }
      if (SafetyPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SafetyPauseStatus);
      }
      if (CmdId1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId1);
      }
      if (CmsState1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState1);
      }
      if (CmdId2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId2);
      }
      if (CmsState2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState2);
      }
      if (HasCstL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCstL);
      }
      if (CstIdL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CstIdL);
      }
      if (HasCstR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HasCstR);
      }
      if (CstIdR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CstIdR);
      }
      if (DrivingDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DrivingDirection);
      }
      if (SteeringWheel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SteeringWheel);
      }
      if (BatteryCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BatteryCapacity);
      }
      if (ChargeStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ChargeStatus);
      }
      if (BatteryTemperature != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BatteryTemperature);
      }
      if (XAxis != 0D) {
        size += 2 + 8;
      }
      if (YAxis != 0D) {
        size += 2 + 8;
      }
      if (DirectionAngle != 0D) {
        size += 2 + 8;
      }
      if (VehicleAngle != 0D) {
        size += 2 + 8;
      }
      if (Speed != 0D) {
        size += 2 + 8;
      }
      size += willPassGuideSection_.CalculateSize(_repeated_willPassGuideSection_codec);
      if (SystemTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SystemTime);
      }
      if (ShelfStatusL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusL);
      }
      if (ShelfStatusR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShelfStatusR);
      }
      if (CurrentExcuteCmdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentExcuteCmdId);
      }
      if (OpPauseStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpPauseStatus);
      }
      if (CmdId3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId3);
      }
      if (CmsState3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState3);
      }
      if (CmdId4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdId4);
      }
      if (CmsState4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CmsState4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_144_STATUS_CHANGE_REP other) {
      if (other == null) {
        return;
      }
      if (other.CurrentAdrID.Length != 0) {
        CurrentAdrID = other.CurrentAdrID;
      }
      if (other.CurrentSecID.Length != 0) {
        CurrentSecID = other.CurrentSecID;
      }
      if (other.ModeStatus != 0) {
        ModeStatus = other.ModeStatus;
      }
      if (other.ActionStatus != 0) {
        ActionStatus = other.ActionStatus;
      }
      if (other.PowerStatus != 0) {
        PowerStatus = other.PowerStatus;
      }
      if (other.ObstacleStatus != 0) {
        ObstacleStatus = other.ObstacleStatus;
      }
      if (other.ReserveStatus != 0) {
        ReserveStatus = other.ReserveStatus;
      }
      if (other.BlockingStatus != 0) {
        BlockingStatus = other.BlockingStatus;
      }
      if (other.PauseStatus != 0) {
        PauseStatus = other.PauseStatus;
      }
      if (other.ErrorStatus != 0) {
        ErrorStatus = other.ErrorStatus;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.ObstDistance != 0) {
        ObstDistance = other.ObstDistance;
      }
      if (other.ObstVehicleID.Length != 0) {
        ObstVehicleID = other.ObstVehicleID;
      }
      reserveInfos_.Add(other.reserveInfos_);
      if (other.StoppedBlockID.Length != 0) {
        StoppedBlockID = other.StoppedBlockID;
      }
      if (other.EarthquakePauseTatus != 0) {
        EarthquakePauseTatus = other.EarthquakePauseTatus;
      }
      if (other.SafetyPauseStatus != 0) {
        SafetyPauseStatus = other.SafetyPauseStatus;
      }
      if (other.CmdId1.Length != 0) {
        CmdId1 = other.CmdId1;
      }
      if (other.CmsState1 != 0) {
        CmsState1 = other.CmsState1;
      }
      if (other.CmdId2.Length != 0) {
        CmdId2 = other.CmdId2;
      }
      if (other.CmsState2 != 0) {
        CmsState2 = other.CmsState2;
      }
      if (other.HasCstL != 0) {
        HasCstL = other.HasCstL;
      }
      if (other.CstIdL.Length != 0) {
        CstIdL = other.CstIdL;
      }
      if (other.HasCstR != 0) {
        HasCstR = other.HasCstR;
      }
      if (other.CstIdR.Length != 0) {
        CstIdR = other.CstIdR;
      }
      if (other.DrivingDirection != 0) {
        DrivingDirection = other.DrivingDirection;
      }
      if (other.SteeringWheel != 0) {
        SteeringWheel = other.SteeringWheel;
      }
      if (other.BatteryCapacity != 0) {
        BatteryCapacity = other.BatteryCapacity;
      }
      if (other.ChargeStatus != 0) {
        ChargeStatus = other.ChargeStatus;
      }
      if (other.BatteryTemperature != 0) {
        BatteryTemperature = other.BatteryTemperature;
      }
      if (other.XAxis != 0D) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0D) {
        YAxis = other.YAxis;
      }
      if (other.DirectionAngle != 0D) {
        DirectionAngle = other.DirectionAngle;
      }
      if (other.VehicleAngle != 0D) {
        VehicleAngle = other.VehicleAngle;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      willPassGuideSection_.Add(other.willPassGuideSection_);
      if (other.SystemTime.Length != 0) {
        SystemTime = other.SystemTime;
      }
      if (other.ShelfStatusL != 0) {
        ShelfStatusL = other.ShelfStatusL;
      }
      if (other.ShelfStatusR != 0) {
        ShelfStatusR = other.ShelfStatusR;
      }
      if (other.CurrentExcuteCmdId.Length != 0) {
        CurrentExcuteCmdId = other.CurrentExcuteCmdId;
      }
      if (other.OpPauseStatus != 0) {
        OpPauseStatus = other.OpPauseStatus;
      }
      if (other.CmdId3.Length != 0) {
        CmdId3 = other.CmdId3;
      }
      if (other.CmsState3 != 0) {
        CmsState3 = other.CmsState3;
      }
      if (other.CmdId4.Length != 0) {
        CmdId4 = other.CmdId4;
      }
      if (other.CmsState4 != 0) {
        CmsState4 = other.CmsState4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrentAdrID = input.ReadString();
            break;
          }
          case 18: {
            CurrentSecID = input.ReadString();
            break;
          }
          case 24: {
            modeStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHModeStatus) input.ReadEnum();
            break;
          }
          case 32: {
            actionStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VHActionStatus) input.ReadEnum();
            break;
          }
          case 40: {
            powerStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhPowerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            obstacleStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 56: {
            reserveStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 64: {
            blockingStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 72: {
            pauseStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 80: {
            errorStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 88: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 96: {
            ObstDistance = input.ReadInt32();
            break;
          }
          case 106: {
            ObstVehicleID = input.ReadString();
            break;
          }
          case 114: {
            reserveInfos_.AddEntriesFrom(input, _repeated_reserveInfos_codec);
            break;
          }
          case 122: {
            StoppedBlockID = input.ReadString();
            break;
          }
          case 128: {
            earthquakePauseTatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 136: {
            safetyPauseStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 146: {
            CmdId1 = input.ReadString();
            break;
          }
          case 152: {
            cmsState1_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
          case 162: {
            CmdId2 = input.ReadString();
            break;
          }
          case 168: {
            cmsState2_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
          case 176: {
            hasCstL_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 186: {
            CstIdL = input.ReadString();
            break;
          }
          case 192: {
            hasCstR_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhLoadCSTStatus) input.ReadEnum();
            break;
          }
          case 202: {
            CstIdR = input.ReadString();
            break;
          }
          case 208: {
            drivingDirection_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.DriveDirction) input.ReadEnum();
            break;
          }
          case 216: {
            SteeringWheel = input.ReadInt32();
            break;
          }
          case 224: {
            BatteryCapacity = input.ReadUInt32();
            break;
          }
          case 232: {
            chargeStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhChargeStatus) input.ReadEnum();
            break;
          }
          case 240: {
            BatteryTemperature = input.ReadInt32();
            break;
          }
          case 249: {
            XAxis = input.ReadDouble();
            break;
          }
          case 257: {
            YAxis = input.ReadDouble();
            break;
          }
          case 265: {
            DirectionAngle = input.ReadDouble();
            break;
          }
          case 273: {
            VehicleAngle = input.ReadDouble();
            break;
          }
          case 281: {
            Speed = input.ReadDouble();
            break;
          }
          case 290: {
            willPassGuideSection_.AddEntriesFrom(input, _repeated_willPassGuideSection_codec);
            break;
          }
          case 298: {
            SystemTime = input.ReadString();
            break;
          }
          case 304: {
            shelfStatusL_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 312: {
            shelfStatusR_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ShelfStatus) input.ReadEnum();
            break;
          }
          case 322: {
            CurrentExcuteCmdId = input.ReadString();
            break;
          }
          case 328: {
            opPauseStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.VhStopSingle) input.ReadEnum();
            break;
          }
          case 338: {
            CmdId3 = input.ReadString();
            break;
          }
          case 344: {
            cmsState3_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
          case 354: {
            CmdId4 = input.ReadString();
            break;
          }
          case 360: {
            cmsState4_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.CommandState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_44_STATUS_CHANGE_RESPONSE : pb::IMessage<ID_44_STATUS_CHANGE_RESPONSE> {
    private static readonly pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE>(() => new ID_44_STATUS_CHANGE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE(ID_44_STATUS_CHANGE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_44_STATUS_CHANGE_RESPONSE Clone() {
      return new ID_44_STATUS_CHANGE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_44_STATUS_CHANGE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_44_STATUS_CHANGE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_44_STATUS_CHANGE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_45_POWER_OPE_REQ : pb::IMessage<ID_45_POWER_OPE_REQ> {
    private static readonly pb::MessageParser<ID_45_POWER_OPE_REQ> _parser = new pb::MessageParser<ID_45_POWER_OPE_REQ>(() => new ID_45_POWER_OPE_REQ());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_45_POWER_OPE_REQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ(ID_45_POWER_OPE_REQ other) : this() {
      operatingPowerMode_ = other.operatingPowerMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_45_POWER_OPE_REQ Clone() {
      return new ID_45_POWER_OPE_REQ(this);
    }

    /// <summary>Field number for the "OperatingPowerMode" field.</summary>
    public const int OperatingPowerModeFieldNumber = 1;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingPowerMode operatingPowerMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingPowerMode OperatingPowerMode {
      get { return operatingPowerMode_; }
      set {
        operatingPowerMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_45_POWER_OPE_REQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_45_POWER_OPE_REQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperatingPowerMode != other.OperatingPowerMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperatingPowerMode != 0) hash ^= OperatingPowerMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperatingPowerMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OperatingPowerMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperatingPowerMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatingPowerMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_45_POWER_OPE_REQ other) {
      if (other == null) {
        return;
      }
      if (other.OperatingPowerMode != 0) {
        OperatingPowerMode = other.OperatingPowerMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operatingPowerMode_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.OperatingPowerMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_145_POWER_OPE_RESPONSE : pb::IMessage<ID_145_POWER_OPE_RESPONSE> {
    private static readonly pb::MessageParser<ID_145_POWER_OPE_RESPONSE> _parser = new pb::MessageParser<ID_145_POWER_OPE_RESPONSE>(() => new ID_145_POWER_OPE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_145_POWER_OPE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE(ID_145_POWER_OPE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_145_POWER_OPE_RESPONSE Clone() {
      return new ID_145_POWER_OPE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_145_POWER_OPE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_145_POWER_OPE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_145_POWER_OPE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_51_AVOID_REQUEST : pb::IMessage<ID_51_AVOID_REQUEST> {
    private static readonly pb::MessageParser<ID_51_AVOID_REQUEST> _parser = new pb::MessageParser<ID_51_AVOID_REQUEST>(() => new ID_51_AVOID_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_51_AVOID_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST(ID_51_AVOID_REQUEST other) : this() {
      destinationAdr_ = other.destinationAdr_;
      guideSections_ = other.guideSections_.Clone();
      guideAddresses_ = other.guideAddresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_51_AVOID_REQUEST Clone() {
      return new ID_51_AVOID_REQUEST(this);
    }

    /// <summary>Field number for the "DestinationAdr" field.</summary>
    public const int DestinationAdrFieldNumber = 1;
    private string destinationAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationAdr {
      get { return destinationAdr_; }
      set {
        destinationAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Guide_Sections" field.</summary>
    public const int GuideSectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_guideSections_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> guideSections_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideSections {
      get { return guideSections_; }
    }

    /// <summary>Field number for the "Guide_Addresses" field.</summary>
    public const int GuideAddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_guideAddresses_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> guideAddresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuideAddresses {
      get { return guideAddresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_51_AVOID_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_51_AVOID_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestinationAdr != other.DestinationAdr) return false;
      if(!guideSections_.Equals(other.guideSections_)) return false;
      if(!guideAddresses_.Equals(other.guideAddresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestinationAdr.Length != 0) hash ^= DestinationAdr.GetHashCode();
      hash ^= guideSections_.GetHashCode();
      hash ^= guideAddresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DestinationAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DestinationAdr);
      }
      guideSections_.WriteTo(output, _repeated_guideSections_codec);
      guideAddresses_.WriteTo(output, _repeated_guideAddresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestinationAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationAdr);
      }
      size += guideSections_.CalculateSize(_repeated_guideSections_codec);
      size += guideAddresses_.CalculateSize(_repeated_guideAddresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_51_AVOID_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.DestinationAdr.Length != 0) {
        DestinationAdr = other.DestinationAdr;
      }
      guideSections_.Add(other.guideSections_);
      guideAddresses_.Add(other.guideAddresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DestinationAdr = input.ReadString();
            break;
          }
          case 18: {
            guideSections_.AddEntriesFrom(input, _repeated_guideSections_codec);
            break;
          }
          case 26: {
            guideAddresses_.AddEntriesFrom(input, _repeated_guideAddresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_151_AVOID_RESPONSE : pb::IMessage<ID_151_AVOID_RESPONSE> {
    private static readonly pb::MessageParser<ID_151_AVOID_RESPONSE> _parser = new pb::MessageParser<ID_151_AVOID_RESPONSE>(() => new ID_151_AVOID_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_151_AVOID_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE(ID_151_AVOID_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
      ngReason_ = other.ngReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_151_AVOID_RESPONSE Clone() {
      return new ID_151_AVOID_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    /// <summary>Field number for the "NgReason" field.</summary>
    public const int NgReasonFieldNumber = 2;
    private string ngReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NgReason {
      get { return ngReason_; }
      set {
        ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_151_AVOID_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_151_AVOID_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      if (NgReason != other.NgReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
      if (NgReason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NgReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      if (NgReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_151_AVOID_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
      if (other.NgReason.Length != 0) {
        NgReason = other.NgReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
          case 18: {
            NgReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_152_AVOID_COMPLETE_REPORT : pb::IMessage<ID_152_AVOID_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT>(() => new ID_152_AVOID_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_152_AVOID_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT(ID_152_AVOID_COMPLETE_REPORT other) : this() {
      cmpStatus_ = other.cmpStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_152_AVOID_COMPLETE_REPORT Clone() {
      return new ID_152_AVOID_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "CmpStatus" field.</summary>
    public const int CmpStatusFieldNumber = 1;
    private int cmpStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmpStatus {
      get { return cmpStatus_; }
      set {
        cmpStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_152_AVOID_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_152_AVOID_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmpStatus != other.CmpStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmpStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CmpStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmpStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_152_AVOID_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.CmpStatus != 0) {
        CmpStatus = other.CmpStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CmpStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_52_AVOID_COMPLETE_RESPONSE : pb::IMessage<ID_52_AVOID_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE>(() => new ID_52_AVOID_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_52_AVOID_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE(ID_52_AVOID_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_52_AVOID_COMPLETE_RESPONSE Clone() {
      return new ID_52_AVOID_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_52_AVOID_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_52_AVOID_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_52_AVOID_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_71_RANGE_TEACHING_REQUEST : pb::IMessage<ID_71_RANGE_TEACHING_REQUEST> {
    private static readonly pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> _parser = new pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST>(() => new ID_71_RANGE_TEACHING_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST(ID_71_RANGE_TEACHING_REQUEST other) : this() {
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_71_RANGE_TEACHING_REQUEST Clone() {
      return new ID_71_RANGE_TEACHING_REQUEST(this);
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 1;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 2;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_71_RANGE_TEACHING_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_71_RANGE_TEACHING_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToAdr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_71_RANGE_TEACHING_REQUEST other) {
      if (other == null) {
        return;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromAdr = input.ReadString();
            break;
          }
          case 18: {
            ToAdr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_171_RANGE_TEACHING_RESPONSE : pb::IMessage<ID_171_RANGE_TEACHING_RESPONSE> {
    private static readonly pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> _parser = new pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE>(() => new ID_171_RANGE_TEACHING_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE(ID_171_RANGE_TEACHING_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_171_RANGE_TEACHING_RESPONSE Clone() {
      return new ID_171_RANGE_TEACHING_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_171_RANGE_TEACHING_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_171_RANGE_TEACHING_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_171_RANGE_TEACHING_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_172_RANGE_TEACHING_COMPLETE_REPORT : pb::IMessage<ID_172_RANGE_TEACHING_COMPLETE_REPORT> {
    private static readonly pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT>(() => new ID_172_RANGE_TEACHING_COMPLETE_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) : this() {
      fromAdr_ = other.fromAdr_;
      toAdr_ = other.toAdr_;
      secDistance_ = other.secDistance_;
      completeCode_ = other.completeCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_172_RANGE_TEACHING_COMPLETE_REPORT Clone() {
      return new ID_172_RANGE_TEACHING_COMPLETE_REPORT(this);
    }

    /// <summary>Field number for the "FromAdr" field.</summary>
    public const int FromAdrFieldNumber = 1;
    private string fromAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromAdr {
      get { return fromAdr_; }
      set {
        fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToAdr" field.</summary>
    public const int ToAdrFieldNumber = 2;
    private string toAdr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAdr {
      get { return toAdr_; }
      set {
        toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sec_Distance" field.</summary>
    public const int SecDistanceFieldNumber = 3;
    private uint secDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecDistance {
      get { return secDistance_; }
      set {
        secDistance_ = value;
      }
    }

    /// <summary>Field number for the "Complete_Code" field.</summary>
    public const int CompleteCodeFieldNumber = 4;
    private int completeCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteCode {
      get { return completeCode_; }
      set {
        completeCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_172_RANGE_TEACHING_COMPLETE_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromAdr != other.FromAdr) return false;
      if (ToAdr != other.ToAdr) return false;
      if (SecDistance != other.SecDistance) return false;
      if (CompleteCode != other.CompleteCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
      if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
      if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
      if (CompleteCode != 0) hash ^= CompleteCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAdr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromAdr);
      }
      if (ToAdr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToAdr);
      }
      if (SecDistance != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SecDistance);
      }
      if (CompleteCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompleteCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
      }
      if (ToAdr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
      }
      if (SecDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
      }
      if (CompleteCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.FromAdr.Length != 0) {
        FromAdr = other.FromAdr;
      }
      if (other.ToAdr.Length != 0) {
        ToAdr = other.ToAdr;
      }
      if (other.SecDistance != 0) {
        SecDistance = other.SecDistance;
      }
      if (other.CompleteCode != 0) {
        CompleteCode = other.CompleteCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FromAdr = input.ReadString();
            break;
          }
          case 18: {
            ToAdr = input.ReadString();
            break;
          }
          case 24: {
            SecDistance = input.ReadUInt32();
            break;
          }
          case 32: {
            CompleteCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_72_RANGE_TEACHING_COMPLETE_RESPONSE : pb::IMessage<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> {
    private static readonly pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE>(() => new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE Clone() {
      return new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_72_RANGE_TEACHING_COMPLETE_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_174_ADDRESS_TEACH_REPORT : pb::IMessage<ID_174_ADDRESS_TEACH_REPORT> {
    private static readonly pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> _parser = new pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT>(() => new ID_174_ADDRESS_TEACH_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT(ID_174_ADDRESS_TEACH_REPORT other) : this() {
      addr_ = other.addr_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_174_ADDRESS_TEACH_REPORT Clone() {
      return new ID_174_ADDRESS_TEACH_REPORT(this);
    }

    /// <summary>Field number for the "Addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_174_ADDRESS_TEACH_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_174_ADDRESS_TEACH_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Addr != other.Addr) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_174_ADDRESS_TEACH_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_74_ADDRESS_TEACH_RESPONSE : pb::IMessage<ID_74_ADDRESS_TEACH_RESPONSE> {
    private static readonly pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> _parser = new pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE>(() => new ID_74_ADDRESS_TEACH_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE(ID_74_ADDRESS_TEACH_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_74_ADDRESS_TEACH_RESPONSE Clone() {
      return new ID_74_ADDRESS_TEACH_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_74_ADDRESS_TEACH_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_74_ADDRESS_TEACH_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_74_ADDRESS_TEACH_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_91_ALARM_RESET_REQUEST : pb::IMessage<ID_91_ALARM_RESET_REQUEST> {
    private static readonly pb::MessageParser<ID_91_ALARM_RESET_REQUEST> _parser = new pb::MessageParser<ID_91_ALARM_RESET_REQUEST>(() => new ID_91_ALARM_RESET_REQUEST());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_91_ALARM_RESET_REQUEST> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST(ID_91_ALARM_RESET_REQUEST other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_91_ALARM_RESET_REQUEST Clone() {
      return new ID_91_ALARM_RESET_REQUEST(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_91_ALARM_RESET_REQUEST);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_91_ALARM_RESET_REQUEST other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_91_ALARM_RESET_REQUEST other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ID_191_ALARM_RESET_RESPONSE : pb::IMessage<ID_191_ALARM_RESET_RESPONSE> {
    private static readonly pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> _parser = new pb::MessageParser<ID_191_ALARM_RESET_RESPONSE>(() => new ID_191_ALARM_RESET_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE(ID_191_ALARM_RESET_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_191_ALARM_RESET_RESPONSE Clone() {
      return new ID_191_ALARM_RESET_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_191_ALARM_RESET_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_191_ALARM_RESET_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_191_ALARM_RESET_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_194_ALARM_REPORT : pb::IMessage<ID_194_ALARM_REPORT> {
    private static readonly pb::MessageParser<ID_194_ALARM_REPORT> _parser = new pb::MessageParser<ID_194_ALARM_REPORT>(() => new ID_194_ALARM_REPORT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_194_ALARM_REPORT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT(ID_194_ALARM_REPORT other) : this() {
      errCode_ = other.errCode_;
      errStatus_ = other.errStatus_;
      errDescription_ = other.errDescription_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_194_ALARM_REPORT Clone() {
      return new ID_194_ALARM_REPORT(this);
    }

    /// <summary>Field number for the "ErrCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private string errCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrCode {
      get { return errCode_; }
      set {
        errCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrStatus" field.</summary>
    public const int ErrStatusFieldNumber = 2;
    private global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ErrorStatus errStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ErrorStatus ErrStatus {
      get { return errStatus_; }
      set {
        errStatus_ = value;
      }
    }

    /// <summary>Field number for the "ErrDescription" field.</summary>
    public const int ErrDescriptionFieldNumber = 3;
    private string errDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrDescription {
      get { return errDescription_; }
      set {
        errDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_194_ALARM_REPORT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_194_ALARM_REPORT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (ErrStatus != other.ErrStatus) return false;
      if (ErrDescription != other.ErrDescription) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode.Length != 0) hash ^= ErrCode.GetHashCode();
      if (ErrStatus != 0) hash ^= ErrStatus.GetHashCode();
      if (ErrDescription.Length != 0) hash ^= ErrDescription.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrCode);
      }
      if (ErrStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrStatus);
      }
      if (ErrDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrDescription);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrCode);
      }
      if (ErrStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrStatus);
      }
      if (ErrDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrDescription);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_194_ALARM_REPORT other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode.Length != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.ErrStatus != 0) {
        ErrStatus = other.ErrStatus;
      }
      if (other.ErrDescription.Length != 0) {
        ErrDescription = other.ErrDescription;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrCode = input.ReadString();
            break;
          }
          case 16: {
            errStatus_ = (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ErrorStatus) input.ReadEnum();
            break;
          }
          case 26: {
            ErrDescription = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID_94_ALARM_RESPONSE : pb::IMessage<ID_94_ALARM_RESPONSE> {
    private static readonly pb::MessageParser<ID_94_ALARM_RESPONSE> _parser = new pb::MessageParser<ID_94_ALARM_RESPONSE>(() => new ID_94_ALARM_RESPONSE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID_94_ALARM_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE(ID_94_ALARM_RESPONSE other) : this() {
      replyCode_ = other.replyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID_94_ALARM_RESPONSE Clone() {
      return new ID_94_ALARM_RESPONSE(this);
    }

    /// <summary>Field number for the "ReplyCode" field.</summary>
    public const int ReplyCodeFieldNumber = 1;
    private int replyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyCode {
      get { return replyCode_; }
      set {
        replyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID_94_ALARM_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID_94_ALARM_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyCode != other.ReplyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReplyCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReplyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReplyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID_94_ALARM_RESPONSE other) {
      if (other == null) {
        return;
      }
      if (other.ReplyCode != 0) {
        ReplyCode = other.ReplyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReplyCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WrapperMessage : pb::IMessage<WrapperMessage> {
    private static readonly pb::MessageParser<WrapperMessage> _parser = new pb::MessageParser<WrapperMessage>(() => new WrapperMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WrapperMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.AgvmessageReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage(WrapperMessage other) : this() {
      iD_ = other.iD_;
      seqNum_ = other.seqNum_;
      localSystemTime_ = other.localSystemTime_;
      switch (other.MsgCase) {
        case MsgOneofCase.HostBasicInfoRep:
          HostBasicInfoRep = other.HostBasicInfoRep.Clone();
          break;
        case MsgOneofCase.HostBasicInfoResp:
          HostBasicInfoResp = other.HostBasicInfoResp.Clone();
          break;
        case MsgOneofCase.BasicInfoVersionRep:
          BasicInfoVersionRep = other.BasicInfoVersionRep.Clone();
          break;
        case MsgOneofCase.BasicInfoVersionResp:
          BasicInfoVersionResp = other.BasicInfoVersionResp.Clone();
          break;
        case MsgOneofCase.CouplerInfoRep:
          CouplerInfoRep = other.CouplerInfoRep.Clone();
          break;
        case MsgOneofCase.CouplerInfoResp:
          CouplerInfoResp = other.CouplerInfoResp.Clone();
          break;
        case MsgOneofCase.TavellingDataRep:
          TavellingDataRep = other.TavellingDataRep.Clone();
          break;
        case MsgOneofCase.TavellingDataResp:
          TavellingDataResp = other.TavellingDataResp.Clone();
          break;
        case MsgOneofCase.SectionDataRep:
          SectionDataRep = other.SectionDataRep.Clone();
          break;
        case MsgOneofCase.SectionDataResp:
          SectionDataResp = other.SectionDataResp.Clone();
          break;
        case MsgOneofCase.AddressDataRep:
          AddressDataRep = other.AddressDataRep.Clone();
          break;
        case MsgOneofCase.AddressDataResp:
          AddressDataResp = other.AddressDataResp.Clone();
          break;
        case MsgOneofCase.ScaleDataRep:
          ScaleDataRep = other.ScaleDataRep.Clone();
          break;
        case MsgOneofCase.ScaleDataResp:
          ScaleDataResp = other.ScaleDataResp.Clone();
          break;
        case MsgOneofCase.ControlDataRep:
          ControlDataRep = other.ControlDataRep.Clone();
          break;
        case MsgOneofCase.ControlDataResp:
          ControlDataResp = other.ControlDataResp.Clone();
          break;
        case MsgOneofCase.GuideDataRep:
          GuideDataRep = other.GuideDataRep.Clone();
          break;
        case MsgOneofCase.GuideDataResp:
          GuideDataResp = other.GuideDataResp.Clone();
          break;
        case MsgOneofCase.IndividualUploadReq:
          IndividualUploadReq = other.IndividualUploadReq.Clone();
          break;
        case MsgOneofCase.IndividualUploadResp:
          IndividualUploadResp = other.IndividualUploadResp.Clone();
          break;
        case MsgOneofCase.IndividualDownloadReq:
          IndividualDownloadReq = other.IndividualDownloadReq.Clone();
          break;
        case MsgOneofCase.IndividualDownloadResp:
          IndividualDownloadResp = other.IndividualDownloadResp.Clone();
          break;
        case MsgOneofCase.IndividualChangeReq:
          IndividualChangeReq = other.IndividualChangeReq.Clone();
          break;
        case MsgOneofCase.IndividualChangeResp:
          IndividualChangeResp = other.IndividualChangeResp.Clone();
          break;
        case MsgOneofCase.ModeChangeReq:
          ModeChangeReq = other.ModeChangeReq.Clone();
          break;
        case MsgOneofCase.ModeChangeResp:
          ModeChangeResp = other.ModeChangeResp.Clone();
          break;
        case MsgOneofCase.TransReq:
          TransReq = other.TransReq.Clone();
          break;
        case MsgOneofCase.TransResp:
          TransResp = other.TransResp.Clone();
          break;
        case MsgOneofCase.TranCmpRep:
          TranCmpRep = other.TranCmpRep.Clone();
          break;
        case MsgOneofCase.TranCmpResp:
          TranCmpResp = other.TranCmpResp.Clone();
          break;
        case MsgOneofCase.CSTIDRenameReq:
          CSTIDRenameReq = other.CSTIDRenameReq.Clone();
          break;
        case MsgOneofCase.CSTIDRenameResp:
          CSTIDRenameResp = other.CSTIDRenameResp.Clone();
          break;
        case MsgOneofCase.TransCancelReq:
          TransCancelReq = other.TransCancelReq.Clone();
          break;
        case MsgOneofCase.TransCancelResp:
          TransCancelResp = other.TransCancelResp.Clone();
          break;
        case MsgOneofCase.GuideInfoReq:
          GuideInfoReq = other.GuideInfoReq.Clone();
          break;
        case MsgOneofCase.GuideInfoResp:
          GuideInfoResp = other.GuideInfoResp.Clone();
          break;
        case MsgOneofCase.PauseReq:
          PauseReq = other.PauseReq.Clone();
          break;
        case MsgOneofCase.PauseResp:
          PauseResp = other.PauseResp.Clone();
          break;
        case MsgOneofCase.TransEventRep:
          TransEventRep = other.TransEventRep.Clone();
          break;
        case MsgOneofCase.ImpTransEventRep:
          ImpTransEventRep = other.ImpTransEventRep.Clone();
          break;
        case MsgOneofCase.ImpTransEventResp:
          ImpTransEventResp = other.ImpTransEventResp.Clone();
          break;
        case MsgOneofCase.StatusReq:
          StatusReq = other.StatusReq.Clone();
          break;
        case MsgOneofCase.StatusReqResp:
          StatusReqResp = other.StatusReqResp.Clone();
          break;
        case MsgOneofCase.StatueChangeRep:
          StatueChangeRep = other.StatueChangeRep.Clone();
          break;
        case MsgOneofCase.StatusChangeResp:
          StatusChangeResp = other.StatusChangeResp.Clone();
          break;
        case MsgOneofCase.PowerOpeReq:
          PowerOpeReq = other.PowerOpeReq.Clone();
          break;
        case MsgOneofCase.PowerOpeResp:
          PowerOpeResp = other.PowerOpeResp.Clone();
          break;
        case MsgOneofCase.AvoidReq:
          AvoidReq = other.AvoidReq.Clone();
          break;
        case MsgOneofCase.AvoidResp:
          AvoidResp = other.AvoidResp.Clone();
          break;
        case MsgOneofCase.AvoidCompleteRep:
          AvoidCompleteRep = other.AvoidCompleteRep.Clone();
          break;
        case MsgOneofCase.AvoidCompleteResp:
          AvoidCompleteResp = other.AvoidCompleteResp.Clone();
          break;
        case MsgOneofCase.RangeTeachingReq:
          RangeTeachingReq = other.RangeTeachingReq.Clone();
          break;
        case MsgOneofCase.RangeTeachingResp:
          RangeTeachingResp = other.RangeTeachingResp.Clone();
          break;
        case MsgOneofCase.RangeTeachingCmpRep:
          RangeTeachingCmpRep = other.RangeTeachingCmpRep.Clone();
          break;
        case MsgOneofCase.RangeTeachingCmpResp:
          RangeTeachingCmpResp = other.RangeTeachingCmpResp.Clone();
          break;
        case MsgOneofCase.AddressTeachRep:
          AddressTeachRep = other.AddressTeachRep.Clone();
          break;
        case MsgOneofCase.AddressTeachResp:
          AddressTeachResp = other.AddressTeachResp.Clone();
          break;
        case MsgOneofCase.AlarmResetReq:
          AlarmResetReq = other.AlarmResetReq.Clone();
          break;
        case MsgOneofCase.AlarmResetResp:
          AlarmResetResp = other.AlarmResetResp.Clone();
          break;
        case MsgOneofCase.AlarmRep:
          AlarmRep = other.AlarmRep.Clone();
          break;
        case MsgOneofCase.AlarmResp:
          AlarmResp = other.AlarmResp.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrapperMessage Clone() {
      return new WrapperMessage(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1000;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SeqNum" field.</summary>
    public const int SeqNumFieldNumber = 1001;
    private int seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    /// <summary>Field number for the "LocalSystemTime" field.</summary>
    public const int LocalSystemTimeFieldNumber = 1002;
    private string localSystemTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalSystemTime {
      get { return localSystemTime_; }
      set {
        localSystemTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Host_Basic_Info_Rep" field.</summary>
    public const int HostBasicInfoRepFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_1_HOST_BASIC_INFO_VERSION_REP HostBasicInfoRep {
      get { return msgCase_ == MsgOneofCase.HostBasicInfoRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_1_HOST_BASIC_INFO_VERSION_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoRep;
      }
    }

    /// <summary>Field number for the "Host_Basic_Info_Resp" field.</summary>
    public const int HostBasicInfoRespFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE HostBasicInfoResp {
      get { return msgCase_ == MsgOneofCase.HostBasicInfoResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoResp;
      }
    }

    /// <summary>Field number for the "Basic_Info_Version_Rep" field.</summary>
    public const int BasicInfoVersionRepFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_102_BASIC_INFO_VERSION_REP BasicInfoVersionRep {
      get { return msgCase_ == MsgOneofCase.BasicInfoVersionRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_102_BASIC_INFO_VERSION_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionRep;
      }
    }

    /// <summary>Field number for the "Basic_Info_Version_Resp" field.</summary>
    public const int BasicInfoVersionRespFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_2_BASIC_INFO_VERSION_RESPONSE BasicInfoVersionResp {
      get { return msgCase_ == MsgOneofCase.BasicInfoVersionResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_2_BASIC_INFO_VERSION_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionResp;
      }
    }

    /// <summary>Field number for the "Coupler_Info_Rep" field.</summary>
    public const int CouplerInfoRepFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_11_COUPLER_INFO_REP CouplerInfoRep {
      get { return msgCase_ == MsgOneofCase.CouplerInfoRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_11_COUPLER_INFO_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CouplerInfoRep;
      }
    }

    /// <summary>Field number for the "Coupler_Info_Resp" field.</summary>
    public const int CouplerInfoRespFieldNumber = 111;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_111_COUPLER_INFO_RESPONSE CouplerInfoResp {
      get { return msgCase_ == MsgOneofCase.CouplerInfoResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_111_COUPLER_INFO_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CouplerInfoResp;
      }
    }

    /// <summary>Field number for the "Tavelling_Data_Rep" field.</summary>
    public const int TavellingDataRepFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_13_TAVELLING_DATA_REP TavellingDataRep {
      get { return msgCase_ == MsgOneofCase.TavellingDataRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_13_TAVELLING_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataRep;
      }
    }

    /// <summary>Field number for the "Tavelling_Data_Resp" field.</summary>
    public const int TavellingDataRespFieldNumber = 113;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_113_TAVELLING_DATA_RESPONSE TavellingDataResp {
      get { return msgCase_ == MsgOneofCase.TavellingDataResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_113_TAVELLING_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataResp;
      }
    }

    /// <summary>Field number for the "Section_Data_Rep" field.</summary>
    public const int SectionDataRepFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP SectionDataRep {
      get { return msgCase_ == MsgOneofCase.SectionDataRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataRep;
      }
    }

    /// <summary>Field number for the "Section_Data_Resp" field.</summary>
    public const int SectionDataRespFieldNumber = 115;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_115_SECTION_DATA_RESPONSE SectionDataResp {
      get { return msgCase_ == MsgOneofCase.SectionDataResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_115_SECTION_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataResp;
      }
    }

    /// <summary>Field number for the "Address_Data_Rep" field.</summary>
    public const int AddressDataRepFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP AddressDataRep {
      get { return msgCase_ == MsgOneofCase.AddressDataRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataRep;
      }
    }

    /// <summary>Field number for the "Address_Data_Resp" field.</summary>
    public const int AddressDataRespFieldNumber = 117;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_117_ADDRESS_DATA_RESPONSE AddressDataResp {
      get { return msgCase_ == MsgOneofCase.AddressDataResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_117_ADDRESS_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataResp;
      }
    }

    /// <summary>Field number for the "Scale_Data_Rep" field.</summary>
    public const int ScaleDataRepFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_19_SCALE_DATA_REP ScaleDataRep {
      get { return msgCase_ == MsgOneofCase.ScaleDataRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_19_SCALE_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataRep;
      }
    }

    /// <summary>Field number for the "Scale_Data_Resp" field.</summary>
    public const int ScaleDataRespFieldNumber = 119;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_119_SCALE_DATA_RESPONSE ScaleDataResp {
      get { return msgCase_ == MsgOneofCase.ScaleDataResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_119_SCALE_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataResp;
      }
    }

    /// <summary>Field number for the "Control_Data_Rep" field.</summary>
    public const int ControlDataRepFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_21_CONTROL_DATA_REP ControlDataRep {
      get { return msgCase_ == MsgOneofCase.ControlDataRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_21_CONTROL_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataRep;
      }
    }

    /// <summary>Field number for the "Control_Data_Resp" field.</summary>
    public const int ControlDataRespFieldNumber = 121;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_121_CONTROL_DATA_RESPONSE ControlDataResp {
      get { return msgCase_ == MsgOneofCase.ControlDataResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_121_CONTROL_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataResp;
      }
    }

    /// <summary>Field number for the "Guide_Data_Rep" field.</summary>
    public const int GuideDataRepFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_23_GUIDE_DATA_REP GuideDataRep {
      get { return msgCase_ == MsgOneofCase.GuideDataRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_23_GUIDE_DATA_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataRep;
      }
    }

    /// <summary>Field number for the "Guide_Data_Resp" field.</summary>
    public const int GuideDataRespFieldNumber = 123;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_123_GUIDE_DATA_RESPONSE GuideDataResp {
      get { return msgCase_ == MsgOneofCase.GuideDataResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_123_GUIDE_DATA_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataResp;
      }
    }

    /// <summary>Field number for the "Individual_Upload_Req" field.</summary>
    public const int IndividualUploadReqFieldNumber = 61;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_61_INDIVIDUAL_UPLOAD_REQ IndividualUploadReq {
      get { return msgCase_ == MsgOneofCase.IndividualUploadReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_61_INDIVIDUAL_UPLOAD_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadReq;
      }
    }

    /// <summary>Field number for the "Individual_Upload_Resp" field.</summary>
    public const int IndividualUploadRespFieldNumber = 161;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE IndividualUploadResp {
      get { return msgCase_ == MsgOneofCase.IndividualUploadResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadResp;
      }
    }

    /// <summary>Field number for the "Individual_Download_Req" field.</summary>
    public const int IndividualDownloadReqFieldNumber = 162;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_162_INDIVIDUAL_DOWNLOAD_REQ IndividualDownloadReq {
      get { return msgCase_ == MsgOneofCase.IndividualDownloadReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_162_INDIVIDUAL_DOWNLOAD_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualDownloadReq;
      }
    }

    /// <summary>Field number for the "Individual_Download_Resp" field.</summary>
    public const int IndividualDownloadRespFieldNumber = 62;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE IndividualDownloadResp {
      get { return msgCase_ == MsgOneofCase.IndividualDownloadResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualDownloadResp;
      }
    }

    /// <summary>Field number for the "Individual_Change_Req" field.</summary>
    public const int IndividualChangeReqFieldNumber = 63;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_63_INDIVIDUAL_CHANGE_REQ IndividualChangeReq {
      get { return msgCase_ == MsgOneofCase.IndividualChangeReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_63_INDIVIDUAL_CHANGE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeReq;
      }
    }

    /// <summary>Field number for the "Individual_Change_Resp" field.</summary>
    public const int IndividualChangeRespFieldNumber = 163;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE IndividualChangeResp {
      get { return msgCase_ == MsgOneofCase.IndividualChangeResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeResp;
      }
    }

    /// <summary>Field number for the "Mode_Change_Req" field.</summary>
    public const int ModeChangeReqFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_41_MODE_CHANGE_REQ ModeChangeReq {
      get { return msgCase_ == MsgOneofCase.ModeChangeReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_41_MODE_CHANGE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeReq;
      }
    }

    /// <summary>Field number for the "Mode_Change_Resp" field.</summary>
    public const int ModeChangeRespFieldNumber = 141;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_141_MODE_CHANGE_RESPONSE ModeChangeResp {
      get { return msgCase_ == MsgOneofCase.ModeChangeResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_141_MODE_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeResp;
      }
    }

    /// <summary>Field number for the "Trans_Req" field.</summary>
    public const int TransReqFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_31_TRANS_REQUEST TransReq {
      get { return msgCase_ == MsgOneofCase.TransReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_31_TRANS_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransReq;
      }
    }

    /// <summary>Field number for the "Trans_Resp" field.</summary>
    public const int TransRespFieldNumber = 131;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_131_TRANS_RESPONSE TransResp {
      get { return msgCase_ == MsgOneofCase.TransResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_131_TRANS_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransResp;
      }
    }

    /// <summary>Field number for the "Tran_Cmp_Rep" field.</summary>
    public const int TranCmpRepFieldNumber = 132;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_132_TRANS_COMPLETE_REPORT TranCmpRep {
      get { return msgCase_ == MsgOneofCase.TranCmpRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_132_TRANS_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpRep;
      }
    }

    /// <summary>Field number for the "Tran_Cmp_Resp" field.</summary>
    public const int TranCmpRespFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_32_TRANS_COMPLETE_RESPONSE TranCmpResp {
      get { return msgCase_ == MsgOneofCase.TranCmpResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_32_TRANS_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpResp;
      }
    }

    /// <summary>Field number for the "CST_ID_Rename_Req" field.</summary>
    public const int CSTIDRenameReqFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_35_CST_ID_RENAME_REQUEST CSTIDRenameReq {
      get { return msgCase_ == MsgOneofCase.CSTIDRenameReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_35_CST_ID_RENAME_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CSTIDRenameReq;
      }
    }

    /// <summary>Field number for the "CST_ID_Rename_Resp" field.</summary>
    public const int CSTIDRenameRespFieldNumber = 135;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_135_CST_ID_RENAME_RESPONSE CSTIDRenameResp {
      get { return msgCase_ == MsgOneofCase.CSTIDRenameResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_135_CST_ID_RENAME_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CSTIDRenameResp;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Req" field.</summary>
    public const int TransCancelReqFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_37_TRANS_CANCEL_REQUEST TransCancelReq {
      get { return msgCase_ == MsgOneofCase.TransCancelReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_37_TRANS_CANCEL_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelReq;
      }
    }

    /// <summary>Field number for the "Trans_Cancel_Resp" field.</summary>
    public const int TransCancelRespFieldNumber = 137;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_137_TRANS_CANCEL_RESPONSE TransCancelResp {
      get { return msgCase_ == MsgOneofCase.TransCancelResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_137_TRANS_CANCEL_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelResp;
      }
    }

    /// <summary>Field number for the "Guide_Info_Req" field.</summary>
    public const int GuideInfoReqFieldNumber = 138;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_138_GUIDE_INFO_REQUEST GuideInfoReq {
      get { return msgCase_ == MsgOneofCase.GuideInfoReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_138_GUIDE_INFO_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideInfoReq;
      }
    }

    /// <summary>Field number for the "Guide_Info_Resp" field.</summary>
    public const int GuideInfoRespFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_38_GUIDE_INFO_RESPONSE GuideInfoResp {
      get { return msgCase_ == MsgOneofCase.GuideInfoResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_38_GUIDE_INFO_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideInfoResp;
      }
    }

    /// <summary>Field number for the "Pause_Req" field.</summary>
    public const int PauseReqFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_39_PAUSE_REQUEST PauseReq {
      get { return msgCase_ == MsgOneofCase.PauseReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_39_PAUSE_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseReq;
      }
    }

    /// <summary>Field number for the "Pause_Resp" field.</summary>
    public const int PauseRespFieldNumber = 139;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_139_PAUSE_RESPONSE PauseResp {
      get { return msgCase_ == MsgOneofCase.PauseResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_139_PAUSE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseResp;
      }
    }

    /// <summary>Field number for the "Trans_Event_Rep" field.</summary>
    public const int TransEventRepFieldNumber = 134;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_134_TRANS_EVENT_REP TransEventRep {
      get { return msgCase_ == MsgOneofCase.TransEventRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_134_TRANS_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransEventRep;
      }
    }

    /// <summary>Field number for the "Imp_Trans_Event_Rep" field.</summary>
    public const int ImpTransEventRepFieldNumber = 136;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_136_TRANS_EVENT_REP ImpTransEventRep {
      get { return msgCase_ == MsgOneofCase.ImpTransEventRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_136_TRANS_EVENT_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventRep;
      }
    }

    /// <summary>Field number for the "Imp_Trans_Event_Resp" field.</summary>
    public const int ImpTransEventRespFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_36_TRANS_EVENT_RESPONSE ImpTransEventResp {
      get { return msgCase_ == MsgOneofCase.ImpTransEventResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_36_TRANS_EVENT_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventResp;
      }
    }

    /// <summary>Field number for the "Status_Req" field.</summary>
    public const int StatusReqFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_43_STATUS_REQUEST StatusReq {
      get { return msgCase_ == MsgOneofCase.StatusReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_43_STATUS_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReq;
      }
    }

    /// <summary>Field number for the "Status_Req_Resp" field.</summary>
    public const int StatusReqRespFieldNumber = 143;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_143_STATUS_RESPONSE StatusReqResp {
      get { return msgCase_ == MsgOneofCase.StatusReqResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_143_STATUS_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReqResp;
      }
    }

    /// <summary>Field number for the "Statue_Change_Rep" field.</summary>
    public const int StatueChangeRepFieldNumber = 144;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_144_STATUS_CHANGE_REP StatueChangeRep {
      get { return msgCase_ == MsgOneofCase.StatueChangeRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_144_STATUS_CHANGE_REP) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatueChangeRep;
      }
    }

    /// <summary>Field number for the "Status_Change_Resp" field.</summary>
    public const int StatusChangeRespFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_44_STATUS_CHANGE_RESPONSE StatusChangeResp {
      get { return msgCase_ == MsgOneofCase.StatusChangeResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_44_STATUS_CHANGE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusChangeResp;
      }
    }

    /// <summary>Field number for the "Power_Ope_Req" field.</summary>
    public const int PowerOpeReqFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_45_POWER_OPE_REQ PowerOpeReq {
      get { return msgCase_ == MsgOneofCase.PowerOpeReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_45_POWER_OPE_REQ) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeReq;
      }
    }

    /// <summary>Field number for the "Power_Ope_Resp" field.</summary>
    public const int PowerOpeRespFieldNumber = 145;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_145_POWER_OPE_RESPONSE PowerOpeResp {
      get { return msgCase_ == MsgOneofCase.PowerOpeResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_145_POWER_OPE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeResp;
      }
    }

    /// <summary>Field number for the "Avoid_Req" field.</summary>
    public const int AvoidReqFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_51_AVOID_REQUEST AvoidReq {
      get { return msgCase_ == MsgOneofCase.AvoidReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_51_AVOID_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidReq;
      }
    }

    /// <summary>Field number for the "Avoid_Resp" field.</summary>
    public const int AvoidRespFieldNumber = 151;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_151_AVOID_RESPONSE AvoidResp {
      get { return msgCase_ == MsgOneofCase.AvoidResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_151_AVOID_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidResp;
      }
    }

    /// <summary>Field number for the "Avoid_Complete_Rep" field.</summary>
    public const int AvoidCompleteRepFieldNumber = 152;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_152_AVOID_COMPLETE_REPORT AvoidCompleteRep {
      get { return msgCase_ == MsgOneofCase.AvoidCompleteRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_152_AVOID_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidCompleteRep;
      }
    }

    /// <summary>Field number for the "Avoid_Complete_Resp" field.</summary>
    public const int AvoidCompleteRespFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_52_AVOID_COMPLETE_RESPONSE AvoidCompleteResp {
      get { return msgCase_ == MsgOneofCase.AvoidCompleteResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_52_AVOID_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AvoidCompleteResp;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Req" field.</summary>
    public const int RangeTeachingReqFieldNumber = 71;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_71_RANGE_TEACHING_REQUEST RangeTeachingReq {
      get { return msgCase_ == MsgOneofCase.RangeTeachingReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_71_RANGE_TEACHING_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingReq;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Resp" field.</summary>
    public const int RangeTeachingRespFieldNumber = 171;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_171_RANGE_TEACHING_RESPONSE RangeTeachingResp {
      get { return msgCase_ == MsgOneofCase.RangeTeachingResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_171_RANGE_TEACHING_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingResp;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Cmp_Rep" field.</summary>
    public const int RangeTeachingCmpRepFieldNumber = 172;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT RangeTeachingCmpRep {
      get { return msgCase_ == MsgOneofCase.RangeTeachingCmpRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpRep;
      }
    }

    /// <summary>Field number for the "Range_Teaching_Cmp_Resp" field.</summary>
    public const int RangeTeachingCmpRespFieldNumber = 72;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE RangeTeachingCmpResp {
      get { return msgCase_ == MsgOneofCase.RangeTeachingCmpResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpResp;
      }
    }

    /// <summary>Field number for the "Address_Teach_Rep" field.</summary>
    public const int AddressTeachRepFieldNumber = 174;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_174_ADDRESS_TEACH_REPORT AddressTeachRep {
      get { return msgCase_ == MsgOneofCase.AddressTeachRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_174_ADDRESS_TEACH_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachRep;
      }
    }

    /// <summary>Field number for the "Address_Teach_Resp" field.</summary>
    public const int AddressTeachRespFieldNumber = 74;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_74_ADDRESS_TEACH_RESPONSE AddressTeachResp {
      get { return msgCase_ == MsgOneofCase.AddressTeachResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_74_ADDRESS_TEACH_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachResp;
      }
    }

    /// <summary>Field number for the "Alarm_Reset_Req" field.</summary>
    public const int AlarmResetReqFieldNumber = 91;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_91_ALARM_RESET_REQUEST AlarmResetReq {
      get { return msgCase_ == MsgOneofCase.AlarmResetReq ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_91_ALARM_RESET_REQUEST) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetReq;
      }
    }

    /// <summary>Field number for the "Alarm_Reset_Resp" field.</summary>
    public const int AlarmResetRespFieldNumber = 191;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_191_ALARM_RESET_RESPONSE AlarmResetResp {
      get { return msgCase_ == MsgOneofCase.AlarmResetResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_191_ALARM_RESET_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetResp;
      }
    }

    /// <summary>Field number for the "Alarm_Rep" field.</summary>
    public const int AlarmRepFieldNumber = 194;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_194_ALARM_REPORT AlarmRep {
      get { return msgCase_ == MsgOneofCase.AlarmRep ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_194_ALARM_REPORT) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmRep;
      }
    }

    /// <summary>Field number for the "Alarm_Resp" field.</summary>
    public const int AlarmRespFieldNumber = 94;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_94_ALARM_RESPONSE AlarmResp {
      get { return msgCase_ == MsgOneofCase.AlarmResp ? (global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_94_ALARM_RESPONSE) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResp;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      HostBasicInfoRep = 1,
      HostBasicInfoResp = 101,
      BasicInfoVersionRep = 102,
      BasicInfoVersionResp = 2,
      CouplerInfoRep = 11,
      CouplerInfoResp = 111,
      TavellingDataRep = 13,
      TavellingDataResp = 113,
      SectionDataRep = 15,
      SectionDataResp = 115,
      AddressDataRep = 17,
      AddressDataResp = 117,
      ScaleDataRep = 19,
      ScaleDataResp = 119,
      ControlDataRep = 21,
      ControlDataResp = 121,
      GuideDataRep = 23,
      GuideDataResp = 123,
      IndividualUploadReq = 61,
      IndividualUploadResp = 161,
      IndividualDownloadReq = 162,
      IndividualDownloadResp = 62,
      IndividualChangeReq = 63,
      IndividualChangeResp = 163,
      ModeChangeReq = 41,
      ModeChangeResp = 141,
      TransReq = 31,
      TransResp = 131,
      TranCmpRep = 132,
      TranCmpResp = 32,
      CSTIDRenameReq = 35,
      CSTIDRenameResp = 135,
      TransCancelReq = 37,
      TransCancelResp = 137,
      GuideInfoReq = 138,
      GuideInfoResp = 38,
      PauseReq = 39,
      PauseResp = 139,
      TransEventRep = 134,
      ImpTransEventRep = 136,
      ImpTransEventResp = 36,
      StatusReq = 43,
      StatusReqResp = 143,
      StatueChangeRep = 144,
      StatusChangeResp = 44,
      PowerOpeReq = 45,
      PowerOpeResp = 145,
      AvoidReq = 51,
      AvoidResp = 151,
      AvoidCompleteRep = 152,
      AvoidCompleteResp = 52,
      RangeTeachingReq = 71,
      RangeTeachingResp = 171,
      RangeTeachingCmpRep = 172,
      RangeTeachingCmpResp = 72,
      AddressTeachRep = 174,
      AddressTeachResp = 74,
      AlarmResetReq = 91,
      AlarmResetResp = 191,
      AlarmRep = 194,
      AlarmResp = 94,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WrapperMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WrapperMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (SeqNum != other.SeqNum) return false;
      if (LocalSystemTime != other.LocalSystemTime) return false;
      if (!object.Equals(HostBasicInfoRep, other.HostBasicInfoRep)) return false;
      if (!object.Equals(HostBasicInfoResp, other.HostBasicInfoResp)) return false;
      if (!object.Equals(BasicInfoVersionRep, other.BasicInfoVersionRep)) return false;
      if (!object.Equals(BasicInfoVersionResp, other.BasicInfoVersionResp)) return false;
      if (!object.Equals(CouplerInfoRep, other.CouplerInfoRep)) return false;
      if (!object.Equals(CouplerInfoResp, other.CouplerInfoResp)) return false;
      if (!object.Equals(TavellingDataRep, other.TavellingDataRep)) return false;
      if (!object.Equals(TavellingDataResp, other.TavellingDataResp)) return false;
      if (!object.Equals(SectionDataRep, other.SectionDataRep)) return false;
      if (!object.Equals(SectionDataResp, other.SectionDataResp)) return false;
      if (!object.Equals(AddressDataRep, other.AddressDataRep)) return false;
      if (!object.Equals(AddressDataResp, other.AddressDataResp)) return false;
      if (!object.Equals(ScaleDataRep, other.ScaleDataRep)) return false;
      if (!object.Equals(ScaleDataResp, other.ScaleDataResp)) return false;
      if (!object.Equals(ControlDataRep, other.ControlDataRep)) return false;
      if (!object.Equals(ControlDataResp, other.ControlDataResp)) return false;
      if (!object.Equals(GuideDataRep, other.GuideDataRep)) return false;
      if (!object.Equals(GuideDataResp, other.GuideDataResp)) return false;
      if (!object.Equals(IndividualUploadReq, other.IndividualUploadReq)) return false;
      if (!object.Equals(IndividualUploadResp, other.IndividualUploadResp)) return false;
      if (!object.Equals(IndividualDownloadReq, other.IndividualDownloadReq)) return false;
      if (!object.Equals(IndividualDownloadResp, other.IndividualDownloadResp)) return false;
      if (!object.Equals(IndividualChangeReq, other.IndividualChangeReq)) return false;
      if (!object.Equals(IndividualChangeResp, other.IndividualChangeResp)) return false;
      if (!object.Equals(ModeChangeReq, other.ModeChangeReq)) return false;
      if (!object.Equals(ModeChangeResp, other.ModeChangeResp)) return false;
      if (!object.Equals(TransReq, other.TransReq)) return false;
      if (!object.Equals(TransResp, other.TransResp)) return false;
      if (!object.Equals(TranCmpRep, other.TranCmpRep)) return false;
      if (!object.Equals(TranCmpResp, other.TranCmpResp)) return false;
      if (!object.Equals(CSTIDRenameReq, other.CSTIDRenameReq)) return false;
      if (!object.Equals(CSTIDRenameResp, other.CSTIDRenameResp)) return false;
      if (!object.Equals(TransCancelReq, other.TransCancelReq)) return false;
      if (!object.Equals(TransCancelResp, other.TransCancelResp)) return false;
      if (!object.Equals(GuideInfoReq, other.GuideInfoReq)) return false;
      if (!object.Equals(GuideInfoResp, other.GuideInfoResp)) return false;
      if (!object.Equals(PauseReq, other.PauseReq)) return false;
      if (!object.Equals(PauseResp, other.PauseResp)) return false;
      if (!object.Equals(TransEventRep, other.TransEventRep)) return false;
      if (!object.Equals(ImpTransEventRep, other.ImpTransEventRep)) return false;
      if (!object.Equals(ImpTransEventResp, other.ImpTransEventResp)) return false;
      if (!object.Equals(StatusReq, other.StatusReq)) return false;
      if (!object.Equals(StatusReqResp, other.StatusReqResp)) return false;
      if (!object.Equals(StatueChangeRep, other.StatueChangeRep)) return false;
      if (!object.Equals(StatusChangeResp, other.StatusChangeResp)) return false;
      if (!object.Equals(PowerOpeReq, other.PowerOpeReq)) return false;
      if (!object.Equals(PowerOpeResp, other.PowerOpeResp)) return false;
      if (!object.Equals(AvoidReq, other.AvoidReq)) return false;
      if (!object.Equals(AvoidResp, other.AvoidResp)) return false;
      if (!object.Equals(AvoidCompleteRep, other.AvoidCompleteRep)) return false;
      if (!object.Equals(AvoidCompleteResp, other.AvoidCompleteResp)) return false;
      if (!object.Equals(RangeTeachingReq, other.RangeTeachingReq)) return false;
      if (!object.Equals(RangeTeachingResp, other.RangeTeachingResp)) return false;
      if (!object.Equals(RangeTeachingCmpRep, other.RangeTeachingCmpRep)) return false;
      if (!object.Equals(RangeTeachingCmpResp, other.RangeTeachingCmpResp)) return false;
      if (!object.Equals(AddressTeachRep, other.AddressTeachRep)) return false;
      if (!object.Equals(AddressTeachResp, other.AddressTeachResp)) return false;
      if (!object.Equals(AlarmResetReq, other.AlarmResetReq)) return false;
      if (!object.Equals(AlarmResetResp, other.AlarmResetResp)) return false;
      if (!object.Equals(AlarmRep, other.AlarmRep)) return false;
      if (!object.Equals(AlarmResp, other.AlarmResp)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (SeqNum != 0) hash ^= SeqNum.GetHashCode();
      if (LocalSystemTime.Length != 0) hash ^= LocalSystemTime.GetHashCode();
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) hash ^= HostBasicInfoRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) hash ^= HostBasicInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) hash ^= BasicInfoVersionRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) hash ^= BasicInfoVersionResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.CouplerInfoRep) hash ^= CouplerInfoRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.CouplerInfoResp) hash ^= CouplerInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TavellingDataRep) hash ^= TavellingDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.TavellingDataResp) hash ^= TavellingDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.SectionDataRep) hash ^= SectionDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.SectionDataResp) hash ^= SectionDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressDataRep) hash ^= AddressDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressDataResp) hash ^= AddressDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScaleDataRep) hash ^= ScaleDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ScaleDataResp) hash ^= ScaleDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlDataRep) hash ^= ControlDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ControlDataResp) hash ^= ControlDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideDataRep) hash ^= GuideDataRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideDataResp) hash ^= GuideDataResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) hash ^= IndividualUploadReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) hash ^= IndividualUploadResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualDownloadReq) hash ^= IndividualDownloadReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualDownloadResp) hash ^= IndividualDownloadResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) hash ^= IndividualChangeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) hash ^= IndividualChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.ModeChangeReq) hash ^= ModeChangeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.ModeChangeResp) hash ^= ModeChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransReq) hash ^= TransReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransResp) hash ^= TransResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TranCmpRep) hash ^= TranCmpRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.TranCmpResp) hash ^= TranCmpResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.CSTIDRenameReq) hash ^= CSTIDRenameReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.CSTIDRenameResp) hash ^= CSTIDRenameResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelReq) hash ^= TransCancelReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransCancelResp) hash ^= TransCancelResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideInfoReq) hash ^= GuideInfoReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.GuideInfoResp) hash ^= GuideInfoResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.PauseReq) hash ^= PauseReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.PauseResp) hash ^= PauseResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.TransEventRep) hash ^= TransEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) hash ^= ImpTransEventRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) hash ^= ImpTransEventResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusReq) hash ^= StatusReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusReqResp) hash ^= StatusReqResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatueChangeRep) hash ^= StatueChangeRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.StatusChangeResp) hash ^= StatusChangeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.PowerOpeReq) hash ^= PowerOpeReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.PowerOpeResp) hash ^= PowerOpeResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidReq) hash ^= AvoidReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidResp) hash ^= AvoidResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) hash ^= AvoidCompleteRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) hash ^= AvoidCompleteResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) hash ^= RangeTeachingReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) hash ^= RangeTeachingResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) hash ^= RangeTeachingCmpRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) hash ^= RangeTeachingCmpResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressTeachRep) hash ^= AddressTeachRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddressTeachResp) hash ^= AddressTeachResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResetReq) hash ^= AlarmResetReq.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResetResp) hash ^= AlarmResetResp.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmRep) hash ^= AlarmRep.GetHashCode();
      if (msgCase_ == MsgOneofCase.AlarmResp) hash ^= AlarmResp.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
        output.WriteRawTag(10);
        output.WriteMessage(HostBasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
        output.WriteRawTag(18);
        output.WriteMessage(BasicInfoVersionResp);
      }
      if (msgCase_ == MsgOneofCase.CouplerInfoRep) {
        output.WriteRawTag(90);
        output.WriteMessage(CouplerInfoRep);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataRep) {
        output.WriteRawTag(106);
        output.WriteMessage(TavellingDataRep);
      }
      if (msgCase_ == MsgOneofCase.SectionDataRep) {
        output.WriteRawTag(122);
        output.WriteMessage(SectionDataRep);
      }
      if (msgCase_ == MsgOneofCase.AddressDataRep) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(AddressDataRep);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataRep) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ScaleDataRep);
      }
      if (msgCase_ == MsgOneofCase.ControlDataRep) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ControlDataRep);
      }
      if (msgCase_ == MsgOneofCase.GuideDataRep) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GuideDataRep);
      }
      if (msgCase_ == MsgOneofCase.TransReq) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransReq);
      }
      if (msgCase_ == MsgOneofCase.TranCmpResp) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TranCmpResp);
      }
      if (msgCase_ == MsgOneofCase.CSTIDRenameReq) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(CSTIDRenameReq);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(ImpTransEventResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelReq) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TransCancelReq);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoResp) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(GuideInfoResp);
      }
      if (msgCase_ == MsgOneofCase.PauseReq) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(PauseReq);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeReq) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ModeChangeReq);
      }
      if (msgCase_ == MsgOneofCase.StatusReq) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(StatusReq);
      }
      if (msgCase_ == MsgOneofCase.StatusChangeResp) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(StatusChangeResp);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeReq) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(PowerOpeReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidReq) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(AvoidReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AvoidCompleteResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(IndividualUploadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualDownloadResp) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(IndividualDownloadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(IndividualChangeReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(RangeTeachingReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(RangeTeachingCmpResp);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachResp) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(AddressTeachResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetReq) {
        output.WriteRawTag(218, 5);
        output.WriteMessage(AlarmResetReq);
      }
      if (msgCase_ == MsgOneofCase.AlarmResp) {
        output.WriteRawTag(242, 5);
        output.WriteMessage(AlarmResp);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(HostBasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(BasicInfoVersionRep);
      }
      if (msgCase_ == MsgOneofCase.CouplerInfoResp) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(CouplerInfoResp);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataResp) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(TavellingDataResp);
      }
      if (msgCase_ == MsgOneofCase.SectionDataResp) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(SectionDataResp);
      }
      if (msgCase_ == MsgOneofCase.AddressDataResp) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(AddressDataResp);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataResp) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(ScaleDataResp);
      }
      if (msgCase_ == MsgOneofCase.ControlDataResp) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(ControlDataResp);
      }
      if (msgCase_ == MsgOneofCase.GuideDataResp) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(GuideDataResp);
      }
      if (msgCase_ == MsgOneofCase.TransResp) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(TransResp);
      }
      if (msgCase_ == MsgOneofCase.TranCmpRep) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(TranCmpRep);
      }
      if (msgCase_ == MsgOneofCase.TransEventRep) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(TransEventRep);
      }
      if (msgCase_ == MsgOneofCase.CSTIDRenameResp) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(CSTIDRenameResp);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(ImpTransEventRep);
      }
      if (msgCase_ == MsgOneofCase.TransCancelResp) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(TransCancelResp);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoReq) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(GuideInfoReq);
      }
      if (msgCase_ == MsgOneofCase.PauseResp) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(PauseResp);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeResp) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(ModeChangeResp);
      }
      if (msgCase_ == MsgOneofCase.StatusReqResp) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(StatusReqResp);
      }
      if (msgCase_ == MsgOneofCase.StatueChangeRep) {
        output.WriteRawTag(130, 9);
        output.WriteMessage(StatueChangeRep);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeResp) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(PowerOpeResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidResp) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(AvoidResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
        output.WriteRawTag(194, 9);
        output.WriteMessage(AvoidCompleteRep);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
        output.WriteRawTag(138, 10);
        output.WriteMessage(IndividualUploadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualDownloadReq) {
        output.WriteRawTag(146, 10);
        output.WriteMessage(IndividualDownloadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(IndividualChangeResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
        output.WriteRawTag(218, 10);
        output.WriteMessage(RangeTeachingResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
        output.WriteRawTag(226, 10);
        output.WriteMessage(RangeTeachingCmpRep);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachRep) {
        output.WriteRawTag(242, 10);
        output.WriteMessage(AddressTeachRep);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetResp) {
        output.WriteRawTag(250, 11);
        output.WriteMessage(AlarmResetResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmRep) {
        output.WriteRawTag(146, 12);
        output.WriteMessage(AlarmRep);
      }
      if (ID != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(ID);
      }
      if (SeqNum != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(SeqNum);
      }
      if (LocalSystemTime.Length != 0) {
        output.WriteRawTag(210, 62);
        output.WriteString(LocalSystemTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (SeqNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeqNum);
      }
      if (LocalSystemTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocalSystemTime);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoRep);
      }
      if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoResp);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionRep);
      }
      if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionResp);
      }
      if (msgCase_ == MsgOneofCase.CouplerInfoRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouplerInfoRep);
      }
      if (msgCase_ == MsgOneofCase.CouplerInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CouplerInfoResp);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataRep);
      }
      if (msgCase_ == MsgOneofCase.TavellingDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataResp);
      }
      if (msgCase_ == MsgOneofCase.SectionDataRep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SectionDataRep);
      }
      if (msgCase_ == MsgOneofCase.SectionDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SectionDataResp);
      }
      if (msgCase_ == MsgOneofCase.AddressDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataRep);
      }
      if (msgCase_ == MsgOneofCase.AddressDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataResp);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataRep);
      }
      if (msgCase_ == MsgOneofCase.ScaleDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataResp);
      }
      if (msgCase_ == MsgOneofCase.ControlDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataRep);
      }
      if (msgCase_ == MsgOneofCase.ControlDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataResp);
      }
      if (msgCase_ == MsgOneofCase.GuideDataRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataRep);
      }
      if (msgCase_ == MsgOneofCase.GuideDataResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualDownloadReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualDownloadReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualDownloadResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualDownloadResp);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeReq);
      }
      if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeResp);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeReq);
      }
      if (msgCase_ == MsgOneofCase.ModeChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeResp);
      }
      if (msgCase_ == MsgOneofCase.TransReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransReq);
      }
      if (msgCase_ == MsgOneofCase.TransResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransResp);
      }
      if (msgCase_ == MsgOneofCase.TranCmpRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpRep);
      }
      if (msgCase_ == MsgOneofCase.TranCmpResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpResp);
      }
      if (msgCase_ == MsgOneofCase.CSTIDRenameReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CSTIDRenameReq);
      }
      if (msgCase_ == MsgOneofCase.CSTIDRenameResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CSTIDRenameResp);
      }
      if (msgCase_ == MsgOneofCase.TransCancelReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelReq);
      }
      if (msgCase_ == MsgOneofCase.TransCancelResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelResp);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideInfoReq);
      }
      if (msgCase_ == MsgOneofCase.GuideInfoResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideInfoResp);
      }
      if (msgCase_ == MsgOneofCase.PauseReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseReq);
      }
      if (msgCase_ == MsgOneofCase.PauseResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseResp);
      }
      if (msgCase_ == MsgOneofCase.TransEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransEventRep);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventRep);
      }
      if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventResp);
      }
      if (msgCase_ == MsgOneofCase.StatusReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReq);
      }
      if (msgCase_ == MsgOneofCase.StatusReqResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReqResp);
      }
      if (msgCase_ == MsgOneofCase.StatueChangeRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatueChangeRep);
      }
      if (msgCase_ == MsgOneofCase.StatusChangeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusChangeResp);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeReq);
      }
      if (msgCase_ == MsgOneofCase.PowerOpeResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidReq);
      }
      if (msgCase_ == MsgOneofCase.AvoidResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidResp);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidCompleteRep);
      }
      if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvoidCompleteResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingReq);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingResp);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpRep);
      }
      if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpResp);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachRep);
      }
      if (msgCase_ == MsgOneofCase.AddressTeachResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetReq) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetReq);
      }
      if (msgCase_ == MsgOneofCase.AlarmResetResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetResp);
      }
      if (msgCase_ == MsgOneofCase.AlarmRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmRep);
      }
      if (msgCase_ == MsgOneofCase.AlarmResp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WrapperMessage other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.SeqNum != 0) {
        SeqNum = other.SeqNum;
      }
      if (other.LocalSystemTime.Length != 0) {
        LocalSystemTime = other.LocalSystemTime;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.HostBasicInfoRep:
          HostBasicInfoRep = other.HostBasicInfoRep;
          break;
        case MsgOneofCase.HostBasicInfoResp:
          HostBasicInfoResp = other.HostBasicInfoResp;
          break;
        case MsgOneofCase.BasicInfoVersionRep:
          BasicInfoVersionRep = other.BasicInfoVersionRep;
          break;
        case MsgOneofCase.BasicInfoVersionResp:
          BasicInfoVersionResp = other.BasicInfoVersionResp;
          break;
        case MsgOneofCase.CouplerInfoRep:
          CouplerInfoRep = other.CouplerInfoRep;
          break;
        case MsgOneofCase.CouplerInfoResp:
          CouplerInfoResp = other.CouplerInfoResp;
          break;
        case MsgOneofCase.TavellingDataRep:
          TavellingDataRep = other.TavellingDataRep;
          break;
        case MsgOneofCase.TavellingDataResp:
          TavellingDataResp = other.TavellingDataResp;
          break;
        case MsgOneofCase.SectionDataRep:
          SectionDataRep = other.SectionDataRep;
          break;
        case MsgOneofCase.SectionDataResp:
          SectionDataResp = other.SectionDataResp;
          break;
        case MsgOneofCase.AddressDataRep:
          AddressDataRep = other.AddressDataRep;
          break;
        case MsgOneofCase.AddressDataResp:
          AddressDataResp = other.AddressDataResp;
          break;
        case MsgOneofCase.ScaleDataRep:
          ScaleDataRep = other.ScaleDataRep;
          break;
        case MsgOneofCase.ScaleDataResp:
          ScaleDataResp = other.ScaleDataResp;
          break;
        case MsgOneofCase.ControlDataRep:
          ControlDataRep = other.ControlDataRep;
          break;
        case MsgOneofCase.ControlDataResp:
          ControlDataResp = other.ControlDataResp;
          break;
        case MsgOneofCase.GuideDataRep:
          GuideDataRep = other.GuideDataRep;
          break;
        case MsgOneofCase.GuideDataResp:
          GuideDataResp = other.GuideDataResp;
          break;
        case MsgOneofCase.IndividualUploadReq:
          IndividualUploadReq = other.IndividualUploadReq;
          break;
        case MsgOneofCase.IndividualUploadResp:
          IndividualUploadResp = other.IndividualUploadResp;
          break;
        case MsgOneofCase.IndividualDownloadReq:
          IndividualDownloadReq = other.IndividualDownloadReq;
          break;
        case MsgOneofCase.IndividualDownloadResp:
          IndividualDownloadResp = other.IndividualDownloadResp;
          break;
        case MsgOneofCase.IndividualChangeReq:
          IndividualChangeReq = other.IndividualChangeReq;
          break;
        case MsgOneofCase.IndividualChangeResp:
          IndividualChangeResp = other.IndividualChangeResp;
          break;
        case MsgOneofCase.ModeChangeReq:
          ModeChangeReq = other.ModeChangeReq;
          break;
        case MsgOneofCase.ModeChangeResp:
          ModeChangeResp = other.ModeChangeResp;
          break;
        case MsgOneofCase.TransReq:
          TransReq = other.TransReq;
          break;
        case MsgOneofCase.TransResp:
          TransResp = other.TransResp;
          break;
        case MsgOneofCase.TranCmpRep:
          TranCmpRep = other.TranCmpRep;
          break;
        case MsgOneofCase.TranCmpResp:
          TranCmpResp = other.TranCmpResp;
          break;
        case MsgOneofCase.CSTIDRenameReq:
          CSTIDRenameReq = other.CSTIDRenameReq;
          break;
        case MsgOneofCase.CSTIDRenameResp:
          CSTIDRenameResp = other.CSTIDRenameResp;
          break;
        case MsgOneofCase.TransCancelReq:
          TransCancelReq = other.TransCancelReq;
          break;
        case MsgOneofCase.TransCancelResp:
          TransCancelResp = other.TransCancelResp;
          break;
        case MsgOneofCase.GuideInfoReq:
          GuideInfoReq = other.GuideInfoReq;
          break;
        case MsgOneofCase.GuideInfoResp:
          GuideInfoResp = other.GuideInfoResp;
          break;
        case MsgOneofCase.PauseReq:
          PauseReq = other.PauseReq;
          break;
        case MsgOneofCase.PauseResp:
          PauseResp = other.PauseResp;
          break;
        case MsgOneofCase.TransEventRep:
          TransEventRep = other.TransEventRep;
          break;
        case MsgOneofCase.ImpTransEventRep:
          ImpTransEventRep = other.ImpTransEventRep;
          break;
        case MsgOneofCase.ImpTransEventResp:
          ImpTransEventResp = other.ImpTransEventResp;
          break;
        case MsgOneofCase.StatusReq:
          StatusReq = other.StatusReq;
          break;
        case MsgOneofCase.StatusReqResp:
          StatusReqResp = other.StatusReqResp;
          break;
        case MsgOneofCase.StatueChangeRep:
          StatueChangeRep = other.StatueChangeRep;
          break;
        case MsgOneofCase.StatusChangeResp:
          StatusChangeResp = other.StatusChangeResp;
          break;
        case MsgOneofCase.PowerOpeReq:
          PowerOpeReq = other.PowerOpeReq;
          break;
        case MsgOneofCase.PowerOpeResp:
          PowerOpeResp = other.PowerOpeResp;
          break;
        case MsgOneofCase.AvoidReq:
          AvoidReq = other.AvoidReq;
          break;
        case MsgOneofCase.AvoidResp:
          AvoidResp = other.AvoidResp;
          break;
        case MsgOneofCase.AvoidCompleteRep:
          AvoidCompleteRep = other.AvoidCompleteRep;
          break;
        case MsgOneofCase.AvoidCompleteResp:
          AvoidCompleteResp = other.AvoidCompleteResp;
          break;
        case MsgOneofCase.RangeTeachingReq:
          RangeTeachingReq = other.RangeTeachingReq;
          break;
        case MsgOneofCase.RangeTeachingResp:
          RangeTeachingResp = other.RangeTeachingResp;
          break;
        case MsgOneofCase.RangeTeachingCmpRep:
          RangeTeachingCmpRep = other.RangeTeachingCmpRep;
          break;
        case MsgOneofCase.RangeTeachingCmpResp:
          RangeTeachingCmpResp = other.RangeTeachingCmpResp;
          break;
        case MsgOneofCase.AddressTeachRep:
          AddressTeachRep = other.AddressTeachRep;
          break;
        case MsgOneofCase.AddressTeachResp:
          AddressTeachResp = other.AddressTeachResp;
          break;
        case MsgOneofCase.AlarmResetReq:
          AlarmResetReq = other.AlarmResetReq;
          break;
        case MsgOneofCase.AlarmResetResp:
          AlarmResetResp = other.AlarmResetResp;
          break;
        case MsgOneofCase.AlarmRep:
          AlarmRep = other.AlarmRep;
          break;
        case MsgOneofCase.AlarmResp:
          AlarmResp = other.AlarmResp;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_1_HOST_BASIC_INFO_VERSION_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_1_HOST_BASIC_INFO_VERSION_REP();
            if (msgCase_ == MsgOneofCase.HostBasicInfoRep) {
              subBuilder.MergeFrom(HostBasicInfoRep);
            }
            input.ReadMessage(subBuilder);
            HostBasicInfoRep = subBuilder;
            break;
          }
          case 18: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_2_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_2_BASIC_INFO_VERSION_RESPONSE();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) {
              subBuilder.MergeFrom(BasicInfoVersionResp);
            }
            input.ReadMessage(subBuilder);
            BasicInfoVersionResp = subBuilder;
            break;
          }
          case 90: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_11_COUPLER_INFO_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_11_COUPLER_INFO_REP();
            if (msgCase_ == MsgOneofCase.CouplerInfoRep) {
              subBuilder.MergeFrom(CouplerInfoRep);
            }
            input.ReadMessage(subBuilder);
            CouplerInfoRep = subBuilder;
            break;
          }
          case 106: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_13_TAVELLING_DATA_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_13_TAVELLING_DATA_REP();
            if (msgCase_ == MsgOneofCase.TavellingDataRep) {
              subBuilder.MergeFrom(TavellingDataRep);
            }
            input.ReadMessage(subBuilder);
            TavellingDataRep = subBuilder;
            break;
          }
          case 122: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_15_SECTION_DATA_REP();
            if (msgCase_ == MsgOneofCase.SectionDataRep) {
              subBuilder.MergeFrom(SectionDataRep);
            }
            input.ReadMessage(subBuilder);
            SectionDataRep = subBuilder;
            break;
          }
          case 138: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_17_ADDRESS_DATA_REP();
            if (msgCase_ == MsgOneofCase.AddressDataRep) {
              subBuilder.MergeFrom(AddressDataRep);
            }
            input.ReadMessage(subBuilder);
            AddressDataRep = subBuilder;
            break;
          }
          case 154: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_19_SCALE_DATA_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_19_SCALE_DATA_REP();
            if (msgCase_ == MsgOneofCase.ScaleDataRep) {
              subBuilder.MergeFrom(ScaleDataRep);
            }
            input.ReadMessage(subBuilder);
            ScaleDataRep = subBuilder;
            break;
          }
          case 170: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_21_CONTROL_DATA_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_21_CONTROL_DATA_REP();
            if (msgCase_ == MsgOneofCase.ControlDataRep) {
              subBuilder.MergeFrom(ControlDataRep);
            }
            input.ReadMessage(subBuilder);
            ControlDataRep = subBuilder;
            break;
          }
          case 186: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_23_GUIDE_DATA_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_23_GUIDE_DATA_REP();
            if (msgCase_ == MsgOneofCase.GuideDataRep) {
              subBuilder.MergeFrom(GuideDataRep);
            }
            input.ReadMessage(subBuilder);
            GuideDataRep = subBuilder;
            break;
          }
          case 250: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_31_TRANS_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_31_TRANS_REQUEST();
            if (msgCase_ == MsgOneofCase.TransReq) {
              subBuilder.MergeFrom(TransReq);
            }
            input.ReadMessage(subBuilder);
            TransReq = subBuilder;
            break;
          }
          case 258: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_32_TRANS_COMPLETE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_32_TRANS_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.TranCmpResp) {
              subBuilder.MergeFrom(TranCmpResp);
            }
            input.ReadMessage(subBuilder);
            TranCmpResp = subBuilder;
            break;
          }
          case 282: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_35_CST_ID_RENAME_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_35_CST_ID_RENAME_REQUEST();
            if (msgCase_ == MsgOneofCase.CSTIDRenameReq) {
              subBuilder.MergeFrom(CSTIDRenameReq);
            }
            input.ReadMessage(subBuilder);
            CSTIDRenameReq = subBuilder;
            break;
          }
          case 290: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_36_TRANS_EVENT_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_36_TRANS_EVENT_RESPONSE();
            if (msgCase_ == MsgOneofCase.ImpTransEventResp) {
              subBuilder.MergeFrom(ImpTransEventResp);
            }
            input.ReadMessage(subBuilder);
            ImpTransEventResp = subBuilder;
            break;
          }
          case 298: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_37_TRANS_CANCEL_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_37_TRANS_CANCEL_REQUEST();
            if (msgCase_ == MsgOneofCase.TransCancelReq) {
              subBuilder.MergeFrom(TransCancelReq);
            }
            input.ReadMessage(subBuilder);
            TransCancelReq = subBuilder;
            break;
          }
          case 306: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_38_GUIDE_INFO_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_38_GUIDE_INFO_RESPONSE();
            if (msgCase_ == MsgOneofCase.GuideInfoResp) {
              subBuilder.MergeFrom(GuideInfoResp);
            }
            input.ReadMessage(subBuilder);
            GuideInfoResp = subBuilder;
            break;
          }
          case 314: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_39_PAUSE_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_39_PAUSE_REQUEST();
            if (msgCase_ == MsgOneofCase.PauseReq) {
              subBuilder.MergeFrom(PauseReq);
            }
            input.ReadMessage(subBuilder);
            PauseReq = subBuilder;
            break;
          }
          case 330: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_41_MODE_CHANGE_REQ subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_41_MODE_CHANGE_REQ();
            if (msgCase_ == MsgOneofCase.ModeChangeReq) {
              subBuilder.MergeFrom(ModeChangeReq);
            }
            input.ReadMessage(subBuilder);
            ModeChangeReq = subBuilder;
            break;
          }
          case 346: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_43_STATUS_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_43_STATUS_REQUEST();
            if (msgCase_ == MsgOneofCase.StatusReq) {
              subBuilder.MergeFrom(StatusReq);
            }
            input.ReadMessage(subBuilder);
            StatusReq = subBuilder;
            break;
          }
          case 354: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_44_STATUS_CHANGE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_44_STATUS_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.StatusChangeResp) {
              subBuilder.MergeFrom(StatusChangeResp);
            }
            input.ReadMessage(subBuilder);
            StatusChangeResp = subBuilder;
            break;
          }
          case 362: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_45_POWER_OPE_REQ subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_45_POWER_OPE_REQ();
            if (msgCase_ == MsgOneofCase.PowerOpeReq) {
              subBuilder.MergeFrom(PowerOpeReq);
            }
            input.ReadMessage(subBuilder);
            PowerOpeReq = subBuilder;
            break;
          }
          case 410: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_51_AVOID_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_51_AVOID_REQUEST();
            if (msgCase_ == MsgOneofCase.AvoidReq) {
              subBuilder.MergeFrom(AvoidReq);
            }
            input.ReadMessage(subBuilder);
            AvoidReq = subBuilder;
            break;
          }
          case 418: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_52_AVOID_COMPLETE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_52_AVOID_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.AvoidCompleteResp) {
              subBuilder.MergeFrom(AvoidCompleteResp);
            }
            input.ReadMessage(subBuilder);
            AvoidCompleteResp = subBuilder;
            break;
          }
          case 490: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_61_INDIVIDUAL_UPLOAD_REQ subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_61_INDIVIDUAL_UPLOAD_REQ();
            if (msgCase_ == MsgOneofCase.IndividualUploadReq) {
              subBuilder.MergeFrom(IndividualUploadReq);
            }
            input.ReadMessage(subBuilder);
            IndividualUploadReq = subBuilder;
            break;
          }
          case 498: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualDownloadResp) {
              subBuilder.MergeFrom(IndividualDownloadResp);
            }
            input.ReadMessage(subBuilder);
            IndividualDownloadResp = subBuilder;
            break;
          }
          case 506: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_63_INDIVIDUAL_CHANGE_REQ subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_63_INDIVIDUAL_CHANGE_REQ();
            if (msgCase_ == MsgOneofCase.IndividualChangeReq) {
              subBuilder.MergeFrom(IndividualChangeReq);
            }
            input.ReadMessage(subBuilder);
            IndividualChangeReq = subBuilder;
            break;
          }
          case 570: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_71_RANGE_TEACHING_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_71_RANGE_TEACHING_REQUEST();
            if (msgCase_ == MsgOneofCase.RangeTeachingReq) {
              subBuilder.MergeFrom(RangeTeachingReq);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingReq = subBuilder;
            break;
          }
          case 578: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) {
              subBuilder.MergeFrom(RangeTeachingCmpResp);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingCmpResp = subBuilder;
            break;
          }
          case 594: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_74_ADDRESS_TEACH_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_74_ADDRESS_TEACH_RESPONSE();
            if (msgCase_ == MsgOneofCase.AddressTeachResp) {
              subBuilder.MergeFrom(AddressTeachResp);
            }
            input.ReadMessage(subBuilder);
            AddressTeachResp = subBuilder;
            break;
          }
          case 730: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_91_ALARM_RESET_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_91_ALARM_RESET_REQUEST();
            if (msgCase_ == MsgOneofCase.AlarmResetReq) {
              subBuilder.MergeFrom(AlarmResetReq);
            }
            input.ReadMessage(subBuilder);
            AlarmResetReq = subBuilder;
            break;
          }
          case 754: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_94_ALARM_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_94_ALARM_RESPONSE();
            if (msgCase_ == MsgOneofCase.AlarmResp) {
              subBuilder.MergeFrom(AlarmResp);
            }
            input.ReadMessage(subBuilder);
            AlarmResp = subBuilder;
            break;
          }
          case 810: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE();
            if (msgCase_ == MsgOneofCase.HostBasicInfoResp) {
              subBuilder.MergeFrom(HostBasicInfoResp);
            }
            input.ReadMessage(subBuilder);
            HostBasicInfoResp = subBuilder;
            break;
          }
          case 818: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_102_BASIC_INFO_VERSION_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_102_BASIC_INFO_VERSION_REP();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) {
              subBuilder.MergeFrom(BasicInfoVersionRep);
            }
            input.ReadMessage(subBuilder);
            BasicInfoVersionRep = subBuilder;
            break;
          }
          case 890: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_111_COUPLER_INFO_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_111_COUPLER_INFO_RESPONSE();
            if (msgCase_ == MsgOneofCase.CouplerInfoResp) {
              subBuilder.MergeFrom(CouplerInfoResp);
            }
            input.ReadMessage(subBuilder);
            CouplerInfoResp = subBuilder;
            break;
          }
          case 906: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_113_TAVELLING_DATA_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_113_TAVELLING_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.TavellingDataResp) {
              subBuilder.MergeFrom(TavellingDataResp);
            }
            input.ReadMessage(subBuilder);
            TavellingDataResp = subBuilder;
            break;
          }
          case 922: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_115_SECTION_DATA_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_115_SECTION_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.SectionDataResp) {
              subBuilder.MergeFrom(SectionDataResp);
            }
            input.ReadMessage(subBuilder);
            SectionDataResp = subBuilder;
            break;
          }
          case 938: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_117_ADDRESS_DATA_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_117_ADDRESS_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.AddressDataResp) {
              subBuilder.MergeFrom(AddressDataResp);
            }
            input.ReadMessage(subBuilder);
            AddressDataResp = subBuilder;
            break;
          }
          case 954: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_119_SCALE_DATA_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_119_SCALE_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.ScaleDataResp) {
              subBuilder.MergeFrom(ScaleDataResp);
            }
            input.ReadMessage(subBuilder);
            ScaleDataResp = subBuilder;
            break;
          }
          case 970: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_121_CONTROL_DATA_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_121_CONTROL_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.ControlDataResp) {
              subBuilder.MergeFrom(ControlDataResp);
            }
            input.ReadMessage(subBuilder);
            ControlDataResp = subBuilder;
            break;
          }
          case 986: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_123_GUIDE_DATA_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_123_GUIDE_DATA_RESPONSE();
            if (msgCase_ == MsgOneofCase.GuideDataResp) {
              subBuilder.MergeFrom(GuideDataResp);
            }
            input.ReadMessage(subBuilder);
            GuideDataResp = subBuilder;
            break;
          }
          case 1050: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_131_TRANS_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_131_TRANS_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransResp) {
              subBuilder.MergeFrom(TransResp);
            }
            input.ReadMessage(subBuilder);
            TransResp = subBuilder;
            break;
          }
          case 1058: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_132_TRANS_COMPLETE_REPORT subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_132_TRANS_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.TranCmpRep) {
              subBuilder.MergeFrom(TranCmpRep);
            }
            input.ReadMessage(subBuilder);
            TranCmpRep = subBuilder;
            break;
          }
          case 1074: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_134_TRANS_EVENT_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_134_TRANS_EVENT_REP();
            if (msgCase_ == MsgOneofCase.TransEventRep) {
              subBuilder.MergeFrom(TransEventRep);
            }
            input.ReadMessage(subBuilder);
            TransEventRep = subBuilder;
            break;
          }
          case 1082: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_135_CST_ID_RENAME_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_135_CST_ID_RENAME_RESPONSE();
            if (msgCase_ == MsgOneofCase.CSTIDRenameResp) {
              subBuilder.MergeFrom(CSTIDRenameResp);
            }
            input.ReadMessage(subBuilder);
            CSTIDRenameResp = subBuilder;
            break;
          }
          case 1090: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_136_TRANS_EVENT_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_136_TRANS_EVENT_REP();
            if (msgCase_ == MsgOneofCase.ImpTransEventRep) {
              subBuilder.MergeFrom(ImpTransEventRep);
            }
            input.ReadMessage(subBuilder);
            ImpTransEventRep = subBuilder;
            break;
          }
          case 1098: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_137_TRANS_CANCEL_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_137_TRANS_CANCEL_RESPONSE();
            if (msgCase_ == MsgOneofCase.TransCancelResp) {
              subBuilder.MergeFrom(TransCancelResp);
            }
            input.ReadMessage(subBuilder);
            TransCancelResp = subBuilder;
            break;
          }
          case 1106: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_138_GUIDE_INFO_REQUEST subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_138_GUIDE_INFO_REQUEST();
            if (msgCase_ == MsgOneofCase.GuideInfoReq) {
              subBuilder.MergeFrom(GuideInfoReq);
            }
            input.ReadMessage(subBuilder);
            GuideInfoReq = subBuilder;
            break;
          }
          case 1114: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_139_PAUSE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_139_PAUSE_RESPONSE();
            if (msgCase_ == MsgOneofCase.PauseResp) {
              subBuilder.MergeFrom(PauseResp);
            }
            input.ReadMessage(subBuilder);
            PauseResp = subBuilder;
            break;
          }
          case 1130: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_141_MODE_CHANGE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_141_MODE_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.ModeChangeResp) {
              subBuilder.MergeFrom(ModeChangeResp);
            }
            input.ReadMessage(subBuilder);
            ModeChangeResp = subBuilder;
            break;
          }
          case 1146: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_143_STATUS_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_143_STATUS_RESPONSE();
            if (msgCase_ == MsgOneofCase.StatusReqResp) {
              subBuilder.MergeFrom(StatusReqResp);
            }
            input.ReadMessage(subBuilder);
            StatusReqResp = subBuilder;
            break;
          }
          case 1154: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_144_STATUS_CHANGE_REP subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_144_STATUS_CHANGE_REP();
            if (msgCase_ == MsgOneofCase.StatueChangeRep) {
              subBuilder.MergeFrom(StatueChangeRep);
            }
            input.ReadMessage(subBuilder);
            StatueChangeRep = subBuilder;
            break;
          }
          case 1162: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_145_POWER_OPE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_145_POWER_OPE_RESPONSE();
            if (msgCase_ == MsgOneofCase.PowerOpeResp) {
              subBuilder.MergeFrom(PowerOpeResp);
            }
            input.ReadMessage(subBuilder);
            PowerOpeResp = subBuilder;
            break;
          }
          case 1210: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_151_AVOID_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_151_AVOID_RESPONSE();
            if (msgCase_ == MsgOneofCase.AvoidResp) {
              subBuilder.MergeFrom(AvoidResp);
            }
            input.ReadMessage(subBuilder);
            AvoidResp = subBuilder;
            break;
          }
          case 1218: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_152_AVOID_COMPLETE_REPORT subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_152_AVOID_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.AvoidCompleteRep) {
              subBuilder.MergeFrom(AvoidCompleteRep);
            }
            input.ReadMessage(subBuilder);
            AvoidCompleteRep = subBuilder;
            break;
          }
          case 1290: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_161_INDIVIDUAL_UPLOAD_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualUploadResp) {
              subBuilder.MergeFrom(IndividualUploadResp);
            }
            input.ReadMessage(subBuilder);
            IndividualUploadResp = subBuilder;
            break;
          }
          case 1298: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_162_INDIVIDUAL_DOWNLOAD_REQ subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_162_INDIVIDUAL_DOWNLOAD_REQ();
            if (msgCase_ == MsgOneofCase.IndividualDownloadReq) {
              subBuilder.MergeFrom(IndividualDownloadReq);
            }
            input.ReadMessage(subBuilder);
            IndividualDownloadReq = subBuilder;
            break;
          }
          case 1306: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_163_INDIVIDUAL_CHANGE_RESPONSE();
            if (msgCase_ == MsgOneofCase.IndividualChangeResp) {
              subBuilder.MergeFrom(IndividualChangeResp);
            }
            input.ReadMessage(subBuilder);
            IndividualChangeResp = subBuilder;
            break;
          }
          case 1370: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_171_RANGE_TEACHING_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_171_RANGE_TEACHING_RESPONSE();
            if (msgCase_ == MsgOneofCase.RangeTeachingResp) {
              subBuilder.MergeFrom(RangeTeachingResp);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingResp = subBuilder;
            break;
          }
          case 1378: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_172_RANGE_TEACHING_COMPLETE_REPORT();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) {
              subBuilder.MergeFrom(RangeTeachingCmpRep);
            }
            input.ReadMessage(subBuilder);
            RangeTeachingCmpRep = subBuilder;
            break;
          }
          case 1394: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_174_ADDRESS_TEACH_REPORT subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_174_ADDRESS_TEACH_REPORT();
            if (msgCase_ == MsgOneofCase.AddressTeachRep) {
              subBuilder.MergeFrom(AddressTeachRep);
            }
            input.ReadMessage(subBuilder);
            AddressTeachRep = subBuilder;
            break;
          }
          case 1530: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_191_ALARM_RESET_RESPONSE subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_191_ALARM_RESET_RESPONSE();
            if (msgCase_ == MsgOneofCase.AlarmResetResp) {
              subBuilder.MergeFrom(AlarmResetResp);
            }
            input.ReadMessage(subBuilder);
            AlarmResetResp = subBuilder;
            break;
          }
          case 1554: {
            global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_194_ALARM_REPORT subBuilder = new global::com.mirle.aka.sc.ProtocolFormat.ase.agvMessage.ID_194_ALARM_REPORT();
            if (msgCase_ == MsgOneofCase.AlarmRep) {
              subBuilder.MergeFrom(AlarmRep);
            }
            input.ReadMessage(subBuilder);
            AlarmRep = subBuilder;
            break;
          }
          case 8000: {
            ID = input.ReadInt32();
            break;
          }
          case 8008: {
            SeqNum = input.ReadInt32();
            break;
          }
          case 8018: {
            LocalSystemTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
